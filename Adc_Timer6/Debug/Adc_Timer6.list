
Adc_Timer6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001818  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080019c4  080019c4  000119c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080019d4  080019d4  000119d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080019dc  080019dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080019e0  080019e0  000119e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080019e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000fc  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000108  20000108  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000b9e1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001bc6  00000000  00000000  0002ba1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000524f  00000000  00000000  0002d5e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  00032838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a88  00000000  00000000  00033058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000400c  00000000  00000000  00033ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000034b9  00000000  00000000  00037aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003afa5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000017cc  00000000  00000000  0003b024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080019ac 	.word	0x080019ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080019ac 	.word	0x080019ac

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_InitTick+0x3c>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_InitTick+0x40>)
{
 8000502:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000504:	7818      	ldrb	r0, [r3, #0]
 8000506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050a:	fbb3 f3f0 	udiv	r3, r3, r0
 800050e:	6810      	ldr	r0, [r2, #0]
 8000510:	fbb0 f0f3 	udiv	r0, r0, r3
 8000514:	f000 fac6 	bl	8000aa4 <HAL_SYSTICK_Config>
 8000518:	4604      	mov	r4, r0
 800051a:	b958      	cbnz	r0, 8000534 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051c:	2d0f      	cmp	r5, #15
 800051e:	d809      	bhi.n	8000534 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000520:	4602      	mov	r2, r0
 8000522:	4629      	mov	r1, r5
 8000524:	f04f 30ff 	mov.w	r0, #4294967295
 8000528:	f000 fa7a 	bl	8000a20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <HAL_InitTick+0x44>)
 800052e:	4620      	mov	r0, r4
 8000530:	601d      	str	r5, [r3, #0]
 8000532:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000534:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000536:	bd38      	pop	{r3, r4, r5, pc}
 8000538:	20000008 	.word	0x20000008
 800053c:	20000000 	.word	0x20000000
 8000540:	20000004 	.word	0x20000004

08000544 <HAL_Init>:
{
 8000544:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <HAL_Init+0x30>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800054e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000556:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800055e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000560:	2003      	movs	r0, #3
 8000562:	f000 fa4b 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ffc8 	bl	80004fc <HAL_InitTick>
  HAL_MspInit();
 800056c:	f001 f8e6 	bl	800173c <HAL_MspInit>
}
 8000570:	2000      	movs	r0, #0
 8000572:	bd08      	pop	{r3, pc}
 8000574:	40023c00 	.word	0x40023c00

08000578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x10>)
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_IncTick+0x14>)
 800057c:	6811      	ldr	r1, [r2, #0]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	440b      	add	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	2000002c 	.word	0x2000002c
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <HAL_GetTick+0x8>)
 8000592:	6818      	ldr	r0, [r3, #0]
}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000002c 	.word	0x2000002c

0800059c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800059c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800059e:	4604      	mov	r4, r0
 80005a0:	2800      	cmp	r0, #0
 80005a2:	f000 809b 	beq.w	80006dc <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005a6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005a8:	b925      	cbnz	r5, 80005b4 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005aa:	f001 f8e3 	bl	8001774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005ae:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005b0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005b6:	06db      	lsls	r3, r3, #27
 80005b8:	f100 808e 	bmi.w	80006d8 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005c2:	f023 0302 	bic.w	r3, r3, #2
 80005c6:	f043 0302 	orr.w	r3, r3, #2
 80005ca:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005cc:	4b44      	ldr	r3, [pc, #272]	; (80006e0 <HAL_ADC_Init+0x144>)
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005d4:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	6861      	ldr	r1, [r4, #4]
 80005da:	430a      	orrs	r2, r1
 80005dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005de:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005e0:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005f2:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005f4:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005f6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	430a      	orrs	r2, r1
 8000600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000602:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000604:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800060a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	430a      	orrs	r2, r1
 8000610:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000612:	4934      	ldr	r1, [pc, #208]	; (80006e4 <HAL_ADC_Init+0x148>)
 8000614:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000616:	428a      	cmp	r2, r1
 8000618:	d052      	beq.n	80006c0 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800061a:	6899      	ldr	r1, [r3, #8]
 800061c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000620:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000622:	6899      	ldr	r1, [r3, #8]
 8000624:	430a      	orrs	r2, r1
 8000626:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000628:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800062a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800062c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000632:	689a      	ldr	r2, [r3, #8]
 8000634:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000636:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000638:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800063a:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800063c:	f022 0202 	bic.w	r2, r2, #2
 8000640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000648:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800064a:	f894 2020 	ldrb.w	r2, [r4, #32]
 800064e:	2a00      	cmp	r2, #0
 8000650:	d03e      	beq.n	80006d0 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000652:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000654:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800065a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800065c:	685a      	ldr	r2, [r3, #4]
 800065e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000662:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	3901      	subs	r1, #1
 8000668:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800066c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800066e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000670:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000672:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067a:	3901      	subs	r1, #1
 800067c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000682:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000684:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800068c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000694:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000696:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000698:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800069a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800069e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006a0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006a2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006a4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006a8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006aa:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006ae:	f023 0303 	bic.w	r3, r3, #3
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006b8:	2300      	movs	r3, #0
 80006ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006be:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006ce:	e7b2      	b.n	8000636 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006d0:	685a      	ldr	r2, [r3, #4]
 80006d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006d6:	e7c9      	b.n	800066c <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006d8:	2001      	movs	r0, #1
 80006da:	e7ed      	b.n	80006b8 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006dc:	2001      	movs	r0, #1
}
 80006de:	bd38      	pop	{r3, r4, r5, pc}
 80006e0:	40012300 	.word	0x40012300
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_Start>:
{
 80006e8:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80006ea:	2300      	movs	r3, #0
 80006ec:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d061      	beq.n	80007ba <HAL_ADC_Start+0xd2>
 80006f6:	2301      	movs	r3, #1
 80006f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006fc:	6803      	ldr	r3, [r0, #0]
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	07d1      	lsls	r1, r2, #31
 8000702:	d505      	bpl.n	8000710 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	07d2      	lsls	r2, r2, #31
 8000708:	d414      	bmi.n	8000734 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 800070a:	2000      	movs	r0, #0
}
 800070c:	b002      	add	sp, #8
 800070e:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000710:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000712:	492b      	ldr	r1, [pc, #172]	; (80007c0 <HAL_ADC_Start+0xd8>)
    __HAL_ADC_ENABLE(hadc);
 8000714:	f042 0201 	orr.w	r2, r2, #1
 8000718:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800071a:	4a2a      	ldr	r2, [pc, #168]	; (80007c4 <HAL_ADC_Start+0xdc>)
 800071c:	6812      	ldr	r2, [r2, #0]
 800071e:	fbb2 f2f1 	udiv	r2, r2, r1
 8000722:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000726:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000728:	9a01      	ldr	r2, [sp, #4]
 800072a:	2a00      	cmp	r2, #0
 800072c:	d0ea      	beq.n	8000704 <HAL_ADC_Start+0x1c>
      counter--;
 800072e:	9a01      	ldr	r2, [sp, #4]
 8000730:	3a01      	subs	r2, #1
 8000732:	e7f8      	b.n	8000726 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000734:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000736:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800073a:	f022 0201 	bic.w	r2, r2, #1
 800073e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000742:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000748:	bf41      	itttt	mi
 800074a:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 800074c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000750:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000754:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000756:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800075c:	bf1c      	itt	ne
 800075e:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000760:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000764:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000766:	2200      	movs	r2, #0
 8000768:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800076c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000770:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <HAL_ADC_Start+0xe0>)
 8000774:	6851      	ldr	r1, [r2, #4]
 8000776:	f011 0f1f 	tst.w	r1, #31
 800077a:	4914      	ldr	r1, [pc, #80]	; (80007cc <HAL_ADC_Start+0xe4>)
 800077c:	d11a      	bne.n	80007b4 <HAL_ADC_Start+0xcc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800077e:	428b      	cmp	r3, r1
 8000780:	d006      	beq.n	8000790 <HAL_ADC_Start+0xa8>
 8000782:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8000786:	428b      	cmp	r3, r1
 8000788:	d10b      	bne.n	80007a2 <HAL_ADC_Start+0xba>
 800078a:	6852      	ldr	r2, [r2, #4]
 800078c:	06d2      	lsls	r2, r2, #27
 800078e:	d1bc      	bne.n	800070a <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000790:	6898      	ldr	r0, [r3, #8]
 8000792:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000796:	d1b8      	bne.n	800070a <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000798:	689a      	ldr	r2, [r3, #8]
 800079a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	e7b4      	b.n	800070c <HAL_ADC_Start+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80007a2:	490b      	ldr	r1, [pc, #44]	; (80007d0 <HAL_ADC_Start+0xe8>)
 80007a4:	428b      	cmp	r3, r1
 80007a6:	d1b0      	bne.n	800070a <HAL_ADC_Start+0x22>
 80007a8:	6852      	ldr	r2, [r2, #4]
 80007aa:	f002 021f 	and.w	r2, r2, #31
 80007ae:	2a0f      	cmp	r2, #15
 80007b0:	d9ee      	bls.n	8000790 <HAL_ADC_Start+0xa8>
 80007b2:	e7aa      	b.n	800070a <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007b4:	428b      	cmp	r3, r1
 80007b6:	d1a8      	bne.n	800070a <HAL_ADC_Start+0x22>
 80007b8:	e7ea      	b.n	8000790 <HAL_ADC_Start+0xa8>
  __HAL_LOCK(hadc);
 80007ba:	2002      	movs	r0, #2
 80007bc:	e7a6      	b.n	800070c <HAL_ADC_Start+0x24>
 80007be:	bf00      	nop
 80007c0:	000f4240 	.word	0x000f4240
 80007c4:	20000008 	.word	0x20000008
 80007c8:	40012300 	.word	0x40012300
 80007cc:	40012000 	.word	0x40012000
 80007d0:	40012200 	.word	0x40012200

080007d4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80007d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d017      	beq.n	800080c <HAL_ADC_Stop+0x38>
 80007dc:	2301      	movs	r3, #1
 80007de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 80007e2:	6803      	ldr	r3, [r0, #0]
 80007e4:	689a      	ldr	r2, [r3, #8]
 80007e6:	f022 0201 	bic.w	r2, r2, #1
 80007ea:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	07db      	lsls	r3, r3, #31
 80007f0:	d407      	bmi.n	8000802 <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 80007f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007f8:	f023 0301 	bic.w	r3, r3, #1
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000802:	2300      	movs	r3, #0
 8000804:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000808:	4618      	mov	r0, r3
 800080a:	4770      	bx	lr
  __HAL_LOCK(hadc);
 800080c:	2002      	movs	r0, #2
}
 800080e:	4770      	bx	lr

08000810 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000810:	6803      	ldr	r3, [r0, #0]
 8000812:	689a      	ldr	r2, [r3, #8]
{
 8000814:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000816:	0556      	lsls	r6, r2, #21
{
 8000818:	4604      	mov	r4, r0
 800081a:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800081c:	d50b      	bpl.n	8000836 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800081e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000820:	05d8      	lsls	r0, r3, #23
 8000822:	d508      	bpl.n	8000836 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000826:	f043 0320 	orr.w	r3, r3, #32
 800082a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 800082c:	2300      	movs	r3, #0
 800082e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8000832:	2001      	movs	r0, #1
 8000834:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8000836:	f7ff feab 	bl	8000590 <HAL_GetTick>
 800083a:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	0792      	lsls	r2, r2, #30
 8000842:	d50c      	bpl.n	800085e <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000844:	f06f 0212 	mvn.w	r2, #18
 8000848:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800084a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800084c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000850:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000858:	d013      	beq.n	8000882 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 800085a:	2000      	movs	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 800085e:	1c69      	adds	r1, r5, #1
 8000860:	d0ed      	beq.n	800083e <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000862:	b945      	cbnz	r5, 8000876 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800086c:	2300      	movs	r3, #0
 800086e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000872:	2003      	movs	r0, #3
 8000874:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000876:	f7ff fe8b 	bl	8000590 <HAL_GetTick>
 800087a:	1b80      	subs	r0, r0, r6
 800087c:	4285      	cmp	r5, r0
 800087e:	d2dd      	bcs.n	800083c <HAL_ADC_PollForConversion+0x2c>
 8000880:	e7f0      	b.n	8000864 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000882:	7e22      	ldrb	r2, [r4, #24]
 8000884:	2a00      	cmp	r2, #0
 8000886:	d1e8      	bne.n	800085a <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800088a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800088e:	d002      	beq.n	8000896 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000890:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000892:	055b      	lsls	r3, r3, #21
 8000894:	d4e1      	bmi.n	800085a <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000896:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800089c:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800089e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80008a0:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80008a4:	d1d9      	bne.n	800085a <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6423      	str	r3, [r4, #64]	; 0x40
}
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80008b0:	6803      	ldr	r3, [r0, #0]
 80008b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80008b4:	4770      	bx	lr
	...

080008b8 <HAL_ADC_ConfigChannel>:
{
 80008b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80008ba:	2300      	movs	r3, #0
 80008bc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80008be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d06e      	beq.n	80009a4 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008c6:	680d      	ldr	r5, [r1, #0]
 80008c8:	6804      	ldr	r4, [r0, #0]
 80008ca:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80008cc:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008ce:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80008d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80008d4:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008d6:	d92a      	bls.n	800092e <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80008d8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80008dc:	68e7      	ldr	r7, [r4, #12]
 80008de:	3b1e      	subs	r3, #30
 80008e0:	f04f 0e07 	mov.w	lr, #7
 80008e4:	fa0e fe03 	lsl.w	lr, lr, r3
 80008e8:	ea27 070e 	bic.w	r7, r7, lr
 80008ec:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008ee:	68e7      	ldr	r7, [r4, #12]
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	433b      	orrs	r3, r7
 80008f6:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80008f8:	684a      	ldr	r2, [r1, #4]
 80008fa:	2a06      	cmp	r2, #6
 80008fc:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000900:	d825      	bhi.n	800094e <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000902:	4413      	add	r3, r2
 8000904:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000906:	1f59      	subs	r1, r3, #5
 8000908:	231f      	movs	r3, #31
 800090a:	408b      	lsls	r3, r1
 800090c:	ea27 0303 	bic.w	r3, r7, r3
 8000910:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000912:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000914:	fa06 f101 	lsl.w	r1, r6, r1
 8000918:	4311      	orrs	r1, r2
 800091a:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800091c:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <HAL_ADC_ConfigChannel+0x130>)
 800091e:	429c      	cmp	r4, r3
 8000920:	d034      	beq.n	800098c <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 8000922:	2300      	movs	r3, #0
 8000924:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000928:	4618      	mov	r0, r3
}
 800092a:	b003      	add	sp, #12
 800092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800092e:	6927      	ldr	r7, [r4, #16]
 8000930:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000934:	f04f 0e07 	mov.w	lr, #7
 8000938:	fa0e fe03 	lsl.w	lr, lr, r3
 800093c:	ea27 070e 	bic.w	r7, r7, lr
 8000940:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000942:	6927      	ldr	r7, [r4, #16]
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	433b      	orrs	r3, r7
 800094a:	6123      	str	r3, [r4, #16]
 800094c:	e7d4      	b.n	80008f8 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 800094e:	2a0c      	cmp	r2, #12
 8000950:	d80e      	bhi.n	8000970 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000952:	4413      	add	r3, r2
 8000954:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000956:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800095a:	231f      	movs	r3, #31
 800095c:	4093      	lsls	r3, r2
 800095e:	ea21 0303 	bic.w	r3, r1, r3
 8000962:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000964:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000966:	fa06 f202 	lsl.w	r2, r6, r2
 800096a:	431a      	orrs	r2, r3
 800096c:	6322      	str	r2, [r4, #48]	; 0x30
 800096e:	e7d5      	b.n	800091c <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000970:	4413      	add	r3, r2
 8000972:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000974:	3b41      	subs	r3, #65	; 0x41
 8000976:	221f      	movs	r2, #31
 8000978:	409a      	lsls	r2, r3
 800097a:	ea21 0202 	bic.w	r2, r1, r2
 800097e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000980:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000982:	fa06 f103 	lsl.w	r1, r6, r3
 8000986:	4311      	orrs	r1, r2
 8000988:	62e1      	str	r1, [r4, #44]	; 0x2c
 800098a:	e7c7      	b.n	800091c <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800098c:	2d12      	cmp	r5, #18
 800098e:	d10b      	bne.n	80009a8 <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_ADC_ConfigChannel+0x134>)
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000998:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	e7be      	b.n	8000922 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80009a4:	2002      	movs	r0, #2
 80009a6:	e7c0      	b.n	800092a <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_ADC_ConfigChannel+0x138>)
 80009aa:	429d      	cmp	r5, r3
 80009ac:	d001      	beq.n	80009b2 <HAL_ADC_ConfigChannel+0xfa>
 80009ae:	2d11      	cmp	r5, #17
 80009b0:	d1b7      	bne.n	8000922 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_ADC_ConfigChannel+0x134>)
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80009ba:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80009c2:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_ADC_ConfigChannel+0x138>)
 80009c6:	429d      	cmp	r5, r3
 80009c8:	d1ab      	bne.n	8000922 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_ADC_ConfigChannel+0x13c>)
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_ADC_ConfigChannel+0x140>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80009d4:	230a      	movs	r3, #10
 80009d6:	4353      	muls	r3, r2
        counter--;
 80009d8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80009da:	9b01      	ldr	r3, [sp, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0a0      	beq.n	8000922 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80009e0:	9b01      	ldr	r3, [sp, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	e7f8      	b.n	80009d8 <HAL_ADC_ConfigChannel+0x120>
 80009e6:	bf00      	nop
 80009e8:	40012000 	.word	0x40012000
 80009ec:	40012300 	.word	0x40012300
 80009f0:	10000012 	.word	0x10000012
 80009f4:	20000008 	.word	0x20000008
 80009f8:	000f4240 	.word	0x000f4240

080009fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009fe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a04:	041b      	lsls	r3, r3, #16
 8000a06:	0c1b      	lsrs	r3, r3, #16
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a0c:	0200      	lsls	r0, r0, #8
 8000a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a12:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a16:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a18:	60d3      	str	r3, [r2, #12]
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a22:	b530      	push	{r4, r5, lr}
 8000a24:	68dc      	ldr	r4, [r3, #12]
 8000a26:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	bf28      	it	cs
 8000a34:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a36:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 0501 	mov.w	r5, #1
 8000a3c:	fa05 f303 	lsl.w	r3, r5, r3
 8000a40:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a44:	bf8c      	ite	hi
 8000a46:	3c03      	subhi	r4, #3
 8000a48:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4a:	4019      	ands	r1, r3
 8000a4c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4e:	fa05 f404 	lsl.w	r4, r5, r4
 8000a52:	3c01      	subs	r4, #1
 8000a54:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000a56:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	ea42 0201 	orr.w	r2, r2, r1
 8000a5c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	bfad      	iteet	ge
 8000a62:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	f000 000f 	andlt.w	r0, r0, #15
 8000a6a:	4b06      	ldrlt	r3, [pc, #24]	; (8000a84 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	bfb5      	itete	lt
 8000a72:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a7c:	bd30      	pop	{r4, r5, pc}
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00
 8000a84:	e000ed14 	.word	0xe000ed14

08000a88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	db08      	blt.n	8000a9e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8c:	0942      	lsrs	r2, r0, #5
 8000a8e:	2301      	movs	r3, #1
 8000a90:	f000 001f 	and.w	r0, r0, #31
 8000a94:	fa03 f000 	lsl.w	r0, r3, r0
 8000a98:	4b01      	ldr	r3, [pc, #4]	; (8000aa0 <HAL_NVIC_EnableIRQ+0x18>)
 8000a9a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aaa:	d20a      	bcs.n	8000ac2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	21f0      	movs	r1, #240	; 0xf0
 8000ab4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ac2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e010 	.word	0xe000e010
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad8:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000ca0 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000adc:	4a6e      	ldr	r2, [pc, #440]	; (8000c98 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ade:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000ca4 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ae2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000ae6:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ae8:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000aea:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aec:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000aee:	42ac      	cmp	r4, r5
 8000af0:	f040 80b8 	bne.w	8000c64 <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af4:	684c      	ldr	r4, [r1, #4]
 8000af6:	f024 0c10 	bic.w	ip, r4, #16
 8000afa:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000afe:	2e01      	cmp	r6, #1
 8000b00:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000b04:	d812      	bhi.n	8000b2c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000b06:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b08:	2603      	movs	r6, #3
 8000b0a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b0e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b12:	68ce      	ldr	r6, [r1, #12]
 8000b14:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b18:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000b1a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b1c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b1e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b22:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b26:	409e      	lsls	r6, r3
 8000b28:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000b2a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b2c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000b2e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b30:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b34:	43f6      	mvns	r6, r6
 8000b36:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b3a:	688f      	ldr	r7, [r1, #8]
 8000b3c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b40:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b44:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000b48:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b4a:	d116      	bne.n	8000b7a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000b4c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b50:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b54:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000b58:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b5c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b60:	f04f 0c0f 	mov.w	ip, #15
 8000b64:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b68:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b6c:	690f      	ldr	r7, [r1, #16]
 8000b6e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000b72:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000b76:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000b7a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b7c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b7e:	f004 0703 	and.w	r7, r4, #3
 8000b82:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000b86:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000b8a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b8c:	00e6      	lsls	r6, r4, #3
 8000b8e:	d569      	bpl.n	8000c64 <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b90:	f04f 0b00 	mov.w	fp, #0
 8000b94:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b98:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b9c:	4e3f      	ldr	r6, [pc, #252]	; (8000c9c <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ba2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ba6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000baa:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000bae:	9703      	str	r7, [sp, #12]
 8000bb0:	9f03      	ldr	r7, [sp, #12]
 8000bb2:	f023 0703 	bic.w	r7, r3, #3
 8000bb6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000bba:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bbe:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bc2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bc6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000bca:	f04f 0e0f 	mov.w	lr, #15
 8000bce:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bd2:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bd4:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bd8:	d04b      	beq.n	8000c72 <HAL_GPIO_Init+0x1a2>
 8000bda:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bde:	42b0      	cmp	r0, r6
 8000be0:	d049      	beq.n	8000c76 <HAL_GPIO_Init+0x1a6>
 8000be2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000be6:	42b0      	cmp	r0, r6
 8000be8:	d047      	beq.n	8000c7a <HAL_GPIO_Init+0x1aa>
 8000bea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bee:	42b0      	cmp	r0, r6
 8000bf0:	d045      	beq.n	8000c7e <HAL_GPIO_Init+0x1ae>
 8000bf2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bf6:	42b0      	cmp	r0, r6
 8000bf8:	d043      	beq.n	8000c82 <HAL_GPIO_Init+0x1b2>
 8000bfa:	4548      	cmp	r0, r9
 8000bfc:	d043      	beq.n	8000c86 <HAL_GPIO_Init+0x1b6>
 8000bfe:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000c02:	42b0      	cmp	r0, r6
 8000c04:	d041      	beq.n	8000c8a <HAL_GPIO_Init+0x1ba>
 8000c06:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c0a:	42b0      	cmp	r0, r6
 8000c0c:	d03f      	beq.n	8000c8e <HAL_GPIO_Init+0x1be>
 8000c0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c12:	42b0      	cmp	r0, r6
 8000c14:	d03d      	beq.n	8000c92 <HAL_GPIO_Init+0x1c2>
 8000c16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c1a:	42b0      	cmp	r0, r6
 8000c1c:	bf14      	ite	ne
 8000c1e:	260a      	movne	r6, #10
 8000c20:	2609      	moveq	r6, #9
 8000c22:	fa06 f60c 	lsl.w	r6, r6, ip
 8000c26:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c2a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000c2c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c2e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c30:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000c34:	bf0c      	ite	eq
 8000c36:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c38:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000c3a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000c3c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c3e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c42:	bf0c      	ite	eq
 8000c44:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c46:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000c48:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c4a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c4c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000c50:	bf0c      	ite	eq
 8000c52:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c54:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000c56:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000c58:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c5a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000c5c:	bf54      	ite	pl
 8000c5e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000c60:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000c62:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c64:	3301      	adds	r3, #1
 8000c66:	2b10      	cmp	r3, #16
 8000c68:	f47f af3d 	bne.w	8000ae6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000c6c:	b005      	add	sp, #20
 8000c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c72:	465e      	mov	r6, fp
 8000c74:	e7d5      	b.n	8000c22 <HAL_GPIO_Init+0x152>
 8000c76:	2601      	movs	r6, #1
 8000c78:	e7d3      	b.n	8000c22 <HAL_GPIO_Init+0x152>
 8000c7a:	2602      	movs	r6, #2
 8000c7c:	e7d1      	b.n	8000c22 <HAL_GPIO_Init+0x152>
 8000c7e:	2603      	movs	r6, #3
 8000c80:	e7cf      	b.n	8000c22 <HAL_GPIO_Init+0x152>
 8000c82:	2604      	movs	r6, #4
 8000c84:	e7cd      	b.n	8000c22 <HAL_GPIO_Init+0x152>
 8000c86:	2605      	movs	r6, #5
 8000c88:	e7cb      	b.n	8000c22 <HAL_GPIO_Init+0x152>
 8000c8a:	2606      	movs	r6, #6
 8000c8c:	e7c9      	b.n	8000c22 <HAL_GPIO_Init+0x152>
 8000c8e:	2607      	movs	r6, #7
 8000c90:	e7c7      	b.n	8000c22 <HAL_GPIO_Init+0x152>
 8000c92:	2608      	movs	r6, #8
 8000c94:	e7c5      	b.n	8000c22 <HAL_GPIO_Init+0x152>
 8000c96:	bf00      	nop
 8000c98:	40013c00 	.word	0x40013c00
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40021400 	.word	0x40021400

08000ca8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ca8:	6943      	ldr	r3, [r0, #20]
 8000caa:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000cae:	bf08      	it	eq
 8000cb0:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cb2:	6181      	str	r1, [r0, #24]
 8000cb4:	4770      	bx	lr
	...

08000cb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cc0:	4c18      	ldr	r4, [pc, #96]	; (8000d24 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cc8:	641a      	str	r2, [r3, #64]	; 0x40
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_PWREx_EnableOverDrive+0x70>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000cda:	f7ff fc59 	bl	8000590 <HAL_GetTick>
 8000cde:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ce0:	6863      	ldr	r3, [r4, #4]
 8000ce2:	03da      	lsls	r2, r3, #15
 8000ce4:	d50b      	bpl.n	8000cfe <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ce8:	4c0e      	ldr	r4, [pc, #56]	; (8000d24 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000cee:	f7ff fc4f 	bl	8000590 <HAL_GetTick>
 8000cf2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000cf4:	6863      	ldr	r3, [r4, #4]
 8000cf6:	039b      	lsls	r3, r3, #14
 8000cf8:	d50a      	bpl.n	8000d10 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	e006      	b.n	8000d0c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cfe:	f7ff fc47 	bl	8000590 <HAL_GetTick>
 8000d02:	1b40      	subs	r0, r0, r5
 8000d04:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d08:	d9ea      	bls.n	8000ce0 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000d0a:	2003      	movs	r0, #3
}
 8000d0c:	b003      	add	sp, #12
 8000d0e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d10:	f7ff fc3e 	bl	8000590 <HAL_GetTick>
 8000d14:	1b40      	subs	r0, r0, r5
 8000d16:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d1a:	d9eb      	bls.n	8000cf4 <HAL_PWREx_EnableOverDrive+0x3c>
 8000d1c:	e7f5      	b.n	8000d0a <HAL_PWREx_EnableOverDrive+0x52>
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40007000 	.word	0x40007000
 8000d28:	420e0040 	.word	0x420e0040
 8000d2c:	420e0044 	.word	0x420e0044

08000d30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d34:	4604      	mov	r4, r0
 8000d36:	b908      	cbnz	r0, 8000d3c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000d38:	2001      	movs	r0, #1
 8000d3a:	e03f      	b.n	8000dbc <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d3c:	6803      	ldr	r3, [r0, #0]
 8000d3e:	07dd      	lsls	r5, r3, #31
 8000d40:	d410      	bmi.n	8000d64 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	0798      	lsls	r0, r3, #30
 8000d46:	d45a      	bmi.n	8000dfe <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	071a      	lsls	r2, r3, #28
 8000d4c:	f100 809c 	bmi.w	8000e88 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d50:	6823      	ldr	r3, [r4, #0]
 8000d52:	075b      	lsls	r3, r3, #29
 8000d54:	f100 80ba 	bmi.w	8000ecc <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d58:	69a0      	ldr	r0, [r4, #24]
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	f040 811b 	bne.w	8000f96 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000d60:	2000      	movs	r0, #0
 8000d62:	e02b      	b.n	8000dbc <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d64:	4ba4      	ldr	r3, [pc, #656]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	f002 020c 	and.w	r2, r2, #12
 8000d6c:	2a04      	cmp	r2, #4
 8000d6e:	d007      	beq.n	8000d80 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d76:	2a08      	cmp	r2, #8
 8000d78:	d10a      	bne.n	8000d90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	0259      	lsls	r1, r3, #9
 8000d7e:	d507      	bpl.n	8000d90 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d80:	4b9d      	ldr	r3, [pc, #628]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	039a      	lsls	r2, r3, #14
 8000d86:	d5dc      	bpl.n	8000d42 <HAL_RCC_OscConfig+0x12>
 8000d88:	6863      	ldr	r3, [r4, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1d9      	bne.n	8000d42 <HAL_RCC_OscConfig+0x12>
 8000d8e:	e7d3      	b.n	8000d38 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d90:	6863      	ldr	r3, [r4, #4]
 8000d92:	4d99      	ldr	r5, [pc, #612]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
 8000d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d98:	d113      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x92>
 8000d9a:	682b      	ldr	r3, [r5, #0]
 8000d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000da2:	f7ff fbf5 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da6:	4d94      	ldr	r5, [pc, #592]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000da8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000daa:	682b      	ldr	r3, [r5, #0]
 8000dac:	039b      	lsls	r3, r3, #14
 8000dae:	d4c8      	bmi.n	8000d42 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000db0:	f7ff fbee 	bl	8000590 <HAL_GetTick>
 8000db4:	1b80      	subs	r0, r0, r6
 8000db6:	2864      	cmp	r0, #100	; 0x64
 8000db8:	d9f7      	bls.n	8000daa <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000dba:	2003      	movs	r0, #3
}
 8000dbc:	b002      	add	sp, #8
 8000dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dc6:	d104      	bne.n	8000dd2 <HAL_RCC_OscConfig+0xa2>
 8000dc8:	682b      	ldr	r3, [r5, #0]
 8000dca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dce:	602b      	str	r3, [r5, #0]
 8000dd0:	e7e3      	b.n	8000d9a <HAL_RCC_OscConfig+0x6a>
 8000dd2:	682a      	ldr	r2, [r5, #0]
 8000dd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000dd8:	602a      	str	r2, [r5, #0]
 8000dda:	682a      	ldr	r2, [r5, #0]
 8000ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000de0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1dd      	bne.n	8000da2 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000de6:	f7ff fbd3 	bl	8000590 <HAL_GetTick>
 8000dea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	039f      	lsls	r7, r3, #14
 8000df0:	d5a7      	bpl.n	8000d42 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df2:	f7ff fbcd 	bl	8000590 <HAL_GetTick>
 8000df6:	1b80      	subs	r0, r0, r6
 8000df8:	2864      	cmp	r0, #100	; 0x64
 8000dfa:	d9f7      	bls.n	8000dec <HAL_RCC_OscConfig+0xbc>
 8000dfc:	e7dd      	b.n	8000dba <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dfe:	4b7e      	ldr	r3, [pc, #504]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	f012 0f0c 	tst.w	r2, #12
 8000e06:	d007      	beq.n	8000e18 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e0e:	2a08      	cmp	r2, #8
 8000e10:	d111      	bne.n	8000e36 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	025e      	lsls	r6, r3, #9
 8000e16:	d40e      	bmi.n	8000e36 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e18:	4b77      	ldr	r3, [pc, #476]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	0795      	lsls	r5, r2, #30
 8000e1e:	d502      	bpl.n	8000e26 <HAL_RCC_OscConfig+0xf6>
 8000e20:	68e2      	ldr	r2, [r4, #12]
 8000e22:	2a01      	cmp	r2, #1
 8000e24:	d188      	bne.n	8000d38 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	6921      	ldr	r1, [r4, #16]
 8000e2a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e2e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000e32:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e34:	e788      	b.n	8000d48 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e36:	68e2      	ldr	r2, [r4, #12]
 8000e38:	4b70      	ldr	r3, [pc, #448]	; (8000ffc <HAL_RCC_OscConfig+0x2cc>)
 8000e3a:	b1b2      	cbz	r2, 8000e6a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e40:	f7ff fba6 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e44:	4d6c      	ldr	r5, [pc, #432]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000e46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	0798      	lsls	r0, r3, #30
 8000e4c:	d507      	bpl.n	8000e5e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4e:	682b      	ldr	r3, [r5, #0]
 8000e50:	6922      	ldr	r2, [r4, #16]
 8000e52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e56:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e5a:	602b      	str	r3, [r5, #0]
 8000e5c:	e774      	b.n	8000d48 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fb97 	bl	8000590 <HAL_GetTick>
 8000e62:	1b80      	subs	r0, r0, r6
 8000e64:	2802      	cmp	r0, #2
 8000e66:	d9ef      	bls.n	8000e48 <HAL_RCC_OscConfig+0x118>
 8000e68:	e7a7      	b.n	8000dba <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000e6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fb90 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e70:	4d61      	ldr	r5, [pc, #388]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000e72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	0799      	lsls	r1, r3, #30
 8000e78:	f57f af66 	bpl.w	8000d48 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fb88 	bl	8000590 <HAL_GetTick>
 8000e80:	1b80      	subs	r0, r0, r6
 8000e82:	2802      	cmp	r0, #2
 8000e84:	d9f6      	bls.n	8000e74 <HAL_RCC_OscConfig+0x144>
 8000e86:	e798      	b.n	8000dba <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e88:	6962      	ldr	r2, [r4, #20]
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	; (8001000 <HAL_RCC_OscConfig+0x2d0>)
 8000e8c:	b17a      	cbz	r2, 8000eae <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e92:	f7ff fb7d 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e96:	4d58      	ldr	r5, [pc, #352]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000e98:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e9c:	079f      	lsls	r7, r3, #30
 8000e9e:	f53f af57 	bmi.w	8000d50 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ea2:	f7ff fb75 	bl	8000590 <HAL_GetTick>
 8000ea6:	1b80      	subs	r0, r0, r6
 8000ea8:	2802      	cmp	r0, #2
 8000eaa:	d9f6      	bls.n	8000e9a <HAL_RCC_OscConfig+0x16a>
 8000eac:	e785      	b.n	8000dba <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000eae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fb6e 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb4:	4d50      	ldr	r5, [pc, #320]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000eb6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000eba:	0798      	lsls	r0, r3, #30
 8000ebc:	f57f af48 	bpl.w	8000d50 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ec0:	f7ff fb66 	bl	8000590 <HAL_GetTick>
 8000ec4:	1b80      	subs	r0, r0, r6
 8000ec6:	2802      	cmp	r0, #2
 8000ec8:	d9f6      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x188>
 8000eca:	e776      	b.n	8000dba <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ecc:	4b4a      	ldr	r3, [pc, #296]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
 8000ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ed4:	d128      	bne.n	8000f28 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	9201      	str	r2, [sp, #4]
 8000ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ede:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000eea:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eec:	4d45      	ldr	r5, [pc, #276]	; (8001004 <HAL_RCC_OscConfig+0x2d4>)
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	05d9      	lsls	r1, r3, #23
 8000ef2:	d51b      	bpl.n	8000f2c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef4:	68a3      	ldr	r3, [r4, #8]
 8000ef6:	4d40      	ldr	r5, [pc, #256]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d127      	bne.n	8000f4c <HAL_RCC_OscConfig+0x21c>
 8000efc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f04:	f7ff fb44 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	4d3b      	ldr	r5, [pc, #236]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000f0a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f12:	079b      	lsls	r3, r3, #30
 8000f14:	d539      	bpl.n	8000f8a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	f43f af1e 	beq.w	8000d58 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f1c:	4a36      	ldr	r2, [pc, #216]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
 8000f1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	e717      	b.n	8000d58 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000f28:	2600      	movs	r6, #0
 8000f2a:	e7df      	b.n	8000eec <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f2c:	682b      	ldr	r3, [r5, #0]
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000f34:	f7ff fb2c 	bl	8000590 <HAL_GetTick>
 8000f38:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3a:	682b      	ldr	r3, [r5, #0]
 8000f3c:	05da      	lsls	r2, r3, #23
 8000f3e:	d4d9      	bmi.n	8000ef4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f40:	f7ff fb26 	bl	8000590 <HAL_GetTick>
 8000f44:	1bc0      	subs	r0, r0, r7
 8000f46:	2802      	cmp	r0, #2
 8000f48:	d9f7      	bls.n	8000f3a <HAL_RCC_OscConfig+0x20a>
 8000f4a:	e736      	b.n	8000dba <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d104      	bne.n	8000f5a <HAL_RCC_OscConfig+0x22a>
 8000f50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	672b      	str	r3, [r5, #112]	; 0x70
 8000f58:	e7d0      	b.n	8000efc <HAL_RCC_OscConfig+0x1cc>
 8000f5a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f5c:	f022 0201 	bic.w	r2, r2, #1
 8000f60:	672a      	str	r2, [r5, #112]	; 0x70
 8000f62:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f64:	f022 0204 	bic.w	r2, r2, #4
 8000f68:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1ca      	bne.n	8000f04 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000f6e:	f7ff fb0f 	bl	8000590 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f72:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f76:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f7a:	0798      	lsls	r0, r3, #30
 8000f7c:	d5cb      	bpl.n	8000f16 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f7e:	f7ff fb07 	bl	8000590 <HAL_GetTick>
 8000f82:	1bc0      	subs	r0, r0, r7
 8000f84:	4540      	cmp	r0, r8
 8000f86:	d9f7      	bls.n	8000f78 <HAL_RCC_OscConfig+0x248>
 8000f88:	e717      	b.n	8000dba <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f8a:	f7ff fb01 	bl	8000590 <HAL_GetTick>
 8000f8e:	1bc0      	subs	r0, r0, r7
 8000f90:	4540      	cmp	r0, r8
 8000f92:	d9bd      	bls.n	8000f10 <HAL_RCC_OscConfig+0x1e0>
 8000f94:	e711      	b.n	8000dba <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f96:	4d18      	ldr	r5, [pc, #96]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
 8000f98:	68ab      	ldr	r3, [r5, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d047      	beq.n	8001032 <HAL_RCC_OscConfig+0x302>
 8000fa2:	4e19      	ldr	r6, [pc, #100]	; (8001008 <HAL_RCC_OscConfig+0x2d8>)
 8000fa4:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fa6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000fa8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000faa:	d135      	bne.n	8001018 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000fac:	f7ff faf0 	bl	8000590 <HAL_GetTick>
 8000fb0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fb2:	682b      	ldr	r3, [r5, #0]
 8000fb4:	0199      	lsls	r1, r3, #6
 8000fb6:	d429      	bmi.n	800100c <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fb8:	6a22      	ldr	r2, [r4, #32]
 8000fba:	69e3      	ldr	r3, [r4, #28]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fc0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000fc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000fc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000fca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	; (8000ff8 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fce:	0852      	lsrs	r2, r2, #1
 8000fd0:	3a01      	subs	r2, #1
 8000fd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fd6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fd8:	2301      	movs	r3, #1
 8000fda:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fad8 	bl	8000590 <HAL_GetTick>
 8000fe0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	019a      	lsls	r2, r3, #6
 8000fe6:	f53f aebb 	bmi.w	8000d60 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fea:	f7ff fad1 	bl	8000590 <HAL_GetTick>
 8000fee:	1b40      	subs	r0, r0, r5
 8000ff0:	2802      	cmp	r0, #2
 8000ff2:	d9f6      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x2b2>
 8000ff4:	e6e1      	b.n	8000dba <HAL_RCC_OscConfig+0x8a>
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	42470000 	.word	0x42470000
 8001000:	42470e80 	.word	0x42470e80
 8001004:	40007000 	.word	0x40007000
 8001008:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800100c:	f7ff fac0 	bl	8000590 <HAL_GetTick>
 8001010:	1bc0      	subs	r0, r0, r7
 8001012:	2802      	cmp	r0, #2
 8001014:	d9cd      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x282>
 8001016:	e6d0      	b.n	8000dba <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001018:	f7ff faba 	bl	8000590 <HAL_GetTick>
 800101c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800101e:	682b      	ldr	r3, [r5, #0]
 8001020:	019b      	lsls	r3, r3, #6
 8001022:	f57f ae9d 	bpl.w	8000d60 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001026:	f7ff fab3 	bl	8000590 <HAL_GetTick>
 800102a:	1b00      	subs	r0, r0, r4
 800102c:	2802      	cmp	r0, #2
 800102e:	d9f6      	bls.n	800101e <HAL_RCC_OscConfig+0x2ee>
 8001030:	e6c3      	b.n	8000dba <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001032:	2801      	cmp	r0, #1
 8001034:	f43f aec2 	beq.w	8000dbc <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8001038:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800103a:	69e3      	ldr	r3, [r4, #28]
 800103c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001040:	429a      	cmp	r2, r3
 8001042:	f47f ae79 	bne.w	8000d38 <HAL_RCC_OscConfig+0x8>
 8001046:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001048:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104c:	4293      	cmp	r3, r2
 800104e:	f47f ae73 	bne.w	8000d38 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001052:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001058:	4003      	ands	r3, r0
 800105a:	4293      	cmp	r3, r2
 800105c:	f47f ae6c 	bne.w	8000d38 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001060:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001062:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001066:	4293      	cmp	r3, r2
 8001068:	f47f ae66 	bne.w	8000d38 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800106c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800106e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001072:	1ac0      	subs	r0, r0, r3
 8001074:	bf18      	it	ne
 8001076:	2001      	movne	r0, #1
 8001078:	e6a0      	b.n	8000dbc <HAL_RCC_OscConfig+0x8c>
 800107a:	bf00      	nop

0800107c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800107c:	4913      	ldr	r1, [pc, #76]	; (80010cc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800107e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001080:	688b      	ldr	r3, [r1, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b04      	cmp	r3, #4
 8001088:	d003      	beq.n	8001092 <HAL_RCC_GetSysClockFreq+0x16>
 800108a:	2b08      	cmp	r3, #8
 800108c:	d003      	beq.n	8001096 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800108e:	4810      	ldr	r0, [pc, #64]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001090:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <HAL_RCC_GetSysClockFreq+0x58>)
 8001094:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001096:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001098:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800109a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800109c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010a0:	bf14      	ite	ne
 80010a2:	480c      	ldrne	r0, [pc, #48]	; (80010d4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010a4:	480a      	ldreq	r0, [pc, #40]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010a6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80010aa:	bf18      	it	ne
 80010ac:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010ae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010b2:	fba1 0100 	umull	r0, r1, r1, r0
 80010b6:	f7ff f899 	bl	80001ec <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_RCC_GetSysClockFreq+0x50>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80010c2:	3301      	adds	r3, #1
 80010c4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80010c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80010ca:	bd08      	pop	{r3, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	00f42400 	.word	0x00f42400
 80010d4:	007a1200 	.word	0x007a1200

080010d8 <HAL_RCC_ClockConfig>:
{
 80010d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010dc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80010de:	4604      	mov	r4, r0
 80010e0:	b910      	cbnz	r0, 80010e8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80010e2:	2001      	movs	r0, #1
 80010e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010e8:	4b44      	ldr	r3, [pc, #272]	; (80011fc <HAL_RCC_ClockConfig+0x124>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	f002 020f 	and.w	r2, r2, #15
 80010f0:	428a      	cmp	r2, r1
 80010f2:	d329      	bcc.n	8001148 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f4:	6821      	ldr	r1, [r4, #0]
 80010f6:	078f      	lsls	r7, r1, #30
 80010f8:	d42e      	bmi.n	8001158 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010fa:	07c8      	lsls	r0, r1, #31
 80010fc:	d441      	bmi.n	8001182 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010fe:	4b3f      	ldr	r3, [pc, #252]	; (80011fc <HAL_RCC_ClockConfig+0x124>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	f002 020f 	and.w	r2, r2, #15
 8001106:	4295      	cmp	r5, r2
 8001108:	d367      	bcc.n	80011da <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110a:	6822      	ldr	r2, [r4, #0]
 800110c:	0751      	lsls	r1, r2, #29
 800110e:	d46d      	bmi.n	80011ec <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001110:	0713      	lsls	r3, r2, #28
 8001112:	d507      	bpl.n	8001124 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001114:	4a3a      	ldr	r2, [pc, #232]	; (8001200 <HAL_RCC_ClockConfig+0x128>)
 8001116:	6921      	ldr	r1, [r4, #16]
 8001118:	6893      	ldr	r3, [r2, #8]
 800111a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800111e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001122:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001124:	f7ff ffaa 	bl	800107c <HAL_RCC_GetSysClockFreq>
 8001128:	4b35      	ldr	r3, [pc, #212]	; (8001200 <HAL_RCC_ClockConfig+0x128>)
 800112a:	4a36      	ldr	r2, [pc, #216]	; (8001204 <HAL_RCC_ClockConfig+0x12c>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001132:	5cd3      	ldrb	r3, [r2, r3]
 8001134:	40d8      	lsrs	r0, r3
 8001136:	4b34      	ldr	r3, [pc, #208]	; (8001208 <HAL_RCC_ClockConfig+0x130>)
 8001138:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <HAL_RCC_ClockConfig+0x134>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f7ff f9dd 	bl	80004fc <HAL_InitTick>
  return HAL_OK;
 8001142:	2000      	movs	r0, #0
 8001144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001148:	b2ca      	uxtb	r2, r1
 800114a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	4299      	cmp	r1, r3
 8001154:	d1c5      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xa>
 8001156:	e7cd      	b.n	80010f4 <HAL_RCC_ClockConfig+0x1c>
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800115e:	bf1e      	ittt	ne
 8001160:	689a      	ldrne	r2, [r3, #8]
 8001162:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001166:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001168:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800116a:	bf42      	ittt	mi
 800116c:	689a      	ldrmi	r2, [r3, #8]
 800116e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001172:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	68a0      	ldr	r0, [r4, #8]
 8001178:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800117c:	4302      	orrs	r2, r0
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	e7bb      	b.n	80010fa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001182:	6862      	ldr	r2, [r4, #4]
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <HAL_RCC_ClockConfig+0x128>)
 8001186:	2a01      	cmp	r2, #1
 8001188:	d11d      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001190:	d0a7      	beq.n	80010e2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001192:	4e1b      	ldr	r6, [pc, #108]	; (8001200 <HAL_RCC_ClockConfig+0x128>)
 8001194:	68b3      	ldr	r3, [r6, #8]
 8001196:	f023 0303 	bic.w	r3, r3, #3
 800119a:	4313      	orrs	r3, r2
 800119c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800119e:	f7ff f9f7 	bl	8000590 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80011a6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a8:	68b3      	ldr	r3, [r6, #8]
 80011aa:	6862      	ldr	r2, [r4, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011b4:	d0a3      	beq.n	80010fe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b6:	f7ff f9eb 	bl	8000590 <HAL_GetTick>
 80011ba:	1bc0      	subs	r0, r0, r7
 80011bc:	4540      	cmp	r0, r8
 80011be:	d9f3      	bls.n	80011a8 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80011c0:	2003      	movs	r0, #3
}
 80011c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011c6:	1e91      	subs	r1, r2, #2
 80011c8:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ca:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011cc:	d802      	bhi.n	80011d4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011d2:	e7dd      	b.n	8001190 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d4:	f013 0f02 	tst.w	r3, #2
 80011d8:	e7da      	b.n	8001190 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	b2ea      	uxtb	r2, r5
 80011dc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 030f 	and.w	r3, r3, #15
 80011e4:	429d      	cmp	r5, r3
 80011e6:	f47f af7c 	bne.w	80010e2 <HAL_RCC_ClockConfig+0xa>
 80011ea:	e78e      	b.n	800110a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ec:	4904      	ldr	r1, [pc, #16]	; (8001200 <HAL_RCC_ClockConfig+0x128>)
 80011ee:	68e0      	ldr	r0, [r4, #12]
 80011f0:	688b      	ldr	r3, [r1, #8]
 80011f2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80011f6:	4303      	orrs	r3, r0
 80011f8:	608b      	str	r3, [r1, #8]
 80011fa:	e789      	b.n	8001110 <HAL_RCC_ClockConfig+0x38>
 80011fc:	40023c00 	.word	0x40023c00
 8001200:	40023800 	.word	0x40023800
 8001204:	080019c4 	.word	0x080019c4
 8001208:	20000008 	.word	0x20000008
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001210:	6803      	ldr	r3, [r0, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	f042 0201 	orr.w	r2, r2, #1
 8001218:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001220:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001222:	bf1e      	ittt	ne
 8001224:	681a      	ldrne	r2, [r3, #0]
 8001226:	f042 0201 	orrne.w	r2, r2, #1
 800122a:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800122c:	2000      	movs	r0, #0
 800122e:	4770      	bx	lr

08001230 <HAL_TIM_OC_DelayElapsedCallback>:
 8001230:	4770      	bx	lr

08001232 <HAL_TIM_IC_CaptureCallback>:
 8001232:	4770      	bx	lr

08001234 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001234:	4770      	bx	lr

08001236 <HAL_TIM_TriggerCallback>:
 8001236:	4770      	bx	lr

08001238 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001238:	6803      	ldr	r3, [r0, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	0791      	lsls	r1, r2, #30
{
 800123e:	b510      	push	{r4, lr}
 8001240:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001242:	d50e      	bpl.n	8001262 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	0792      	lsls	r2, r2, #30
 8001248:	d50b      	bpl.n	8001262 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800124a:	f06f 0202 	mvn.w	r2, #2
 800124e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001250:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001252:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001254:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001256:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001258:	d077      	beq.n	800134a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800125a:	f7ff ffea 	bl	8001232 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800125e:	2300      	movs	r3, #0
 8001260:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	691a      	ldr	r2, [r3, #16]
 8001266:	0750      	lsls	r0, r2, #29
 8001268:	d510      	bpl.n	800128c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	0751      	lsls	r1, r2, #29
 800126e:	d50d      	bpl.n	800128c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001270:	f06f 0204 	mvn.w	r2, #4
 8001274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001276:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001278:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800127a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800127e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001280:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001282:	d068      	beq.n	8001356 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001284:	f7ff ffd5 	bl	8001232 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001288:	2300      	movs	r3, #0
 800128a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	0712      	lsls	r2, r2, #28
 8001292:	d50f      	bpl.n	80012b4 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	0710      	lsls	r0, r2, #28
 8001298:	d50c      	bpl.n	80012b4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800129a:	f06f 0208 	mvn.w	r2, #8
 800129e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012a0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012a2:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012a4:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012a6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012a8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012aa:	d05a      	beq.n	8001362 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80012ac:	f7ff ffc1 	bl	8001232 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012b0:	2300      	movs	r3, #0
 80012b2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	06d2      	lsls	r2, r2, #27
 80012ba:	d510      	bpl.n	80012de <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	06d0      	lsls	r0, r2, #27
 80012c0:	d50d      	bpl.n	80012de <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80012c2:	f06f 0210 	mvn.w	r2, #16
 80012c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012c8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012ca:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012cc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012d0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012d2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012d4:	d04b      	beq.n	800136e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80012d6:	f7ff ffac 	bl	8001232 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012da:	2300      	movs	r3, #0
 80012dc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	07d1      	lsls	r1, r2, #31
 80012e4:	d508      	bpl.n	80012f8 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	07d2      	lsls	r2, r2, #31
 80012ea:	d505      	bpl.n	80012f8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012ec:	f06f 0201 	mvn.w	r2, #1
 80012f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80012f2:	4620      	mov	r0, r4
 80012f4:	f000 f906 	bl	8001504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	0610      	lsls	r0, r2, #24
 80012fe:	d508      	bpl.n	8001312 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	0611      	lsls	r1, r2, #24
 8001304:	d505      	bpl.n	8001312 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001306:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800130a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800130c:	4620      	mov	r0, r4
 800130e:	f000 f8f8 	bl	8001502 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	0652      	lsls	r2, r2, #25
 8001318:	d508      	bpl.n	800132c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	0650      	lsls	r0, r2, #25
 800131e:	d505      	bpl.n	800132c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001320:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001326:	4620      	mov	r0, r4
 8001328:	f7ff ff85 	bl	8001236 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	0691      	lsls	r1, r2, #26
 8001332:	d522      	bpl.n	800137a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	0692      	lsls	r2, r2, #26
 8001338:	d51f      	bpl.n	800137a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800133a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800133e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001340:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001346:	f000 b8db 	b.w	8001500 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800134a:	f7ff ff71 	bl	8001230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800134e:	4620      	mov	r0, r4
 8001350:	f7ff ff70 	bl	8001234 <HAL_TIM_PWM_PulseFinishedCallback>
 8001354:	e783      	b.n	800125e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001356:	f7ff ff6b 	bl	8001230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800135a:	4620      	mov	r0, r4
 800135c:	f7ff ff6a 	bl	8001234 <HAL_TIM_PWM_PulseFinishedCallback>
 8001360:	e792      	b.n	8001288 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001362:	f7ff ff65 	bl	8001230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001366:	4620      	mov	r0, r4
 8001368:	f7ff ff64 	bl	8001234 <HAL_TIM_PWM_PulseFinishedCallback>
 800136c:	e7a0      	b.n	80012b0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800136e:	f7ff ff5f 	bl	8001230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001372:	4620      	mov	r0, r4
 8001374:	f7ff ff5e 	bl	8001234 <HAL_TIM_PWM_PulseFinishedCallback>
 8001378:	e7af      	b.n	80012da <HAL_TIM_IRQHandler+0xa2>
 800137a:	bd10      	pop	{r4, pc}

0800137c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800137c:	4a30      	ldr	r2, [pc, #192]	; (8001440 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800137e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001380:	4290      	cmp	r0, r2
 8001382:	d012      	beq.n	80013aa <TIM_Base_SetConfig+0x2e>
 8001384:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001388:	d00f      	beq.n	80013aa <TIM_Base_SetConfig+0x2e>
 800138a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800138e:	4290      	cmp	r0, r2
 8001390:	d00b      	beq.n	80013aa <TIM_Base_SetConfig+0x2e>
 8001392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001396:	4290      	cmp	r0, r2
 8001398:	d007      	beq.n	80013aa <TIM_Base_SetConfig+0x2e>
 800139a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800139e:	4290      	cmp	r0, r2
 80013a0:	d003      	beq.n	80013aa <TIM_Base_SetConfig+0x2e>
 80013a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80013a6:	4290      	cmp	r0, r2
 80013a8:	d119      	bne.n	80013de <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80013aa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80013b0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013b2:	4a23      	ldr	r2, [pc, #140]	; (8001440 <TIM_Base_SetConfig+0xc4>)
 80013b4:	4290      	cmp	r0, r2
 80013b6:	d029      	beq.n	800140c <TIM_Base_SetConfig+0x90>
 80013b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013bc:	d026      	beq.n	800140c <TIM_Base_SetConfig+0x90>
 80013be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80013c2:	4290      	cmp	r0, r2
 80013c4:	d022      	beq.n	800140c <TIM_Base_SetConfig+0x90>
 80013c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ca:	4290      	cmp	r0, r2
 80013cc:	d01e      	beq.n	800140c <TIM_Base_SetConfig+0x90>
 80013ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013d2:	4290      	cmp	r0, r2
 80013d4:	d01a      	beq.n	800140c <TIM_Base_SetConfig+0x90>
 80013d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80013da:	4290      	cmp	r0, r2
 80013dc:	d016      	beq.n	800140c <TIM_Base_SetConfig+0x90>
 80013de:	4a19      	ldr	r2, [pc, #100]	; (8001444 <TIM_Base_SetConfig+0xc8>)
 80013e0:	4290      	cmp	r0, r2
 80013e2:	d013      	beq.n	800140c <TIM_Base_SetConfig+0x90>
 80013e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013e8:	4290      	cmp	r0, r2
 80013ea:	d00f      	beq.n	800140c <TIM_Base_SetConfig+0x90>
 80013ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013f0:	4290      	cmp	r0, r2
 80013f2:	d00b      	beq.n	800140c <TIM_Base_SetConfig+0x90>
 80013f4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80013f8:	4290      	cmp	r0, r2
 80013fa:	d007      	beq.n	800140c <TIM_Base_SetConfig+0x90>
 80013fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001400:	4290      	cmp	r0, r2
 8001402:	d003      	beq.n	800140c <TIM_Base_SetConfig+0x90>
 8001404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001408:	4290      	cmp	r0, r2
 800140a:	d103      	bne.n	8001414 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800140c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800140e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001412:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001414:	694a      	ldr	r2, [r1, #20]
 8001416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800141a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800141c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800141e:	688b      	ldr	r3, [r1, #8]
 8001420:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001422:	680b      	ldr	r3, [r1, #0]
 8001424:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <TIM_Base_SetConfig+0xc4>)
 8001428:	4298      	cmp	r0, r3
 800142a:	d003      	beq.n	8001434 <TIM_Base_SetConfig+0xb8>
 800142c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001430:	4298      	cmp	r0, r3
 8001432:	d101      	bne.n	8001438 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001434:	690b      	ldr	r3, [r1, #16]
 8001436:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001438:	2301      	movs	r3, #1
 800143a:	6143      	str	r3, [r0, #20]
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40010000 	.word	0x40010000
 8001444:	40014000 	.word	0x40014000

08001448 <HAL_TIM_Base_Init>:
{
 8001448:	b510      	push	{r4, lr}
  if (htim == NULL)
 800144a:	4604      	mov	r4, r0
 800144c:	b1a0      	cbz	r0, 8001478 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800144e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001452:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001456:	b91b      	cbnz	r3, 8001460 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001458:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800145c:	f000 f9da 	bl	8001814 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001460:	2302      	movs	r3, #2
 8001462:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001466:	6820      	ldr	r0, [r4, #0]
 8001468:	1d21      	adds	r1, r4, #4
 800146a:	f7ff ff87 	bl	800137c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800146e:	2301      	movs	r3, #1
 8001470:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001474:	2000      	movs	r0, #0
 8001476:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001478:	2001      	movs	r0, #1
}
 800147a:	bd10      	pop	{r4, pc}

0800147c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800147c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001480:	2b01      	cmp	r3, #1
{
 8001482:	b530      	push	{r4, r5, lr}
 8001484:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001488:	d035      	beq.n	80014f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800148a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800148e:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001490:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001492:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001494:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001498:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800149a:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 800149c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80014a0:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80014a2:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014a4:	4c15      	ldr	r4, [pc, #84]	; (80014fc <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 80014a6:	42a3      	cmp	r3, r4
 80014a8:	d01a      	beq.n	80014e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ae:	d017      	beq.n	80014e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014b0:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80014b4:	42a3      	cmp	r3, r4
 80014b6:	d013      	beq.n	80014e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014bc:	42a3      	cmp	r3, r4
 80014be:	d00f      	beq.n	80014e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014c4:	42a3      	cmp	r3, r4
 80014c6:	d00b      	beq.n	80014e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014c8:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80014cc:	42a3      	cmp	r3, r4
 80014ce:	d007      	beq.n	80014e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014d0:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80014d4:	42a3      	cmp	r3, r4
 80014d6:	d003      	beq.n	80014e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014d8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80014dc:	42a3      	cmp	r3, r4
 80014de:	d104      	bne.n	80014ea <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014e0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80014e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014e6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80014e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014f0:	2300      	movs	r3, #0
 80014f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80014f6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80014f8:	bd30      	pop	{r4, r5, pc}
 80014fa:	bf00      	nop
 80014fc:	40010000 	.word	0x40010000

08001500 <HAL_TIMEx_CommutCallback>:
 8001500:	4770      	bx	lr

08001502 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001502:	4770      	bx	lr

08001504 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM6_Init(void);

/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001504:	b538      	push	{r3, r4, r5, lr}

	HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);


	HAL_ADC_Start(&hadc1);
 8001506:	4c13      	ldr	r4, [pc, #76]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x50>)
	HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x54>)
	//HAL_ADC_Start(&hadc2);

	HAL_ADC_PollForConversion(&hadc1,1);
	ADC_DATA1=HAL_ADC_GetValue(&hadc1);
 800150a:	4d14      	ldr	r5, [pc, #80]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x58>)
	HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);
 800150c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001510:	f7ff fbca 	bl	8000ca8 <HAL_GPIO_TogglePin>
	HAL_ADC_Start(&hadc1);
 8001514:	4620      	mov	r0, r4
 8001516:	f7ff f8e7 	bl	80006e8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1);
 800151a:	2101      	movs	r1, #1
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff f977 	bl	8000810 <HAL_ADC_PollForConversion>
	ADC_DATA1=HAL_ADC_GetValue(&hadc1);
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff f9c4 	bl	80008b0 <HAL_ADC_GetValue>
 8001528:	8028      	strh	r0, [r5, #0]

	/*HAL_ADC_PollForConversion(&hadc2,1);
	ADC_DATA2=HAL_ADC_GetValue(&hadc2);*/


	HAL_ADC_Stop(&hadc1);
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff f952 	bl	80007d4 <HAL_ADC_Stop>
	/*HAL_ADC_Stop(&hadc2);*/

	channel_voltage=(ADC_DATA1*(float)2.92)/4095;
 8001530:	882b      	ldrh	r3, [r5, #0]
 8001532:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001560 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8001536:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001564 <HAL_TIM_PeriodElapsedCallback+0x60>
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001548:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800154c:	ed83 7a00 	vstr	s14, [r3]
 8001550:	bd38      	pop	{r3, r4, r5, pc}
 8001552:	bf00      	nop
 8001554:	20000080 	.word	0x20000080
 8001558:	40021800 	.word	0x40021800
 800155c:	20000030 	.word	0x20000030
 8001560:	403ae148 	.word	0x403ae148
 8001564:	457ff000 	.word	0x457ff000
 8001568:	20000028 	.word	0x20000028

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b530      	push	{r4, r5, lr}
 800156e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001570:	2230      	movs	r2, #48	; 0x30
 8001572:	2100      	movs	r1, #0
 8001574:	a808      	add	r0, sp, #32
 8001576:	f000 fa11 	bl	800199c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157a:	2100      	movs	r1, #0
 800157c:	2214      	movs	r2, #20
 800157e:	a803      	add	r0, sp, #12
 8001580:	f000 fa0c 	bl	800199c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	2400      	movs	r4, #0
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <SystemClock_Config+0x90>)
 8001588:	9401      	str	r4, [sp, #4]
 800158a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <SystemClock_Config+0x94>)
 800159e:	9402      	str	r4, [sp, #8]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b2:	2301      	movs	r3, #1
 80015b4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ba:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015c0:	22b4      	movs	r2, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015c8:	2304      	movs	r3, #4
 80015ca:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015cc:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015ce:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d0:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d2:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d4:	f7ff fbac 	bl	8000d30 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015d8:	f7ff fb6e 	bl	8000cb8 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015dc:	230f      	movs	r3, #15
 80015de:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015e4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015e6:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015ec:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ee:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f0:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015f2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015f4:	f7ff fd70 	bl	80010d8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80015f8:	b015      	add	sp, #84	; 0x54
 80015fa:	bd30      	pop	{r4, r5, pc}
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000

08001604 <main>:
{
 8001604:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001606:	4e43      	ldr	r6, [pc, #268]	; (8001714 <main+0x110>)
  hadc1.Instance = ADC1;
 8001608:	4d43      	ldr	r5, [pc, #268]	; (8001718 <main+0x114>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800160a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001738 <main+0x134>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160e:	2400      	movs	r4, #0
  HAL_Init();
 8001610:	f7fe ff98 	bl	8000544 <HAL_Init>
  SystemClock_Config();
 8001614:	f7ff ffaa 	bl	800156c <SystemClock_Config>
  	  SystemInit();
 8001618:	f000 f92a 	bl	8001870 <SystemInit>
  	SystemCoreClockUpdate();
 800161c:	f000 f936 	bl	800188c <SystemCoreClockUpdate>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001620:	9400      	str	r4, [sp, #0]
 8001622:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	6333      	str	r3, [r6, #48]	; 0x30
 800162a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800162c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001634:	9401      	str	r4, [sp, #4]
 8001636:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6333      	str	r3, [r6, #48]	; 0x30
 800163e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001640:	f003 0304 	and.w	r3, r3, #4
  ADC_ChannelConfTypeDef sConfig = {0};
 8001644:	2210      	movs	r2, #16
 8001646:	4621      	mov	r1, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001648:	9301      	str	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800164a:	a802      	add	r0, sp, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164c:	9b01      	ldr	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800164e:	f000 f9a5 	bl	800199c <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001652:	4b32      	ldr	r3, [pc, #200]	; (800171c <main+0x118>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001654:	60ac      	str	r4, [r5, #8]
  hadc1.Init.NbrOfConversion = 1;
 8001656:	2701      	movs	r7, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001658:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800165c:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800165e:	e885 0208 	stmia.w	r5, {r3, r9}
  hadc1.Init.ScanConvMode = DISABLE;
 8001662:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001664:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001666:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800166a:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166c:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001670:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001672:	61ef      	str	r7, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001674:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001678:	616f      	str	r7, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800167a:	f7fe ff8f 	bl	800059c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_10;
 800167e:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001680:	a902      	add	r1, sp, #8
 8001682:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_10;
 8001684:	9302      	str	r3, [sp, #8]
  hadc2.Instance = ADC2;
 8001686:	4d26      	ldr	r5, [pc, #152]	; (8001720 <main+0x11c>)
  sConfig.Rank = 1;
 8001688:	9703      	str	r7, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800168a:	9404      	str	r4, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168c:	f7ff f914 	bl	80008b8 <HAL_ADC_ConfigChannel>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001690:	2210      	movs	r2, #16
 8001692:	4621      	mov	r1, r4
 8001694:	a802      	add	r0, sp, #8
 8001696:	f000 f981 	bl	800199c <memset>
  hadc2.Instance = ADC2;
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <main+0x120>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800169c:	60ac      	str	r4, [r5, #8]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800169e:	4628      	mov	r0, r5
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016a0:	e885 0208 	stmia.w	r5, {r3, r9}
  hadc2.Init.ScanConvMode = DISABLE;
 80016a4:	612c      	str	r4, [r5, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016a6:	762c      	strb	r4, [r5, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016a8:	f885 4020 	strb.w	r4, [r5, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ac:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ae:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016b2:	60ec      	str	r4, [r5, #12]
  hadc2.Init.NbrOfConversion = 1;
 80016b4:	61ef      	str	r7, [r5, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80016b6:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ba:	616f      	str	r7, [r5, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016bc:	f7fe ff6e 	bl	800059c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_11;
 80016c0:	230b      	movs	r3, #11
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016c2:	a902      	add	r1, sp, #8
 80016c4:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_11;
 80016c6:	9302      	str	r3, [sp, #8]
  htim6.Instance = TIM6;
 80016c8:	4d17      	ldr	r5, [pc, #92]	; (8001728 <main+0x124>)
  sConfig.Rank = 1;
 80016ca:	9703      	str	r7, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016cc:	9404      	str	r4, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016ce:	f7ff f8f3 	bl	80008b8 <HAL_ADC_ConfigChannel>
  htim6.Init.Prescaler = 90000;
 80016d2:	4a16      	ldr	r2, [pc, #88]	; (800172c <main+0x128>)
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <main+0x12c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d6:	9402      	str	r4, [sp, #8]
  htim6.Init.Prescaler = 90000;
 80016d8:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016dc:	4628      	mov	r0, r5
  htim6.Init.Period = 4-1;
 80016de:	2303      	movs	r3, #3
 80016e0:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e2:	9403      	str	r4, [sp, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	60ac      	str	r4, [r5, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016e8:	f7ff feae 	bl	8001448 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016ec:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016ee:	a902      	add	r1, sp, #8
 80016f0:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016f2:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f4:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016f6:	f7ff fec1 	bl	800147c <HAL_TIMEx_MasterConfigSynchronization>
  SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOGEN);
 80016fa:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIOG->MODER|=GPIO_MODER_MODER14_0;
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <main+0x130>)
  SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOGEN);
 80016fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001702:	6333      	str	r3, [r6, #48]	; 0x30
  GPIOG->MODER|=GPIO_MODER_MODER14_0;
 8001704:	6813      	ldr	r3, [r2, #0]
 8001706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170a:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 800170c:	4628      	mov	r0, r5
 800170e:	f7ff fd7f 	bl	8001210 <HAL_TIM_Base_Start_IT>
 8001712:	e7fe      	b.n	8001712 <main+0x10e>
 8001714:	40023800 	.word	0x40023800
 8001718:	20000080 	.word	0x20000080
 800171c:	40012000 	.word	0x40012000
 8001720:	20000034 	.word	0x20000034
 8001724:	40012100 	.word	0x40012100
 8001728:	200000c8 	.word	0x200000c8
 800172c:	40001000 	.word	0x40001000
 8001730:	00015f90 	.word	0x00015f90
 8001734:	40021800 	.word	0x40021800
 8001738:	0f000001 	.word	0x0f000001

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_MspInit+0x34>)
 8001740:	2100      	movs	r1, #0
 8001742:	9100      	str	r1, [sp, #0]
 8001744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800174a:	645a      	str	r2, [r3, #68]	; 0x44
 800174c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800174e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001752:	9200      	str	r2, [sp, #0]
 8001754:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	9101      	str	r1, [sp, #4]
 8001758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800175a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800175e:	641a      	str	r2, [r3, #64]	; 0x40
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	b002      	add	sp, #8
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001774:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	2214      	movs	r2, #20
{
 8001778:	b08a      	sub	sp, #40	; 0x28
 800177a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	2100      	movs	r1, #0
 800177e:	eb0d 0002 	add.w	r0, sp, r2
 8001782:	f000 f90b 	bl	800199c <memset>
  if(hadc->Instance==ADC1)
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <HAL_ADC_MspInit+0x90>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d11f      	bne.n	80017ce <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <HAL_ADC_MspInit+0x94>)
 8001790:	2100      	movs	r1, #0
 8001792:	9101      	str	r1, [sp, #4]
 8001794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800179a:	645a      	str	r2, [r3, #68]	; 0x44
 800179c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800179e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80017a2:	9201      	str	r2, [sp, #4]
 80017a4:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	9102      	str	r1, [sp, #8]
 80017a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017aa:	f042 0204 	orr.w	r2, r2, #4
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	9b02      	ldr	r3, [sp, #8]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ba:	2301      	movs	r3, #1
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
    /**ADC2 GPIO Configuration    
    PC1     ------> ADC2_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017bc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c2:	4812      	ldr	r0, [pc, #72]	; (800180c <HAL_ADC_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c6:	f7ff f983 	bl	8000ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80017ca:	b00a      	add	sp, #40	; 0x28
 80017cc:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <HAL_ADC_MspInit+0x9c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d1fa      	bne.n	80017ca <HAL_ADC_MspInit+0x56>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_ADC_MspInit+0x94>)
 80017d6:	2100      	movs	r1, #0
 80017d8:	9103      	str	r1, [sp, #12]
 80017da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e0:	645a      	str	r2, [r3, #68]	; 0x44
 80017e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017e4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80017e8:	9203      	str	r2, [sp, #12]
 80017ea:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ec:	9104      	str	r1, [sp, #16]
 80017ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f0:	f042 0204 	orr.w	r2, r2, #4
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	9304      	str	r3, [sp, #16]
 80017fe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001800:	2302      	movs	r3, #2
 8001802:	e7db      	b.n	80017bc <HAL_ADC_MspInit+0x48>
 8001804:	40012000 	.word	0x40012000
 8001808:	40023800 	.word	0x40023800
 800180c:	40020800 	.word	0x40020800
 8001810:	40012100 	.word	0x40012100

08001814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001814:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM6)
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_TIM_Base_MspInit+0x38>)
 8001818:	6802      	ldr	r2, [r0, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d113      	bne.n	8001846 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800181e:	2200      	movs	r2, #0
 8001820:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8001824:	9201      	str	r2, [sp, #4]
 8001826:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001828:	f041 0110 	orr.w	r1, r1, #16
 800182c:	6419      	str	r1, [r3, #64]	; 0x40
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	9301      	str	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001836:	2036      	movs	r0, #54	; 0x36
 8001838:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 800183a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800183c:	f7ff f8f0 	bl	8000a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001840:	2036      	movs	r0, #54	; 0x36
 8001842:	f7ff f921 	bl	8000a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001846:	b003      	add	sp, #12
 8001848:	f85d fb04 	ldr.w	pc, [sp], #4
 800184c:	40001000 	.word	0x40001000

08001850 <NMI_Handler>:
 8001850:	4770      	bx	lr

08001852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler>

0800185a <SVC_Handler>:
 800185a:	4770      	bx	lr

0800185c <DebugMon_Handler>:
 800185c:	4770      	bx	lr

0800185e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001860:	f7fe be8a 	b.w	8000578 <HAL_IncTick>

08001864 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001864:	4801      	ldr	r0, [pc, #4]	; (800186c <TIM6_DAC_IRQHandler+0x8>)
 8001866:	f7ff bce7 	b.w	8001238 <HAL_TIM_IRQHandler>
 800186a:	bf00      	nop
 800186c:	200000c8 	.word	0x200000c8

08001870 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SystemInit+0x18>)
 8001872:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001876:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800187a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800187e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800188c:	4a17      	ldr	r2, [pc, #92]	; (80018ec <SystemCoreClockUpdate+0x60>)
 800188e:	4918      	ldr	r1, [pc, #96]	; (80018f0 <SystemCoreClockUpdate+0x64>)
 8001890:	6893      	ldr	r3, [r2, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8001896:	2b04      	cmp	r3, #4
{
 8001898:	b510      	push	{r4, lr}
  switch (tmp)
 800189a:	d00d      	beq.n	80018b8 <SystemCoreClockUpdate+0x2c>
 800189c:	2b08      	cmp	r3, #8
 800189e:	d00d      	beq.n	80018bc <SystemCoreClockUpdate+0x30>
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <SystemCoreClockUpdate+0x68>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 80018a2:	600b      	str	r3, [r1, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <SystemCoreClockUpdate+0x60>)
 80018a6:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <SystemCoreClockUpdate+0x6c>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018ae:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80018b0:	680b      	ldr	r3, [r1, #0]
 80018b2:	40d3      	lsrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]
 80018b6:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <SystemCoreClockUpdate+0x70>)
 80018ba:	e7f2      	b.n	80018a2 <SystemCoreClockUpdate+0x16>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80018bc:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018be:	6850      	ldr	r0, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80018c0:	6852      	ldr	r2, [r2, #4]
      if (pllsource != 0)
 80018c2:	0263      	lsls	r3, r4, #9
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80018c4:	f3c2 1288 	ubfx	r2, r2, #6, #9
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80018cc:	bf4c      	ite	mi
 80018ce:	4b0b      	ldrmi	r3, [pc, #44]	; (80018fc <SystemCoreClockUpdate+0x70>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80018d0:	4b08      	ldrpl	r3, [pc, #32]	; (80018f4 <SystemCoreClockUpdate+0x68>)
 80018d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80018d6:	4353      	muls	r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <SystemCoreClockUpdate+0x60>)
 80018da:	6852      	ldr	r2, [r2, #4]
 80018dc:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80018e0:	3201      	adds	r2, #1
 80018e2:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 80018e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80018e8:	e7db      	b.n	80018a2 <SystemCoreClockUpdate+0x16>
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	20000008 	.word	0x20000008
 80018f4:	00f42400 	.word	0x00f42400
 80018f8:	080019c4 	.word	0x080019c4
 80018fc:	007a1200 	.word	0x007a1200

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001938 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001904:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001906:	e003      	b.n	8001910 <LoopCopyDataInit>

08001908 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800190a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800190c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800190e:	3104      	adds	r1, #4

08001910 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001910:	480b      	ldr	r0, [pc, #44]	; (8001940 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001914:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001916:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001918:	d3f6      	bcc.n	8001908 <CopyDataInit>
  ldr  r2, =_sbss
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800191c:	e002      	b.n	8001924 <LoopFillZerobss>

0800191e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800191e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001920:	f842 3b04 	str.w	r3, [r2], #4

08001924 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001926:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001928:	d3f9      	bcc.n	800191e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800192a:	f7ff ffa1 	bl	8001870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192e:	f000 f811 	bl	8001954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7ff fe67 	bl	8001604 <main>
  bx  lr    
 8001936:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001938:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800193c:	080019e4 	.word	0x080019e4
  ldr  r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001944:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001948:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800194c:	20000108 	.word	0x20000108

08001950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC_IRQHandler>
	...

08001954 <__libc_init_array>:
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	4e0d      	ldr	r6, [pc, #52]	; (800198c <__libc_init_array+0x38>)
 8001958:	4c0d      	ldr	r4, [pc, #52]	; (8001990 <__libc_init_array+0x3c>)
 800195a:	1ba4      	subs	r4, r4, r6
 800195c:	10a4      	asrs	r4, r4, #2
 800195e:	2500      	movs	r5, #0
 8001960:	42a5      	cmp	r5, r4
 8001962:	d109      	bne.n	8001978 <__libc_init_array+0x24>
 8001964:	4e0b      	ldr	r6, [pc, #44]	; (8001994 <__libc_init_array+0x40>)
 8001966:	4c0c      	ldr	r4, [pc, #48]	; (8001998 <__libc_init_array+0x44>)
 8001968:	f000 f820 	bl	80019ac <_init>
 800196c:	1ba4      	subs	r4, r4, r6
 800196e:	10a4      	asrs	r4, r4, #2
 8001970:	2500      	movs	r5, #0
 8001972:	42a5      	cmp	r5, r4
 8001974:	d105      	bne.n	8001982 <__libc_init_array+0x2e>
 8001976:	bd70      	pop	{r4, r5, r6, pc}
 8001978:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800197c:	4798      	blx	r3
 800197e:	3501      	adds	r5, #1
 8001980:	e7ee      	b.n	8001960 <__libc_init_array+0xc>
 8001982:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001986:	4798      	blx	r3
 8001988:	3501      	adds	r5, #1
 800198a:	e7f2      	b.n	8001972 <__libc_init_array+0x1e>
 800198c:	080019dc 	.word	0x080019dc
 8001990:	080019dc 	.word	0x080019dc
 8001994:	080019dc 	.word	0x080019dc
 8001998:	080019e0 	.word	0x080019e0

0800199c <memset>:
 800199c:	4402      	add	r2, r0
 800199e:	4603      	mov	r3, r0
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d100      	bne.n	80019a6 <memset+0xa>
 80019a4:	4770      	bx	lr
 80019a6:	f803 1b01 	strb.w	r1, [r3], #1
 80019aa:	e7f9      	b.n	80019a0 <memset+0x4>

080019ac <_init>:
 80019ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ae:	bf00      	nop
 80019b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019b2:	bc08      	pop	{r3}
 80019b4:	469e      	mov	lr, r3
 80019b6:	4770      	bx	lr

080019b8 <_fini>:
 80019b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ba:	bf00      	nop
 80019bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019be:	bc08      	pop	{r3}
 80019c0:	469e      	mov	lr, r3
 80019c2:	4770      	bx	lr
