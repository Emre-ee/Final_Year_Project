
Adc_Timer6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003560  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003710  08003710  00013710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003768  08003768  00013768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08003778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  8 .bss          000000fc  20000074  20000074  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000170  20000170  00020074  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000ca39  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001e4f  00000000  00000000  0002cadd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000056d5  00000000  00000000  0002e92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000890  00000000  00000000  00034008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  00034898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004437  00000000  00000000  00035370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000039ab  00000000  00000000  000397a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003d152  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001d50  00000000  00000000  0003d1d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080036f8 	.word	0x080036f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080036f8 	.word	0x080036f8

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2f>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac8:	bf24      	itt	cs
 8000aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad2:	d90d      	bls.n	8000af0 <__aeabi_d2f+0x30>
 8000ad4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af4:	d121      	bne.n	8000b3a <__aeabi_d2f+0x7a>
 8000af6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afa:	bfbc      	itt	lt
 8000afc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	4770      	bxlt	lr
 8000b02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0a:	f1c2 0218 	rsb	r2, r2, #24
 8000b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	f040 0001 	orrne.w	r0, r0, #1
 8000b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b2c:	ea40 000c 	orr.w	r0, r0, ip
 8000b30:	fa23 f302 	lsr.w	r3, r3, r2
 8000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b38:	e7cc      	b.n	8000ad4 <__aeabi_d2f+0x14>
 8000b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3e:	d107      	bne.n	8000b50 <__aeabi_d2f+0x90>
 8000b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b44:	bf1e      	ittt	ne
 8000b46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bxne	lr
 8000b50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_uldivmod>:
 8000b60:	b953      	cbnz	r3, 8000b78 <__aeabi_uldivmod+0x18>
 8000b62:	b94a      	cbnz	r2, 8000b78 <__aeabi_uldivmod+0x18>
 8000b64:	2900      	cmp	r1, #0
 8000b66:	bf08      	it	eq
 8000b68:	2800      	cmpeq	r0, #0
 8000b6a:	bf1c      	itt	ne
 8000b6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b70:	f04f 30ff 	movne.w	r0, #4294967295
 8000b74:	f000 b97a 	b.w	8000e6c <__aeabi_idiv0>
 8000b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b80:	f000 f806 	bl	8000b90 <__udivmoddi4>
 8000b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8c:	b004      	add	sp, #16
 8000b8e:	4770      	bx	lr

08000b90 <__udivmoddi4>:
 8000b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b94:	468c      	mov	ip, r1
 8000b96:	460d      	mov	r5, r1
 8000b98:	4604      	mov	r4, r0
 8000b9a:	9e08      	ldr	r6, [sp, #32]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d151      	bne.n	8000c44 <__udivmoddi4+0xb4>
 8000ba0:	428a      	cmp	r2, r1
 8000ba2:	4617      	mov	r7, r2
 8000ba4:	d96d      	bls.n	8000c82 <__udivmoddi4+0xf2>
 8000ba6:	fab2 fe82 	clz	lr, r2
 8000baa:	f1be 0f00 	cmp.w	lr, #0
 8000bae:	d00b      	beq.n	8000bc8 <__udivmoddi4+0x38>
 8000bb0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bb4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bb8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bbc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bc0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bc4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bc8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000bcc:	0c25      	lsrs	r5, r4, #16
 8000bce:	fbbc f8fa 	udiv	r8, ip, sl
 8000bd2:	fa1f f987 	uxth.w	r9, r7
 8000bd6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000bda:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000bde:	fb08 f309 	mul.w	r3, r8, r9
 8000be2:	42ab      	cmp	r3, r5
 8000be4:	d90a      	bls.n	8000bfc <__udivmoddi4+0x6c>
 8000be6:	19ed      	adds	r5, r5, r7
 8000be8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000bec:	f080 8123 	bcs.w	8000e36 <__udivmoddi4+0x2a6>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	f240 8120 	bls.w	8000e36 <__udivmoddi4+0x2a6>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	443d      	add	r5, r7
 8000bfc:	1aed      	subs	r5, r5, r3
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c04:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c0c:	fb00 f909 	mul.w	r9, r0, r9
 8000c10:	45a1      	cmp	r9, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x98>
 8000c14:	19e4      	adds	r4, r4, r7
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 810a 	bcs.w	8000e32 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8107 	bls.w	8000e32 <__udivmoddi4+0x2a2>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	eba4 0409 	sub.w	r4, r4, r9
 8000c2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c30:	2100      	movs	r1, #0
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d061      	beq.n	8000cfa <__udivmoddi4+0x16a>
 8000c36:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	6034      	str	r4, [r6, #0]
 8000c3e:	6073      	str	r3, [r6, #4]
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0xc8>
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d054      	beq.n	8000cf6 <__udivmoddi4+0x166>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c52:	4608      	mov	r0, r1
 8000c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c58:	fab3 f183 	clz	r1, r3
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	f040 808e 	bne.w	8000d7e <__udivmoddi4+0x1ee>
 8000c62:	42ab      	cmp	r3, r5
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xdc>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80fa 	bhi.w	8000e60 <__udivmoddi4+0x2d0>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb65 0503 	sbc.w	r5, r5, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	46ac      	mov	ip, r5
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d03f      	beq.n	8000cfa <__udivmoddi4+0x16a>
 8000c7a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b912      	cbnz	r2, 8000c8a <__udivmoddi4+0xfa>
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c8a:	fab7 fe87 	clz	lr, r7
 8000c8e:	f1be 0f00 	cmp.w	lr, #0
 8000c92:	d134      	bne.n	8000cfe <__udivmoddi4+0x16e>
 8000c94:	1beb      	subs	r3, r5, r7
 8000c96:	0c3a      	lsrs	r2, r7, #16
 8000c98:	fa1f fc87 	uxth.w	ip, r7
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ca2:	0c25      	lsrs	r5, r4, #16
 8000ca4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ca8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cac:	fb0c f308 	mul.w	r3, ip, r8
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x134>
 8000cb4:	19ed      	adds	r5, r5, r7
 8000cb6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x132>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	f200 80d1 	bhi.w	8000e64 <__udivmoddi4+0x2d4>
 8000cc2:	4680      	mov	r8, r0
 8000cc4:	1aed      	subs	r5, r5, r3
 8000cc6:	b2a3      	uxth	r3, r4
 8000cc8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000ccc:	fb02 5510 	mls	r5, r2, r0, r5
 8000cd0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000cd4:	fb0c fc00 	mul.w	ip, ip, r0
 8000cd8:	45a4      	cmp	ip, r4
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x15c>
 8000cdc:	19e4      	adds	r4, r4, r7
 8000cde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x15a>
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	f200 80b8 	bhi.w	8000e5a <__udivmoddi4+0x2ca>
 8000cea:	4618      	mov	r0, r3
 8000cec:	eba4 040c 	sub.w	r4, r4, ip
 8000cf0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf4:	e79d      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000cf6:	4631      	mov	r1, r6
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	f1ce 0420 	rsb	r4, lr, #32
 8000d02:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d06:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d0a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d0e:	0c3a      	lsrs	r2, r7, #16
 8000d10:	fa25 f404 	lsr.w	r4, r5, r4
 8000d14:	ea48 0803 	orr.w	r8, r8, r3
 8000d18:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d1c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d20:	fb02 4411 	mls	r4, r2, r1, r4
 8000d24:	fa1f fc87 	uxth.w	ip, r7
 8000d28:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d2c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d36:	d909      	bls.n	8000d4c <__udivmoddi4+0x1bc>
 8000d38:	19ed      	adds	r5, r5, r7
 8000d3a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d3e:	f080 808a 	bcs.w	8000e56 <__udivmoddi4+0x2c6>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	f240 8087 	bls.w	8000e56 <__udivmoddi4+0x2c6>
 8000d48:	3902      	subs	r1, #2
 8000d4a:	443d      	add	r5, r7
 8000d4c:	1aeb      	subs	r3, r5, r3
 8000d4e:	fa1f f588 	uxth.w	r5, r8
 8000d52:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d56:	fb02 3310 	mls	r3, r2, r0, r3
 8000d5a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d5e:	fb00 f30c 	mul.w	r3, r0, ip
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x1e6>
 8000d66:	19ed      	adds	r5, r5, r7
 8000d68:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6c:	d26f      	bcs.n	8000e4e <__udivmoddi4+0x2be>
 8000d6e:	42ab      	cmp	r3, r5
 8000d70:	d96d      	bls.n	8000e4e <__udivmoddi4+0x2be>
 8000d72:	3802      	subs	r0, #2
 8000d74:	443d      	add	r5, r7
 8000d76:	1aeb      	subs	r3, r5, r3
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	e78f      	b.n	8000c9e <__udivmoddi4+0x10e>
 8000d7e:	f1c1 0720 	rsb	r7, r1, #32
 8000d82:	fa22 f807 	lsr.w	r8, r2, r7
 8000d86:	408b      	lsls	r3, r1
 8000d88:	fa05 f401 	lsl.w	r4, r5, r1
 8000d8c:	ea48 0303 	orr.w	r3, r8, r3
 8000d90:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d94:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d98:	40fd      	lsrs	r5, r7
 8000d9a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d9e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000da2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000da6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000daa:	fa1f f883 	uxth.w	r8, r3
 8000dae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000db2:	fb09 f408 	mul.w	r4, r9, r8
 8000db6:	42ac      	cmp	r4, r5
 8000db8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x244>
 8000dc2:	18ed      	adds	r5, r5, r3
 8000dc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc8:	d243      	bcs.n	8000e52 <__udivmoddi4+0x2c2>
 8000dca:	42ac      	cmp	r4, r5
 8000dcc:	d941      	bls.n	8000e52 <__udivmoddi4+0x2c2>
 8000dce:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd2:	441d      	add	r5, r3
 8000dd4:	1b2d      	subs	r5, r5, r4
 8000dd6:	fa1f fe8e 	uxth.w	lr, lr
 8000dda:	fbb5 f0fc 	udiv	r0, r5, ip
 8000dde:	fb0c 5510 	mls	r5, ip, r0, r5
 8000de2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000de6:	fb00 f808 	mul.w	r8, r0, r8
 8000dea:	45a0      	cmp	r8, r4
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x26e>
 8000dee:	18e4      	adds	r4, r4, r3
 8000df0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000df4:	d229      	bcs.n	8000e4a <__udivmoddi4+0x2ba>
 8000df6:	45a0      	cmp	r8, r4
 8000df8:	d927      	bls.n	8000e4a <__udivmoddi4+0x2ba>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	441c      	add	r4, r3
 8000dfe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e02:	eba4 0408 	sub.w	r4, r4, r8
 8000e06:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0a:	454c      	cmp	r4, r9
 8000e0c:	46c6      	mov	lr, r8
 8000e0e:	464d      	mov	r5, r9
 8000e10:	d315      	bcc.n	8000e3e <__udivmoddi4+0x2ae>
 8000e12:	d012      	beq.n	8000e3a <__udivmoddi4+0x2aa>
 8000e14:	b156      	cbz	r6, 8000e2c <__udivmoddi4+0x29c>
 8000e16:	ebba 030e 	subs.w	r3, sl, lr
 8000e1a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e22:	40cb      	lsrs	r3, r1
 8000e24:	431f      	orrs	r7, r3
 8000e26:	40cc      	lsrs	r4, r1
 8000e28:	6037      	str	r7, [r6, #0]
 8000e2a:	6074      	str	r4, [r6, #4]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	4618      	mov	r0, r3
 8000e34:	e6f8      	b.n	8000c28 <__udivmoddi4+0x98>
 8000e36:	4690      	mov	r8, r2
 8000e38:	e6e0      	b.n	8000bfc <__udivmoddi4+0x6c>
 8000e3a:	45c2      	cmp	sl, r8
 8000e3c:	d2ea      	bcs.n	8000e14 <__udivmoddi4+0x284>
 8000e3e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e42:	eb69 0503 	sbc.w	r5, r9, r3
 8000e46:	3801      	subs	r0, #1
 8000e48:	e7e4      	b.n	8000e14 <__udivmoddi4+0x284>
 8000e4a:	4628      	mov	r0, r5
 8000e4c:	e7d7      	b.n	8000dfe <__udivmoddi4+0x26e>
 8000e4e:	4640      	mov	r0, r8
 8000e50:	e791      	b.n	8000d76 <__udivmoddi4+0x1e6>
 8000e52:	4681      	mov	r9, r0
 8000e54:	e7be      	b.n	8000dd4 <__udivmoddi4+0x244>
 8000e56:	4601      	mov	r1, r0
 8000e58:	e778      	b.n	8000d4c <__udivmoddi4+0x1bc>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	e745      	b.n	8000cec <__udivmoddi4+0x15c>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xe6>
 8000e64:	f1a8 0802 	sub.w	r8, r8, #2
 8000e68:	443d      	add	r5, r7
 8000e6a:	e72b      	b.n	8000cc4 <__udivmoddi4+0x134>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_InitTick+0x3c>)
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_InitTick+0x40>)
{
 8000e76:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	7818      	ldrb	r0, [r3, #0]
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e82:	6810      	ldr	r0, [r2, #0]
 8000e84:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e88:	f000 fada 	bl	8001440 <HAL_SYSTICK_Config>
 8000e8c:	4604      	mov	r4, r0
 8000e8e:	b958      	cbnz	r0, 8000ea8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e90:	2d0f      	cmp	r5, #15
 8000e92:	d809      	bhi.n	8000ea8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	4602      	mov	r2, r0
 8000e96:	4629      	mov	r1, r5
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 fa8e 	bl	80013bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <HAL_InitTick+0x44>)
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	601d      	str	r5, [r3, #0]
 8000ea6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ea8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000eaa:	bd38      	pop	{r3, r4, r5, pc}
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_Init>:
{
 8000eb8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x30>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ec2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ed2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 fa5f 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f7ff ffc8 	bl	8000e70 <HAL_InitTick>
  HAL_MspInit();
 8000ee0:	f001 fa68 	bl	80023b4 <HAL_MspInit>
}
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	bd08      	pop	{r3, pc}
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <HAL_IncTick+0x10>)
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <HAL_IncTick+0x14>)
 8000ef0:	6811      	ldr	r1, [r2, #0]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	440b      	add	r3, r1
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000090 	.word	0x20000090
 8000f00:	20000000 	.word	0x20000000

08000f04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f04:	4b01      	ldr	r3, [pc, #4]	; (8000f0c <HAL_GetTick+0x8>)
 8000f06:	6818      	ldr	r0, [r3, #0]
}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000090 	.word	0x20000090

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b538      	push	{r3, r4, r5, lr}
 8000f12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff fff6 	bl	8000f04 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f18:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	bf1c      	itt	ne
 8000f1c:	4b05      	ldrne	r3, [pc, #20]	; (8000f34 <HAL_Delay+0x24>)
 8000f1e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f22:	bf18      	it	ne
 8000f24:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f26:	f7ff ffed 	bl	8000f04 <HAL_GetTick>
 8000f2a:	1b40      	subs	r0, r0, r5
 8000f2c:	4284      	cmp	r4, r0
 8000f2e:	d8fa      	bhi.n	8000f26 <HAL_Delay+0x16>
  {
  }
}
 8000f30:	bd38      	pop	{r3, r4, r5, pc}
 8000f32:	bf00      	nop
 8000f34:	20000000 	.word	0x20000000

08000f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f38:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	f000 809b 	beq.w	8001078 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f42:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000f44:	b925      	cbnz	r5, 8000f50 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f46:	f001 fa51 	bl	80023ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f4a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f4c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f52:	06db      	lsls	r3, r3, #27
 8000f54:	f100 808e 	bmi.w	8001074 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f5e:	f023 0302 	bic.w	r3, r3, #2
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f68:	4b44      	ldr	r3, [pc, #272]	; (800107c <HAL_ADC_Init+0x144>)
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000f70:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	6861      	ldr	r1, [r4, #4]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f7a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f7c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f8e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f90:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f92:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f96:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f9e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fa0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fae:	4934      	ldr	r1, [pc, #208]	; (8001080 <HAL_ADC_Init+0x148>)
 8000fb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fb2:	428a      	cmp	r2, r1
 8000fb4:	d052      	beq.n	800105c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fb6:	6899      	ldr	r1, [r3, #8]
 8000fb8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000fbc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fbe:	6899      	ldr	r1, [r3, #8]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fc4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fd2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fd4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000fd6:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fd8:	f022 0202 	bic.w	r2, r2, #2
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000fe4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fe6:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000fea:	2a00      	cmp	r2, #0
 8000fec:	d03e      	beq.n	800106c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fee:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ff0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ff6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000ffe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	3901      	subs	r1, #1
 8001004:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001008:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800100a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800100c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800100e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001016:	3901      	subs	r1, #1
 8001018:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800101c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800101e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001020:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001024:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001030:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001032:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001034:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800103a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800103c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800103e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001040:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001044:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001046:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800104a:	f023 0303 	bic.w	r3, r3, #3
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001054:	2300      	movs	r3, #0
 8001056:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800105a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001062:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800106a:	e7b2      	b.n	8000fd2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001072:	e7c9      	b.n	8001008 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001074:	2001      	movs	r0, #1
 8001076:	e7ed      	b.n	8001054 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001078:	2001      	movs	r0, #1
}
 800107a:	bd38      	pop	{r3, r4, r5, pc}
 800107c:	40012300 	.word	0x40012300
 8001080:	0f000001 	.word	0x0f000001

08001084 <HAL_ADC_Start>:
{
 8001084:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001086:	2300      	movs	r3, #0
 8001088:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800108a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800108e:	2b01      	cmp	r3, #1
 8001090:	d061      	beq.n	8001156 <HAL_ADC_Start+0xd2>
 8001092:	2301      	movs	r3, #1
 8001094:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001098:	6803      	ldr	r3, [r0, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	07d1      	lsls	r1, r2, #31
 800109e:	d505      	bpl.n	80010ac <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	07d2      	lsls	r2, r2, #31
 80010a4:	d414      	bmi.n	80010d0 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 80010a6:	2000      	movs	r0, #0
}
 80010a8:	b002      	add	sp, #8
 80010aa:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80010ac:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010ae:	492b      	ldr	r1, [pc, #172]	; (800115c <HAL_ADC_Start+0xd8>)
    __HAL_ADC_ENABLE(hadc);
 80010b0:	f042 0201 	orr.w	r2, r2, #1
 80010b4:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010b6:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <HAL_ADC_Start+0xdc>)
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	fbb2 f2f1 	udiv	r2, r2, r1
 80010be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80010c2:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80010c4:	9a01      	ldr	r2, [sp, #4]
 80010c6:	2a00      	cmp	r2, #0
 80010c8:	d0ea      	beq.n	80010a0 <HAL_ADC_Start+0x1c>
      counter--;
 80010ca:	9a01      	ldr	r2, [sp, #4]
 80010cc:	3a01      	subs	r2, #1
 80010ce:	e7f8      	b.n	80010c2 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80010d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010de:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010e4:	bf41      	itttt	mi
 80010e6:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80010e8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80010ec:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80010f0:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010f8:	bf1c      	itt	ne
 80010fa:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 80010fc:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001100:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001102:	2200      	movs	r2, #0
 8001104:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001108:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800110c:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HAL_ADC_Start+0xe0>)
 8001110:	6851      	ldr	r1, [r2, #4]
 8001112:	f011 0f1f 	tst.w	r1, #31
 8001116:	4914      	ldr	r1, [pc, #80]	; (8001168 <HAL_ADC_Start+0xe4>)
 8001118:	d11a      	bne.n	8001150 <HAL_ADC_Start+0xcc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800111a:	428b      	cmp	r3, r1
 800111c:	d006      	beq.n	800112c <HAL_ADC_Start+0xa8>
 800111e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8001122:	428b      	cmp	r3, r1
 8001124:	d10b      	bne.n	800113e <HAL_ADC_Start+0xba>
 8001126:	6852      	ldr	r2, [r2, #4]
 8001128:	06d2      	lsls	r2, r2, #27
 800112a:	d1bc      	bne.n	80010a6 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800112c:	6898      	ldr	r0, [r3, #8]
 800112e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001132:	d1b8      	bne.n	80010a6 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	e7b4      	b.n	80010a8 <HAL_ADC_Start+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800113e:	490b      	ldr	r1, [pc, #44]	; (800116c <HAL_ADC_Start+0xe8>)
 8001140:	428b      	cmp	r3, r1
 8001142:	d1b0      	bne.n	80010a6 <HAL_ADC_Start+0x22>
 8001144:	6852      	ldr	r2, [r2, #4]
 8001146:	f002 021f 	and.w	r2, r2, #31
 800114a:	2a0f      	cmp	r2, #15
 800114c:	d9ee      	bls.n	800112c <HAL_ADC_Start+0xa8>
 800114e:	e7aa      	b.n	80010a6 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001150:	428b      	cmp	r3, r1
 8001152:	d1a8      	bne.n	80010a6 <HAL_ADC_Start+0x22>
 8001154:	e7ea      	b.n	800112c <HAL_ADC_Start+0xa8>
  __HAL_LOCK(hadc);
 8001156:	2002      	movs	r0, #2
 8001158:	e7a6      	b.n	80010a8 <HAL_ADC_Start+0x24>
 800115a:	bf00      	nop
 800115c:	000f4240 	.word	0x000f4240
 8001160:	20000008 	.word	0x20000008
 8001164:	40012300 	.word	0x40012300
 8001168:	40012000 	.word	0x40012000
 800116c:	40012200 	.word	0x40012200

08001170 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001170:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001174:	2b01      	cmp	r3, #1
 8001176:	d017      	beq.n	80011a8 <HAL_ADC_Stop+0x38>
 8001178:	2301      	movs	r3, #1
 800117a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800117e:	6803      	ldr	r3, [r0, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	f022 0201 	bic.w	r2, r2, #1
 8001186:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	07db      	lsls	r3, r3, #31
 800118c:	d407      	bmi.n	800119e <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 800118e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001190:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800119e:	2300      	movs	r3, #0
 80011a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80011a4:	4618      	mov	r0, r3
 80011a6:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80011a8:	2002      	movs	r0, #2
}
 80011aa:	4770      	bx	lr

080011ac <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011ac:	6803      	ldr	r3, [r0, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
{
 80011b0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011b2:	0556      	lsls	r6, r2, #21
{
 80011b4:	4604      	mov	r4, r0
 80011b6:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011b8:	d50b      	bpl.n	80011d2 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011ba:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011bc:	05d8      	lsls	r0, r3, #23
 80011be:	d508      	bpl.n	80011d2 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011c2:	f043 0320 	orr.w	r3, r3, #32
 80011c6:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80011c8:	2300      	movs	r3, #0
 80011ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80011ce:	2001      	movs	r0, #1
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80011d2:	f7ff fe97 	bl	8000f04 <HAL_GetTick>
 80011d6:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	0792      	lsls	r2, r2, #30
 80011de:	d50c      	bpl.n	80011fa <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011e0:	f06f 0212 	mvn.w	r2, #18
 80011e4:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ec:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80011f4:	d013      	beq.n	800121e <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 80011f6:	2000      	movs	r0, #0
 80011f8:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80011fa:	1c69      	adds	r1, r5, #1
 80011fc:	d0ed      	beq.n	80011da <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011fe:	b945      	cbnz	r5, 8001212 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8001208:	2300      	movs	r3, #0
 800120a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 800120e:	2003      	movs	r0, #3
 8001210:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001212:	f7ff fe77 	bl	8000f04 <HAL_GetTick>
 8001216:	1b80      	subs	r0, r0, r6
 8001218:	4285      	cmp	r5, r0
 800121a:	d2dd      	bcs.n	80011d8 <HAL_ADC_PollForConversion+0x2c>
 800121c:	e7f0      	b.n	8001200 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800121e:	7e22      	ldrb	r2, [r4, #24]
 8001220:	2a00      	cmp	r2, #0
 8001222:	d1e8      	bne.n	80011f6 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001226:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800122a:	d002      	beq.n	8001232 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800122c:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800122e:	055b      	lsls	r3, r3, #21
 8001230:	d4e1      	bmi.n	80011f6 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001238:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800123a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800123c:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8001240:	d1d9      	bne.n	80011f6 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6423      	str	r3, [r4, #64]	; 0x40
}
 800124a:	bd70      	pop	{r4, r5, r6, pc}

0800124c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800124c:	6803      	ldr	r3, [r0, #0]
 800124e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001250:	4770      	bx	lr
	...

08001254 <HAL_ADC_ConfigChannel>:
{
 8001254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800125a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800125e:	2b01      	cmp	r3, #1
 8001260:	d06e      	beq.n	8001340 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001262:	680d      	ldr	r5, [r1, #0]
 8001264:	6804      	ldr	r4, [r0, #0]
 8001266:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8001268:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800126a:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800126c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001270:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001272:	d92a      	bls.n	80012ca <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001274:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001278:	68e7      	ldr	r7, [r4, #12]
 800127a:	3b1e      	subs	r3, #30
 800127c:	f04f 0e07 	mov.w	lr, #7
 8001280:	fa0e fe03 	lsl.w	lr, lr, r3
 8001284:	ea27 070e 	bic.w	r7, r7, lr
 8001288:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800128a:	68e7      	ldr	r7, [r4, #12]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	433b      	orrs	r3, r7
 8001292:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8001294:	684a      	ldr	r2, [r1, #4]
 8001296:	2a06      	cmp	r2, #6
 8001298:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800129c:	d825      	bhi.n	80012ea <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800129e:	4413      	add	r3, r2
 80012a0:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80012a2:	1f59      	subs	r1, r3, #5
 80012a4:	231f      	movs	r3, #31
 80012a6:	408b      	lsls	r3, r1
 80012a8:	ea27 0303 	bic.w	r3, r7, r3
 80012ac:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80012b0:	fa06 f101 	lsl.w	r1, r6, r1
 80012b4:	4311      	orrs	r1, r2
 80012b6:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012b8:	4b32      	ldr	r3, [pc, #200]	; (8001384 <HAL_ADC_ConfigChannel+0x130>)
 80012ba:	429c      	cmp	r4, r3
 80012bc:	d034      	beq.n	8001328 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 80012be:	2300      	movs	r3, #0
 80012c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80012c4:	4618      	mov	r0, r3
}
 80012c6:	b003      	add	sp, #12
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012ca:	6927      	ldr	r7, [r4, #16]
 80012cc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80012d0:	f04f 0e07 	mov.w	lr, #7
 80012d4:	fa0e fe03 	lsl.w	lr, lr, r3
 80012d8:	ea27 070e 	bic.w	r7, r7, lr
 80012dc:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012de:	6927      	ldr	r7, [r4, #16]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	433b      	orrs	r3, r7
 80012e6:	6123      	str	r3, [r4, #16]
 80012e8:	e7d4      	b.n	8001294 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80012ea:	2a0c      	cmp	r2, #12
 80012ec:	d80e      	bhi.n	800130c <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012ee:	4413      	add	r3, r2
 80012f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80012f2:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80012f6:	231f      	movs	r3, #31
 80012f8:	4093      	lsls	r3, r2
 80012fa:	ea21 0303 	bic.w	r3, r1, r3
 80012fe:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001300:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001302:	fa06 f202 	lsl.w	r2, r6, r2
 8001306:	431a      	orrs	r2, r3
 8001308:	6322      	str	r2, [r4, #48]	; 0x30
 800130a:	e7d5      	b.n	80012b8 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800130c:	4413      	add	r3, r2
 800130e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001310:	3b41      	subs	r3, #65	; 0x41
 8001312:	221f      	movs	r2, #31
 8001314:	409a      	lsls	r2, r3
 8001316:	ea21 0202 	bic.w	r2, r1, r2
 800131a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800131c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800131e:	fa06 f103 	lsl.w	r1, r6, r3
 8001322:	4311      	orrs	r1, r2
 8001324:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001326:	e7c7      	b.n	80012b8 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001328:	2d12      	cmp	r5, #18
 800132a:	d10b      	bne.n	8001344 <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_ADC_ConfigChannel+0x134>)
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001334:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	e7be      	b.n	80012be <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8001340:	2002      	movs	r0, #2
 8001342:	e7c0      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_ADC_ConfigChannel+0x138>)
 8001346:	429d      	cmp	r5, r3
 8001348:	d001      	beq.n	800134e <HAL_ADC_ConfigChannel+0xfa>
 800134a:	2d11      	cmp	r5, #17
 800134c:	d1b7      	bne.n	80012be <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_ADC_ConfigChannel+0x134>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001356:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800135e:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_ADC_ConfigChannel+0x138>)
 8001362:	429d      	cmp	r5, r3
 8001364:	d1ab      	bne.n	80012be <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_ADC_ConfigChannel+0x13c>)
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_ADC_ConfigChannel+0x140>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001370:	230a      	movs	r3, #10
 8001372:	4353      	muls	r3, r2
        counter--;
 8001374:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001376:	9b01      	ldr	r3, [sp, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0a0      	beq.n	80012be <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800137c:	9b01      	ldr	r3, [sp, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	e7f8      	b.n	8001374 <HAL_ADC_ConfigChannel+0x120>
 8001382:	bf00      	nop
 8001384:	40012000 	.word	0x40012000
 8001388:	40012300 	.word	0x40012300
 800138c:	10000012 	.word	0x10000012
 8001390:	20000008 	.word	0x20000008
 8001394:	000f4240 	.word	0x000f4240

08001398 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800139a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013a0:	041b      	lsls	r3, r3, #16
 80013a2:	0c1b      	lsrs	r3, r3, #16
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a8:	0200      	lsls	r0, r0, #8
 80013aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80013b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80013b4:	60d3      	str	r3, [r2, #12]
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013be:	b530      	push	{r4, r5, lr}
 80013c0:	68dc      	ldr	r4, [r3, #12]
 80013c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	bf28      	it	cs
 80013d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 0501 	mov.w	r5, #1
 80013d8:	fa05 f303 	lsl.w	r3, r5, r3
 80013dc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e0:	bf8c      	ite	hi
 80013e2:	3c03      	subhi	r4, #3
 80013e4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e6:	4019      	ands	r1, r3
 80013e8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ea:	fa05 f404 	lsl.w	r4, r5, r4
 80013ee:	3c01      	subs	r4, #1
 80013f0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80013f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	ea42 0201 	orr.w	r2, r2, r1
 80013f8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	bfad      	iteet	ge
 80013fe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	f000 000f 	andlt.w	r0, r0, #15
 8001406:	4b06      	ldrlt	r3, [pc, #24]	; (8001420 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	bfb5      	itete	lt
 800140e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001418:	bd30      	pop	{r4, r5, pc}
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00
 8001420:	e000ed14 	.word	0xe000ed14

08001424 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001424:	2800      	cmp	r0, #0
 8001426:	db08      	blt.n	800143a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001428:	0942      	lsrs	r2, r0, #5
 800142a:	2301      	movs	r3, #1
 800142c:	f000 001f 	and.w	r0, r0, #31
 8001430:	fa03 f000 	lsl.w	r0, r3, r0
 8001434:	4b01      	ldr	r3, [pc, #4]	; (800143c <HAL_NVIC_EnableIRQ+0x18>)
 8001436:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100

08001440 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	3801      	subs	r0, #1
 8001442:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001446:	d20a      	bcs.n	800145e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	21f0      	movs	r1, #240	; 0xf0
 8001450:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001470:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001474:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800163c <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001478:	4a6e      	ldr	r2, [pc, #440]	; (8001634 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001640 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001480:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001482:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001484:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8001486:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001488:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800148a:	42ac      	cmp	r4, r5
 800148c:	f040 80b8 	bne.w	8001600 <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001490:	684c      	ldr	r4, [r1, #4]
 8001492:	f024 0c10 	bic.w	ip, r4, #16
 8001496:	f10c 36ff 	add.w	r6, ip, #4294967295
 800149a:	2e01      	cmp	r6, #1
 800149c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80014a0:	d812      	bhi.n	80014c8 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80014a2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a4:	2603      	movs	r6, #3
 80014a6:	fa06 f60e 	lsl.w	r6, r6, lr
 80014aa:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ae:	68ce      	ldr	r6, [r1, #12]
 80014b0:	fa06 f60e 	lsl.w	r6, r6, lr
 80014b4:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80014b6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80014b8:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014ba:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014be:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	409e      	lsls	r6, r3
 80014c4:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80014c6:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014c8:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80014ca:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014cc:	fa06 f60e 	lsl.w	r6, r6, lr
 80014d0:	43f6      	mvns	r6, r6
 80014d2:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d6:	688f      	ldr	r7, [r1, #8]
 80014d8:	fa07 f70e 	lsl.w	r7, r7, lr
 80014dc:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e0:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80014e4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e6:	d116      	bne.n	8001516 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80014e8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80014ec:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80014f4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80014fc:	f04f 0c0f 	mov.w	ip, #15
 8001500:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001504:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001508:	690f      	ldr	r7, [r1, #16]
 800150a:	fa07 f70b 	lsl.w	r7, r7, fp
 800150e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001512:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8001516:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001518:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800151a:	f004 0703 	and.w	r7, r4, #3
 800151e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001522:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8001526:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001528:	00e6      	lsls	r6, r4, #3
 800152a:	d569      	bpl.n	8001600 <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152c:	f04f 0b00 	mov.w	fp, #0
 8001530:	f8cd b00c 	str.w	fp, [sp, #12]
 8001534:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001538:	4e3f      	ldr	r6, [pc, #252]	; (8001638 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800153e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001542:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001546:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800154a:	9703      	str	r7, [sp, #12]
 800154c:	9f03      	ldr	r7, [sp, #12]
 800154e:	f023 0703 	bic.w	r7, r3, #3
 8001552:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001556:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800155a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800155e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001562:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001566:	f04f 0e0f 	mov.w	lr, #15
 800156a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800156e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001570:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001574:	d04b      	beq.n	800160e <HAL_GPIO_Init+0x1a2>
 8001576:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800157a:	42b0      	cmp	r0, r6
 800157c:	d049      	beq.n	8001612 <HAL_GPIO_Init+0x1a6>
 800157e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001582:	42b0      	cmp	r0, r6
 8001584:	d047      	beq.n	8001616 <HAL_GPIO_Init+0x1aa>
 8001586:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800158a:	42b0      	cmp	r0, r6
 800158c:	d045      	beq.n	800161a <HAL_GPIO_Init+0x1ae>
 800158e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001592:	42b0      	cmp	r0, r6
 8001594:	d043      	beq.n	800161e <HAL_GPIO_Init+0x1b2>
 8001596:	4548      	cmp	r0, r9
 8001598:	d043      	beq.n	8001622 <HAL_GPIO_Init+0x1b6>
 800159a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800159e:	42b0      	cmp	r0, r6
 80015a0:	d041      	beq.n	8001626 <HAL_GPIO_Init+0x1ba>
 80015a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015a6:	42b0      	cmp	r0, r6
 80015a8:	d03f      	beq.n	800162a <HAL_GPIO_Init+0x1be>
 80015aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015ae:	42b0      	cmp	r0, r6
 80015b0:	d03d      	beq.n	800162e <HAL_GPIO_Init+0x1c2>
 80015b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015b6:	42b0      	cmp	r0, r6
 80015b8:	bf14      	ite	ne
 80015ba:	260a      	movne	r6, #10
 80015bc:	2609      	moveq	r6, #9
 80015be:	fa06 f60c 	lsl.w	r6, r6, ip
 80015c2:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80015c8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015cc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80015d0:	bf0c      	ite	eq
 80015d2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80015d4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80015d6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80015d8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015da:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80015de:	bf0c      	ite	eq
 80015e0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80015e2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80015e4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80015ec:	bf0c      	ite	eq
 80015ee:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80015f0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80015f2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80015f4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80015f8:	bf54      	ite	pl
 80015fa:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80015fc:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80015fe:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001600:	3301      	adds	r3, #1
 8001602:	2b10      	cmp	r3, #16
 8001604:	f47f af3d 	bne.w	8001482 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001608:	b005      	add	sp, #20
 800160a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160e:	465e      	mov	r6, fp
 8001610:	e7d5      	b.n	80015be <HAL_GPIO_Init+0x152>
 8001612:	2601      	movs	r6, #1
 8001614:	e7d3      	b.n	80015be <HAL_GPIO_Init+0x152>
 8001616:	2602      	movs	r6, #2
 8001618:	e7d1      	b.n	80015be <HAL_GPIO_Init+0x152>
 800161a:	2603      	movs	r6, #3
 800161c:	e7cf      	b.n	80015be <HAL_GPIO_Init+0x152>
 800161e:	2604      	movs	r6, #4
 8001620:	e7cd      	b.n	80015be <HAL_GPIO_Init+0x152>
 8001622:	2605      	movs	r6, #5
 8001624:	e7cb      	b.n	80015be <HAL_GPIO_Init+0x152>
 8001626:	2606      	movs	r6, #6
 8001628:	e7c9      	b.n	80015be <HAL_GPIO_Init+0x152>
 800162a:	2607      	movs	r6, #7
 800162c:	e7c7      	b.n	80015be <HAL_GPIO_Init+0x152>
 800162e:	2608      	movs	r6, #8
 8001630:	e7c5      	b.n	80015be <HAL_GPIO_Init+0x152>
 8001632:	bf00      	nop
 8001634:	40013c00 	.word	0x40013c00
 8001638:	40020000 	.word	0x40020000
 800163c:	40023800 	.word	0x40023800
 8001640:	40021400 	.word	0x40021400

08001644 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001644:	6943      	ldr	r3, [r0, #20]
 8001646:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800164a:	bf08      	it	eq
 800164c:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800164e:	6181      	str	r1, [r0, #24]
 8001650:	4770      	bx	lr
	...

08001654 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001654:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800165c:	4c18      	ldr	r4, [pc, #96]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001660:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001664:	641a      	str	r2, [r3, #64]	; 0x40
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_PWREx_EnableOverDrive+0x70>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001676:	f7ff fc45 	bl	8000f04 <HAL_GetTick>
 800167a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800167c:	6863      	ldr	r3, [r4, #4]
 800167e:	03da      	lsls	r2, r3, #15
 8001680:	d50b      	bpl.n	800169a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001684:	4c0e      	ldr	r4, [pc, #56]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800168a:	f7ff fc3b 	bl	8000f04 <HAL_GetTick>
 800168e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001690:	6863      	ldr	r3, [r4, #4]
 8001692:	039b      	lsls	r3, r3, #14
 8001694:	d50a      	bpl.n	80016ac <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001696:	2000      	movs	r0, #0
 8001698:	e006      	b.n	80016a8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800169a:	f7ff fc33 	bl	8000f04 <HAL_GetTick>
 800169e:	1b40      	subs	r0, r0, r5
 80016a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80016a4:	d9ea      	bls.n	800167c <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80016a6:	2003      	movs	r0, #3
}
 80016a8:	b003      	add	sp, #12
 80016aa:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016ac:	f7ff fc2a 	bl	8000f04 <HAL_GetTick>
 80016b0:	1b40      	subs	r0, r0, r5
 80016b2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80016b6:	d9eb      	bls.n	8001690 <HAL_PWREx_EnableOverDrive+0x3c>
 80016b8:	e7f5      	b.n	80016a6 <HAL_PWREx_EnableOverDrive+0x52>
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000
 80016c4:	420e0040 	.word	0x420e0040
 80016c8:	420e0044 	.word	0x420e0044

080016cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d0:	4604      	mov	r4, r0
 80016d2:	b908      	cbnz	r0, 80016d8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80016d4:	2001      	movs	r0, #1
 80016d6:	e03f      	b.n	8001758 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d8:	6803      	ldr	r3, [r0, #0]
 80016da:	07dd      	lsls	r5, r3, #31
 80016dc:	d410      	bmi.n	8001700 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	0798      	lsls	r0, r3, #30
 80016e2:	d45a      	bmi.n	800179a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	071a      	lsls	r2, r3, #28
 80016e8:	f100 809c 	bmi.w	8001824 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	075b      	lsls	r3, r3, #29
 80016f0:	f100 80ba 	bmi.w	8001868 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f4:	69a0      	ldr	r0, [r4, #24]
 80016f6:	2800      	cmp	r0, #0
 80016f8:	f040 811b 	bne.w	8001932 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80016fc:	2000      	movs	r0, #0
 80016fe:	e02b      	b.n	8001758 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001700:	4ba4      	ldr	r3, [pc, #656]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	f002 020c 	and.w	r2, r2, #12
 8001708:	2a04      	cmp	r2, #4
 800170a:	d007      	beq.n	800171c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001712:	2a08      	cmp	r2, #8
 8001714:	d10a      	bne.n	800172c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	0259      	lsls	r1, r3, #9
 800171a:	d507      	bpl.n	800172c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	4b9d      	ldr	r3, [pc, #628]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	039a      	lsls	r2, r3, #14
 8001722:	d5dc      	bpl.n	80016de <HAL_RCC_OscConfig+0x12>
 8001724:	6863      	ldr	r3, [r4, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1d9      	bne.n	80016de <HAL_RCC_OscConfig+0x12>
 800172a:	e7d3      	b.n	80016d4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172c:	6863      	ldr	r3, [r4, #4]
 800172e:	4d99      	ldr	r5, [pc, #612]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001734:	d113      	bne.n	800175e <HAL_RCC_OscConfig+0x92>
 8001736:	682b      	ldr	r3, [r5, #0]
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800173e:	f7ff fbe1 	bl	8000f04 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	4d94      	ldr	r5, [pc, #592]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001744:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	682b      	ldr	r3, [r5, #0]
 8001748:	039b      	lsls	r3, r3, #14
 800174a:	d4c8      	bmi.n	80016de <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fbda 	bl	8000f04 <HAL_GetTick>
 8001750:	1b80      	subs	r0, r0, r6
 8001752:	2864      	cmp	r0, #100	; 0x64
 8001754:	d9f7      	bls.n	8001746 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001756:	2003      	movs	r0, #3
}
 8001758:	b002      	add	sp, #8
 800175a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001762:	d104      	bne.n	800176e <HAL_RCC_OscConfig+0xa2>
 8001764:	682b      	ldr	r3, [r5, #0]
 8001766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176a:	602b      	str	r3, [r5, #0]
 800176c:	e7e3      	b.n	8001736 <HAL_RCC_OscConfig+0x6a>
 800176e:	682a      	ldr	r2, [r5, #0]
 8001770:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001774:	602a      	str	r2, [r5, #0]
 8001776:	682a      	ldr	r2, [r5, #0]
 8001778:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800177c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1dd      	bne.n	800173e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001782:	f7ff fbbf 	bl	8000f04 <HAL_GetTick>
 8001786:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	039f      	lsls	r7, r3, #14
 800178c:	d5a7      	bpl.n	80016de <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800178e:	f7ff fbb9 	bl	8000f04 <HAL_GetTick>
 8001792:	1b80      	subs	r0, r0, r6
 8001794:	2864      	cmp	r0, #100	; 0x64
 8001796:	d9f7      	bls.n	8001788 <HAL_RCC_OscConfig+0xbc>
 8001798:	e7dd      	b.n	8001756 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800179a:	4b7e      	ldr	r3, [pc, #504]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	f012 0f0c 	tst.w	r2, #12
 80017a2:	d007      	beq.n	80017b4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017aa:	2a08      	cmp	r2, #8
 80017ac:	d111      	bne.n	80017d2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	025e      	lsls	r6, r3, #9
 80017b2:	d40e      	bmi.n	80017d2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b4:	4b77      	ldr	r3, [pc, #476]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	0795      	lsls	r5, r2, #30
 80017ba:	d502      	bpl.n	80017c2 <HAL_RCC_OscConfig+0xf6>
 80017bc:	68e2      	ldr	r2, [r4, #12]
 80017be:	2a01      	cmp	r2, #1
 80017c0:	d188      	bne.n	80016d4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	6921      	ldr	r1, [r4, #16]
 80017c6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80017ca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80017ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d0:	e788      	b.n	80016e4 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017d2:	68e2      	ldr	r2, [r4, #12]
 80017d4:	4b70      	ldr	r3, [pc, #448]	; (8001998 <HAL_RCC_OscConfig+0x2cc>)
 80017d6:	b1b2      	cbz	r2, 8001806 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb92 	bl	8000f04 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	4d6c      	ldr	r5, [pc, #432]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80017e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	0798      	lsls	r0, r3, #30
 80017e8:	d507      	bpl.n	80017fa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	682b      	ldr	r3, [r5, #0]
 80017ec:	6922      	ldr	r2, [r4, #16]
 80017ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017f6:	602b      	str	r3, [r5, #0]
 80017f8:	e774      	b.n	80016e4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fa:	f7ff fb83 	bl	8000f04 <HAL_GetTick>
 80017fe:	1b80      	subs	r0, r0, r6
 8001800:	2802      	cmp	r0, #2
 8001802:	d9ef      	bls.n	80017e4 <HAL_RCC_OscConfig+0x118>
 8001804:	e7a7      	b.n	8001756 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001806:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001808:	f7ff fb7c 	bl	8000f04 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180c:	4d61      	ldr	r5, [pc, #388]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800180e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	0799      	lsls	r1, r3, #30
 8001814:	f57f af66 	bpl.w	80016e4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001818:	f7ff fb74 	bl	8000f04 <HAL_GetTick>
 800181c:	1b80      	subs	r0, r0, r6
 800181e:	2802      	cmp	r0, #2
 8001820:	d9f6      	bls.n	8001810 <HAL_RCC_OscConfig+0x144>
 8001822:	e798      	b.n	8001756 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001824:	6962      	ldr	r2, [r4, #20]
 8001826:	4b5d      	ldr	r3, [pc, #372]	; (800199c <HAL_RCC_OscConfig+0x2d0>)
 8001828:	b17a      	cbz	r2, 800184a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800182e:	f7ff fb69 	bl	8000f04 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	4d58      	ldr	r5, [pc, #352]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001834:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001836:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001838:	079f      	lsls	r7, r3, #30
 800183a:	f53f af57 	bmi.w	80016ec <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff fb61 	bl	8000f04 <HAL_GetTick>
 8001842:	1b80      	subs	r0, r0, r6
 8001844:	2802      	cmp	r0, #2
 8001846:	d9f6      	bls.n	8001836 <HAL_RCC_OscConfig+0x16a>
 8001848:	e785      	b.n	8001756 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800184a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800184c:	f7ff fb5a 	bl	8000f04 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001850:	4d50      	ldr	r5, [pc, #320]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001852:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001856:	0798      	lsls	r0, r3, #30
 8001858:	f57f af48 	bpl.w	80016ec <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185c:	f7ff fb52 	bl	8000f04 <HAL_GetTick>
 8001860:	1b80      	subs	r0, r0, r6
 8001862:	2802      	cmp	r0, #2
 8001864:	d9f6      	bls.n	8001854 <HAL_RCC_OscConfig+0x188>
 8001866:	e776      	b.n	8001756 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001868:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
 800186a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001870:	d128      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	9201      	str	r2, [sp, #4]
 8001874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001876:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800187a:	641a      	str	r2, [r3, #64]	; 0x40
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001886:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4d45      	ldr	r5, [pc, #276]	; (80019a0 <HAL_RCC_OscConfig+0x2d4>)
 800188a:	682b      	ldr	r3, [r5, #0]
 800188c:	05d9      	lsls	r1, r3, #23
 800188e:	d51b      	bpl.n	80018c8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001890:	68a3      	ldr	r3, [r4, #8]
 8001892:	4d40      	ldr	r5, [pc, #256]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
 8001894:	2b01      	cmp	r3, #1
 8001896:	d127      	bne.n	80018e8 <HAL_RCC_OscConfig+0x21c>
 8001898:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80018a0:	f7ff fb30 	bl	8000f04 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a4:	4d3b      	ldr	r5, [pc, #236]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80018a6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018ae:	079b      	lsls	r3, r3, #30
 80018b0:	d539      	bpl.n	8001926 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80018b2:	2e00      	cmp	r6, #0
 80018b4:	f43f af1e 	beq.w	80016f4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b8:	4a36      	ldr	r2, [pc, #216]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
 80018ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	e717      	b.n	80016f4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80018c4:	2600      	movs	r6, #0
 80018c6:	e7df      	b.n	8001888 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c8:	682b      	ldr	r3, [r5, #0]
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018d0:	f7ff fb18 	bl	8000f04 <HAL_GetTick>
 80018d4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	682b      	ldr	r3, [r5, #0]
 80018d8:	05da      	lsls	r2, r3, #23
 80018da:	d4d9      	bmi.n	8001890 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018dc:	f7ff fb12 	bl	8000f04 <HAL_GetTick>
 80018e0:	1bc0      	subs	r0, r0, r7
 80018e2:	2802      	cmp	r0, #2
 80018e4:	d9f7      	bls.n	80018d6 <HAL_RCC_OscConfig+0x20a>
 80018e6:	e736      	b.n	8001756 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d104      	bne.n	80018f6 <HAL_RCC_OscConfig+0x22a>
 80018ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	672b      	str	r3, [r5, #112]	; 0x70
 80018f4:	e7d0      	b.n	8001898 <HAL_RCC_OscConfig+0x1cc>
 80018f6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018f8:	f022 0201 	bic.w	r2, r2, #1
 80018fc:	672a      	str	r2, [r5, #112]	; 0x70
 80018fe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001900:	f022 0204 	bic.w	r2, r2, #4
 8001904:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ca      	bne.n	80018a0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800190a:	f7ff fafb 	bl	8000f04 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001912:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001916:	0798      	lsls	r0, r3, #30
 8001918:	d5cb      	bpl.n	80018b2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7ff faf3 	bl	8000f04 <HAL_GetTick>
 800191e:	1bc0      	subs	r0, r0, r7
 8001920:	4540      	cmp	r0, r8
 8001922:	d9f7      	bls.n	8001914 <HAL_RCC_OscConfig+0x248>
 8001924:	e717      	b.n	8001756 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7ff faed 	bl	8000f04 <HAL_GetTick>
 800192a:	1bc0      	subs	r0, r0, r7
 800192c:	4540      	cmp	r0, r8
 800192e:	d9bd      	bls.n	80018ac <HAL_RCC_OscConfig+0x1e0>
 8001930:	e711      	b.n	8001756 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001932:	4d18      	ldr	r5, [pc, #96]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
 8001934:	68ab      	ldr	r3, [r5, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b08      	cmp	r3, #8
 800193c:	d047      	beq.n	80019ce <HAL_RCC_OscConfig+0x302>
 800193e:	4e19      	ldr	r6, [pc, #100]	; (80019a4 <HAL_RCC_OscConfig+0x2d8>)
 8001940:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001942:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001944:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001946:	d135      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001948:	f7ff fadc 	bl	8000f04 <HAL_GetTick>
 800194c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	682b      	ldr	r3, [r5, #0]
 8001950:	0199      	lsls	r1, r3, #6
 8001952:	d429      	bmi.n	80019a8 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001954:	6a22      	ldr	r2, [r4, #32]
 8001956:	69e3      	ldr	r3, [r4, #28]
 8001958:	4313      	orrs	r3, r2
 800195a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800195c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001960:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001962:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001966:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001968:	4c0a      	ldr	r4, [pc, #40]	; (8001994 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800196a:	0852      	lsrs	r2, r2, #1
 800196c:	3a01      	subs	r2, #1
 800196e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001972:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001974:	2301      	movs	r3, #1
 8001976:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001978:	f7ff fac4 	bl	8000f04 <HAL_GetTick>
 800197c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	019a      	lsls	r2, r3, #6
 8001982:	f53f aebb 	bmi.w	80016fc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff fabd 	bl	8000f04 <HAL_GetTick>
 800198a:	1b40      	subs	r0, r0, r5
 800198c:	2802      	cmp	r0, #2
 800198e:	d9f6      	bls.n	800197e <HAL_RCC_OscConfig+0x2b2>
 8001990:	e6e1      	b.n	8001756 <HAL_RCC_OscConfig+0x8a>
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	42470000 	.word	0x42470000
 800199c:	42470e80 	.word	0x42470e80
 80019a0:	40007000 	.word	0x40007000
 80019a4:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff faac 	bl	8000f04 <HAL_GetTick>
 80019ac:	1bc0      	subs	r0, r0, r7
 80019ae:	2802      	cmp	r0, #2
 80019b0:	d9cd      	bls.n	800194e <HAL_RCC_OscConfig+0x282>
 80019b2:	e6d0      	b.n	8001756 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80019b4:	f7ff faa6 	bl	8000f04 <HAL_GetTick>
 80019b8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ba:	682b      	ldr	r3, [r5, #0]
 80019bc:	019b      	lsls	r3, r3, #6
 80019be:	f57f ae9d 	bpl.w	80016fc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff fa9f 	bl	8000f04 <HAL_GetTick>
 80019c6:	1b00      	subs	r0, r0, r4
 80019c8:	2802      	cmp	r0, #2
 80019ca:	d9f6      	bls.n	80019ba <HAL_RCC_OscConfig+0x2ee>
 80019cc:	e6c3      	b.n	8001756 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ce:	2801      	cmp	r0, #1
 80019d0:	f43f aec2 	beq.w	8001758 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 80019d4:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	69e3      	ldr	r3, [r4, #28]
 80019d8:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80019dc:	429a      	cmp	r2, r3
 80019de:	f47f ae79 	bne.w	80016d4 <HAL_RCC_OscConfig+0x8>
 80019e2:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019e4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e8:	4293      	cmp	r3, r2
 80019ea:	f47f ae73 	bne.w	80016d4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019f4:	4003      	ands	r3, r0
 80019f6:	4293      	cmp	r3, r2
 80019f8:	f47f ae6c 	bne.w	80016d4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019fe:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a02:	4293      	cmp	r3, r2
 8001a04:	f47f ae66 	bne.w	80016d4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a0a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001a0e:	1ac0      	subs	r0, r0, r3
 8001a10:	bf18      	it	ne
 8001a12:	2001      	movne	r0, #1
 8001a14:	e6a0      	b.n	8001758 <HAL_RCC_OscConfig+0x8c>
 8001a16:	bf00      	nop

08001a18 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a18:	4913      	ldr	r1, [pc, #76]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001a1a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a1c:	688b      	ldr	r3, [r1, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x16>
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a2a:	4810      	ldr	r0, [pc, #64]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001a2c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001a2e:	4810      	ldr	r0, [pc, #64]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x58>)
 8001a30:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a32:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a34:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a36:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a38:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3c:	bf14      	ite	ne
 8001a3e:	480c      	ldrne	r0, [pc, #48]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a40:	480a      	ldreq	r0, [pc, #40]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a42:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001a46:	bf18      	it	ne
 8001a48:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	fba1 0100 	umull	r0, r1, r1, r0
 8001a52:	f7ff f885 	bl	8000b60 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x50>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001a5e:	3301      	adds	r3, #1
 8001a60:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001a62:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a66:	bd08      	pop	{r3, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	00f42400 	.word	0x00f42400
 8001a70:	007a1200 	.word	0x007a1200

08001a74 <HAL_RCC_ClockConfig>:
{
 8001a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a78:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	b910      	cbnz	r0, 8001a84 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a7e:	2001      	movs	r0, #1
 8001a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <HAL_RCC_ClockConfig+0x124>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	f002 020f 	and.w	r2, r2, #15
 8001a8c:	428a      	cmp	r2, r1
 8001a8e:	d329      	bcc.n	8001ae4 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	6821      	ldr	r1, [r4, #0]
 8001a92:	078f      	lsls	r7, r1, #30
 8001a94:	d42e      	bmi.n	8001af4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a96:	07c8      	lsls	r0, r1, #31
 8001a98:	d441      	bmi.n	8001b1e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_RCC_ClockConfig+0x124>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	f002 020f 	and.w	r2, r2, #15
 8001aa2:	4295      	cmp	r5, r2
 8001aa4:	d367      	bcc.n	8001b76 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa6:	6822      	ldr	r2, [r4, #0]
 8001aa8:	0751      	lsls	r1, r2, #29
 8001aaa:	d46d      	bmi.n	8001b88 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aac:	0713      	lsls	r3, r2, #28
 8001aae:	d507      	bpl.n	8001ac0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab0:	4a3a      	ldr	r2, [pc, #232]	; (8001b9c <HAL_RCC_ClockConfig+0x128>)
 8001ab2:	6921      	ldr	r1, [r4, #16]
 8001ab4:	6893      	ldr	r3, [r2, #8]
 8001ab6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001aba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001abe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ac0:	f7ff ffaa 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 8001ac4:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <HAL_RCC_ClockConfig+0x128>)
 8001ac6:	4a36      	ldr	r2, [pc, #216]	; (8001ba0 <HAL_RCC_ClockConfig+0x12c>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ace:	5cd3      	ldrb	r3, [r2, r3]
 8001ad0:	40d8      	lsrs	r0, r3
 8001ad2:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <HAL_RCC_ClockConfig+0x130>)
 8001ad4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001ad6:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <HAL_RCC_ClockConfig+0x134>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	f7ff f9c9 	bl	8000e70 <HAL_InitTick>
  return HAL_OK;
 8001ade:	2000      	movs	r0, #0
 8001ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	4299      	cmp	r1, r3
 8001af0:	d1c5      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xa>
 8001af2:	e7cd      	b.n	8001a90 <HAL_RCC_ClockConfig+0x1c>
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001afa:	bf1e      	ittt	ne
 8001afc:	689a      	ldrne	r2, [r3, #8]
 8001afe:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001b02:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b06:	bf42      	ittt	mi
 8001b08:	689a      	ldrmi	r2, [r3, #8]
 8001b0a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001b0e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	68a0      	ldr	r0, [r4, #8]
 8001b14:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001b18:	4302      	orrs	r2, r0
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	e7bb      	b.n	8001a96 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1e:	6862      	ldr	r2, [r4, #4]
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_RCC_ClockConfig+0x128>)
 8001b22:	2a01      	cmp	r2, #1
 8001b24:	d11d      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2c:	d0a7      	beq.n	8001a7e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2e:	4e1b      	ldr	r6, [pc, #108]	; (8001b9c <HAL_RCC_ClockConfig+0x128>)
 8001b30:	68b3      	ldr	r3, [r6, #8]
 8001b32:	f023 0303 	bic.w	r3, r3, #3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001b3a:	f7ff f9e3 	bl	8000f04 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001b42:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b44:	68b3      	ldr	r3, [r6, #8]
 8001b46:	6862      	ldr	r2, [r4, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b50:	d0a3      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7ff f9d7 	bl	8000f04 <HAL_GetTick>
 8001b56:	1bc0      	subs	r0, r0, r7
 8001b58:	4540      	cmp	r0, r8
 8001b5a:	d9f3      	bls.n	8001b44 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001b5c:	2003      	movs	r0, #3
}
 8001b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b62:	1e91      	subs	r1, r2, #2
 8001b64:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b68:	d802      	bhi.n	8001b70 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b6e:	e7dd      	b.n	8001b2c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	f013 0f02 	tst.w	r3, #2
 8001b74:	e7da      	b.n	8001b2c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	b2ea      	uxtb	r2, r5
 8001b78:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	429d      	cmp	r5, r3
 8001b82:	f47f af7c 	bne.w	8001a7e <HAL_RCC_ClockConfig+0xa>
 8001b86:	e78e      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b88:	4904      	ldr	r1, [pc, #16]	; (8001b9c <HAL_RCC_ClockConfig+0x128>)
 8001b8a:	68e0      	ldr	r0, [r4, #12]
 8001b8c:	688b      	ldr	r3, [r1, #8]
 8001b8e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b92:	4303      	orrs	r3, r0
 8001b94:	608b      	str	r3, [r1, #8]
 8001b96:	e789      	b.n	8001aac <HAL_RCC_ClockConfig+0x38>
 8001b98:	40023c00 	.word	0x40023c00
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	08003710 	.word	0x08003710
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bac:	6803      	ldr	r3, [r0, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	f042 0201 	orr.w	r2, r2, #1
 8001bb4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bbc:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001bbe:	bf1e      	ittt	ne
 8001bc0:	681a      	ldrne	r2, [r3, #0]
 8001bc2:	f042 0201 	orrne.w	r2, r2, #1
 8001bc6:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001bc8:	2000      	movs	r0, #0
 8001bca:	4770      	bx	lr

08001bcc <HAL_TIM_OC_DelayElapsedCallback>:
 8001bcc:	4770      	bx	lr

08001bce <HAL_TIM_IC_CaptureCallback>:
 8001bce:	4770      	bx	lr

08001bd0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_TIM_TriggerCallback>:
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bd4:	6803      	ldr	r3, [r0, #0]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	0791      	lsls	r1, r2, #30
{
 8001bda:	b510      	push	{r4, lr}
 8001bdc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bde:	d50e      	bpl.n	8001bfe <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	0792      	lsls	r2, r2, #30
 8001be4:	d50b      	bpl.n	8001bfe <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001be6:	f06f 0202 	mvn.w	r2, #2
 8001bea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bec:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bee:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bf2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf4:	d077      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bf6:	f7ff ffea 	bl	8001bce <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	0750      	lsls	r0, r2, #29
 8001c04:	d510      	bpl.n	8001c28 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	0751      	lsls	r1, r2, #29
 8001c0a:	d50d      	bpl.n	8001c28 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c0c:	f06f 0204 	mvn.w	r2, #4
 8001c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c12:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c14:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c16:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c1a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c1e:	d068      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c20:	f7ff ffd5 	bl	8001bce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c24:	2300      	movs	r3, #0
 8001c26:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	0712      	lsls	r2, r2, #28
 8001c2e:	d50f      	bpl.n	8001c50 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	0710      	lsls	r0, r2, #28
 8001c34:	d50c      	bpl.n	8001c50 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c36:	f06f 0208 	mvn.w	r2, #8
 8001c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c3c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c3e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c40:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c42:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c44:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c46:	d05a      	beq.n	8001cfe <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c48:	f7ff ffc1 	bl	8001bce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	06d2      	lsls	r2, r2, #27
 8001c56:	d510      	bpl.n	8001c7a <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	06d0      	lsls	r0, r2, #27
 8001c5c:	d50d      	bpl.n	8001c7a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c5e:	f06f 0210 	mvn.w	r2, #16
 8001c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c64:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c66:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c68:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c6c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c70:	d04b      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	f7ff ffac 	bl	8001bce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c76:	2300      	movs	r3, #0
 8001c78:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	07d1      	lsls	r1, r2, #31
 8001c80:	d508      	bpl.n	8001c94 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	07d2      	lsls	r2, r2, #31
 8001c86:	d505      	bpl.n	8001c94 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c88:	f06f 0201 	mvn.w	r2, #1
 8001c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f000 fa4a 	bl	8002128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	0610      	lsls	r0, r2, #24
 8001c9a:	d508      	bpl.n	8001cae <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	0611      	lsls	r1, r2, #24
 8001ca0:	d505      	bpl.n	8001cae <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ca2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f000 f8f8 	bl	8001e9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	0652      	lsls	r2, r2, #25
 8001cb4:	d508      	bpl.n	8001cc8 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	0650      	lsls	r0, r2, #25
 8001cba:	d505      	bpl.n	8001cc8 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7ff ff85 	bl	8001bd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	0691      	lsls	r1, r2, #26
 8001cce:	d522      	bpl.n	8001d16 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	0692      	lsls	r2, r2, #26
 8001cd4:	d51f      	bpl.n	8001d16 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cd6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cda:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cdc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001ce2:	f000 b8db 	b.w	8001e9c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	f7ff ff71 	bl	8001bcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff ff70 	bl	8001bd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cf0:	e783      	b.n	8001bfa <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	f7ff ff6b 	bl	8001bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff ff6a 	bl	8001bd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cfc:	e792      	b.n	8001c24 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfe:	f7ff ff65 	bl	8001bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d02:	4620      	mov	r0, r4
 8001d04:	f7ff ff64 	bl	8001bd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d08:	e7a0      	b.n	8001c4c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	f7ff ff5f 	bl	8001bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7ff ff5e 	bl	8001bd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d14:	e7af      	b.n	8001c76 <HAL_TIM_IRQHandler+0xa2>
 8001d16:	bd10      	pop	{r4, pc}

08001d18 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d18:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001d1a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d1c:	4290      	cmp	r0, r2
 8001d1e:	d012      	beq.n	8001d46 <TIM_Base_SetConfig+0x2e>
 8001d20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d24:	d00f      	beq.n	8001d46 <TIM_Base_SetConfig+0x2e>
 8001d26:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d2a:	4290      	cmp	r0, r2
 8001d2c:	d00b      	beq.n	8001d46 <TIM_Base_SetConfig+0x2e>
 8001d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d32:	4290      	cmp	r0, r2
 8001d34:	d007      	beq.n	8001d46 <TIM_Base_SetConfig+0x2e>
 8001d36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d3a:	4290      	cmp	r0, r2
 8001d3c:	d003      	beq.n	8001d46 <TIM_Base_SetConfig+0x2e>
 8001d3e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d42:	4290      	cmp	r0, r2
 8001d44:	d119      	bne.n	8001d7a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001d46:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d4c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d4e:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <TIM_Base_SetConfig+0xc4>)
 8001d50:	4290      	cmp	r0, r2
 8001d52:	d029      	beq.n	8001da8 <TIM_Base_SetConfig+0x90>
 8001d54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d58:	d026      	beq.n	8001da8 <TIM_Base_SetConfig+0x90>
 8001d5a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d5e:	4290      	cmp	r0, r2
 8001d60:	d022      	beq.n	8001da8 <TIM_Base_SetConfig+0x90>
 8001d62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d66:	4290      	cmp	r0, r2
 8001d68:	d01e      	beq.n	8001da8 <TIM_Base_SetConfig+0x90>
 8001d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d6e:	4290      	cmp	r0, r2
 8001d70:	d01a      	beq.n	8001da8 <TIM_Base_SetConfig+0x90>
 8001d72:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d76:	4290      	cmp	r0, r2
 8001d78:	d016      	beq.n	8001da8 <TIM_Base_SetConfig+0x90>
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <TIM_Base_SetConfig+0xc8>)
 8001d7c:	4290      	cmp	r0, r2
 8001d7e:	d013      	beq.n	8001da8 <TIM_Base_SetConfig+0x90>
 8001d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d84:	4290      	cmp	r0, r2
 8001d86:	d00f      	beq.n	8001da8 <TIM_Base_SetConfig+0x90>
 8001d88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d8c:	4290      	cmp	r0, r2
 8001d8e:	d00b      	beq.n	8001da8 <TIM_Base_SetConfig+0x90>
 8001d90:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001d94:	4290      	cmp	r0, r2
 8001d96:	d007      	beq.n	8001da8 <TIM_Base_SetConfig+0x90>
 8001d98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d9c:	4290      	cmp	r0, r2
 8001d9e:	d003      	beq.n	8001da8 <TIM_Base_SetConfig+0x90>
 8001da0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001da4:	4290      	cmp	r0, r2
 8001da6:	d103      	bne.n	8001db0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001da8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dae:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db0:	694a      	ldr	r2, [r1, #20]
 8001db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001db6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001db8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dba:	688b      	ldr	r3, [r1, #8]
 8001dbc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dbe:	680b      	ldr	r3, [r1, #0]
 8001dc0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <TIM_Base_SetConfig+0xc4>)
 8001dc4:	4298      	cmp	r0, r3
 8001dc6:	d003      	beq.n	8001dd0 <TIM_Base_SetConfig+0xb8>
 8001dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dcc:	4298      	cmp	r0, r3
 8001dce:	d101      	bne.n	8001dd4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd0:	690b      	ldr	r3, [r1, #16]
 8001dd2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	6143      	str	r3, [r0, #20]
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	40014000 	.word	0x40014000

08001de4 <HAL_TIM_Base_Init>:
{
 8001de4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001de6:	4604      	mov	r4, r0
 8001de8:	b1a0      	cbz	r0, 8001e14 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001dea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001df2:	b91b      	cbnz	r3, 8001dfc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001df4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001df8:	f000 fb48 	bl	800248c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e02:	6820      	ldr	r0, [r4, #0]
 8001e04:	1d21      	adds	r1, r4, #4
 8001e06:	f7ff ff87 	bl	8001d18 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e10:	2000      	movs	r0, #0
 8001e12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e14:	2001      	movs	r0, #1
}
 8001e16:	bd10      	pop	{r4, pc}

08001e18 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e1c:	2b01      	cmp	r3, #1
{
 8001e1e:	b530      	push	{r4, r5, lr}
 8001e20:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001e24:	d035      	beq.n	8001e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e2a:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e2c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001e2e:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e30:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001e34:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e36:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8001e38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001e3c:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e3e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e40:	4c15      	ldr	r4, [pc, #84]	; (8001e98 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8001e42:	42a3      	cmp	r3, r4
 8001e44:	d01a      	beq.n	8001e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4a:	d017      	beq.n	8001e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e4c:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8001e50:	42a3      	cmp	r3, r4
 8001e52:	d013      	beq.n	8001e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e54:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e58:	42a3      	cmp	r3, r4
 8001e5a:	d00f      	beq.n	8001e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e5c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e60:	42a3      	cmp	r3, r4
 8001e62:	d00b      	beq.n	8001e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e64:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8001e68:	42a3      	cmp	r3, r4
 8001e6a:	d007      	beq.n	8001e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e6c:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8001e70:	42a3      	cmp	r3, r4
 8001e72:	d003      	beq.n	8001e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e74:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8001e78:	42a3      	cmp	r3, r4
 8001e7a:	d104      	bne.n	8001e86 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e7c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e82:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001e92:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001e94:	bd30      	pop	{r4, r5, pc}
 8001e96:	bf00      	nop
 8001e98:	40010000 	.word	0x40010000

08001e9c <HAL_TIMEx_CommutCallback>:
 8001e9c:	4770      	bx	lr

08001e9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e9e:	4770      	bx	lr

08001ea0 <OutCmd>:
#define LCD_RS_OFF   CLEAR_BIT(GPIOE->ODR,GPIO_ODR_ODR_1)   /* Port 9.6 Output */
#define LCD_E_ON     SET_BIT(GPIOE->ODR,GPIO_ODR_ODR_0)  /* Port 9.7 Output */
#define LCD_E_OFF    CLEAR_BIT(GPIOE->ODR,GPIO_ODR_ODR_0)   /* Port 9.7 Output */


void static OutCmd(unsigned char command){
 8001ea0:	b570      	push	{r4, r5, r6, lr}
  LCDDATA = command>>4;//HIGH 4 BIT 
 8001ea2:	4e18      	ldr	r6, [pc, #96]	; (8001f04 <OutCmd+0x64>)

    //LCD_RS_OFF;                    // E=0, R/W=0, RS=0
	LCD_RS_OFF;
 8001ea4:	4c18      	ldr	r4, [pc, #96]	; (8001f08 <OutCmd+0x68>)
  LCDDATA = command>>4;//HIGH 4 BIT 
 8001ea6:	0903      	lsrs	r3, r0, #4
 8001ea8:	6173      	str	r3, [r6, #20]
	LCD_RS_OFF;
 8001eaa:	6963      	ldr	r3, [r4, #20]
 8001eac:	f023 0302 	bic.w	r3, r3, #2
void static OutCmd(unsigned char command){
 8001eb0:	4605      	mov	r5, r0
	LCD_RS_OFF;
 8001eb2:	6163      	str	r3, [r4, #20]
   HAL_Delay(1);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7ff f82b 	bl	8000f10 <HAL_Delay>
    //LCD_E = 1;                     // E=1, R/W=0, RS=0
	LCD_E_ON;
 8001eba:	6963      	ldr	r3, [r4, #20]
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6163      	str	r3, [r4, #20]
   HAL_Delay(1);
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f7ff f824 	bl	8000f10 <HAL_Delay>
    // LCD_E_OFF;                     // E=0, R/W=0, RS=0
	LCD_E_OFF;
 8001ec8:	6963      	ldr	r3, [r4, #20]
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	6163      	str	r3, [r4, #20]
   HAL_Delay(2);
 8001ed0:	2002      	movs	r0, #2
	
	LCDDATA = command&0x0F; //LOW 4 BIT
 8001ed2:	f005 050f 	and.w	r5, r5, #15
   HAL_Delay(2);
 8001ed6:	f7ff f81b 	bl	8000f10 <HAL_Delay>
	LCDDATA = command&0x0F; //LOW 4 BIT
 8001eda:	6175      	str	r5, [r6, #20]
 
    LCD_RS_OFF;                    // E=0, R/W=0, RS=0
 8001edc:	6963      	ldr	r3, [r4, #20]
 8001ede:	f023 0302 	bic.w	r3, r3, #2
 8001ee2:	6163      	str	r3, [r4, #20]
   HAL_Delay(1);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7ff f813 	bl	8000f10 <HAL_Delay>
    LCD_E_ON;                     // E=1, R/W=0, RS=0
 8001eea:	6963      	ldr	r3, [r4, #20]
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6163      	str	r3, [r4, #20]
   HAL_Delay(1);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7ff f80c 	bl	8000f10 <HAL_Delay>
    LCD_E_OFF;                     // E=0, R/W=0, RS=0
 8001ef8:	6963      	ldr	r3, [r4, #20]
 8001efa:	f023 0301 	bic.w	r3, r3, #1
 8001efe:	6163      	str	r3, [r4, #20]
 8001f00:	bd70      	pop	{r4, r5, r6, pc}
 8001f02:	bf00      	nop
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40021000 	.word	0x40021000

08001f0c <LCD_Init>:
// Initialize LCD
// Inputs: none
// Outputs: none


void LCD_Init(void){
 8001f0c:	b508      	push	{r3, lr}
 
  LCD_E_OFF;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <LCD_Init+0x6c>)
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	615a      	str	r2, [r3, #20]
  LCD_RS_OFF;                    // E=0, R/W=0, RS=0
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	f022 0202 	bic.w	r2, r2, #2
 8001f1e:	615a      	str	r2, [r3, #20]
 HAL_Delay(5);                // Wait >15 ms after power is applied
 8001f20:	2005      	movs	r0, #5
 8001f22:	f7fe fff5 	bl	8000f10 <HAL_Delay>
  OutCmd(0x03);               // command 0x30 = Wake up
 8001f26:	2003      	movs	r0, #3
 8001f28:	f7ff ffba 	bl	8001ea0 <OutCmd>
 HAL_Delay(5);              // must wait 5ms, busy flag not available
 8001f2c:	2005      	movs	r0, #5
 8001f2e:	f7fe ffef 	bl	8000f10 <HAL_Delay>
  OutCmd(0x03);             // command 0x30 = Wake up #2
 8001f32:	2003      	movs	r0, #3
 8001f34:	f7ff ffb4 	bl	8001ea0 <OutCmd>
 HAL_Delay(5);             // must wait 160us, busy flag not available
 8001f38:	2005      	movs	r0, #5
 8001f3a:	f7fe ffe9 	bl	8000f10 <HAL_Delay>
  OutCmd(0x03);            // command 0x30 = Wake up #3
 8001f3e:	2003      	movs	r0, #3
 8001f40:	f7ff ffae 	bl	8001ea0 <OutCmd>
 HAL_Delay(5);            // must wait 160us, busy flag not available
 8001f44:	2005      	movs	r0, #5
 8001f46:	f7fe ffe3 	bl	8000f10 <HAL_Delay>
  OutCmd(0x02);                 
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f7ff ffa8 	bl	8001ea0 <OutCmd>
  OutCmd(0x28); 			      // Function set: 4-bit/2-line
 8001f50:	2028      	movs	r0, #40	; 0x28
 8001f52:	f7ff ffa5 	bl	8001ea0 <OutCmd>
  OutCmd(0x08);					 // Display off, cursor off
 8001f56:	2008      	movs	r0, #8
 8001f58:	f7ff ffa2 	bl	8001ea0 <OutCmd>
  OutCmd(0x0F);                  // Display on, cursor blinking
 8001f5c:	200f      	movs	r0, #15
 8001f5e:	f7ff ff9f 	bl	8001ea0 <OutCmd>
  OutCmd(0x06);                  // Increment cursor (shift cursor to right)
 8001f62:	2006      	movs	r0, #6
 8001f64:	f7ff ff9c 	bl	8001ea0 <OutCmd>
  OutCmd(0x80);                  // Increment cursor (shift cursor to right)
 8001f68:	2080      	movs	r0, #128	; 0x80
 8001f6a:	f7ff ff99 	bl	8001ea0 <OutCmd>
	
 OutCmd(0x01);					//Clear display screen
 8001f6e:	2001      	movs	r0, #1
}
 8001f70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 OutCmd(0x01);					//Clear display screen
 8001f74:	f7ff bf94 	b.w	8001ea0 <OutCmd>
 8001f78:	40021000 	.word	0x40021000

08001f7c <LCD_OutChar>:

// Output a character to the LCD
// Inputs: letter is ASCII character, 0 to 0x7F
// Outputs: none
void LCD_OutChar(char letter){
 8001f7c:	b570      	push	{r4, r5, r6, lr}
  LCDDATA = letter>>4;
 8001f7e:	4e1a      	ldr	r6, [pc, #104]	; (8001fe8 <LCD_OutChar+0x6c>)
 
 LCD_RS_ON;                    // E=0, R/W=0, RS=1
 8001f80:	4c1a      	ldr	r4, [pc, #104]	; (8001fec <LCD_OutChar+0x70>)
  LCDDATA = letter>>4;
 8001f82:	0903      	lsrs	r3, r0, #4
 8001f84:	6173      	str	r3, [r6, #20]
 LCD_RS_ON;                    // E=0, R/W=0, RS=1
 8001f86:	6963      	ldr	r3, [r4, #20]
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6163      	str	r3, [r4, #20]
void LCD_OutChar(char letter){
 8001f8e:	4605      	mov	r5, r0
HAL_Delay(1);           // wait 6us
 8001f90:	2001      	movs	r0, #1
 8001f92:	f7fe ffbd 	bl	8000f10 <HAL_Delay>
 LCD_E_ON;                     // E=1, R/W=0, RS=1
 8001f96:	6963      	ldr	r3, [r4, #20]
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6163      	str	r3, [r4, #20]
HAL_Delay(1);            // wait 6us
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7fe ffb6 	bl	8000f10 <HAL_Delay>
 LCD_E_OFF;                     // E=0, R/W=0, RS=1
 8001fa4:	6963      	ldr	r3, [r4, #20]
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	6163      	str	r3, [r4, #20]
HAL_Delay(2);           // wait 40us
 8001fac:	2002      	movs	r0, #2
	
 LCDDATA = letter&0x0F;
 8001fae:	f005 050f 	and.w	r5, r5, #15
HAL_Delay(2);           // wait 40us
 8001fb2:	f7fe ffad 	bl	8000f10 <HAL_Delay>
 LCDDATA = letter&0x0F;
 8001fb6:	6175      	str	r5, [r6, #20]
 
 LCD_RS_ON;                    // E=0, R/W=0, RS=1
 8001fb8:	6963      	ldr	r3, [r4, #20]
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	6163      	str	r3, [r4, #20]
HAL_Delay(1);           // wait 6us
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f7fe ffa5 	bl	8000f10 <HAL_Delay>
 LCD_E_ON;                     // E=1, R/W=0, RS=1
 8001fc6:	6963      	ldr	r3, [r4, #20]
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6163      	str	r3, [r4, #20]
HAL_Delay(1);            // wait 6us
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7fe ff9e 	bl	8000f10 <HAL_Delay>
 LCD_E_OFF;                     // E=0, R/W=0, RS=1
 8001fd4:	6963      	ldr	r3, [r4, #20]
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	6163      	str	r3, [r4, #20]
HAL_Delay(2);           // wait 40us
 8001fdc:	2002      	movs	r0, #2
}
 8001fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
HAL_Delay(2);           // wait 40us
 8001fe2:	f7fe bf95 	b.w	8000f10 <HAL_Delay>
 8001fe6:	bf00      	nop
 8001fe8:	40020c00 	.word	0x40020c00
 8001fec:	40021000 	.word	0x40021000

08001ff0 <LCD_Clear>:

// Clear the LCD
// Inputs: none
// Outputs: none
void LCD_Clear(void){
 8001ff0:	b508      	push	{r3, lr}
  OutCmd(0x01);          // Clear Display
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f7ff ff54 	bl	8001ea0 <OutCmd>
 HAL_Delay(2); // wait 1.6ms
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f7fe ff89 	bl	8000f10 <HAL_Delay>
  OutCmd(0x02);          // Cursor to home
 8001ffe:	2002      	movs	r0, #2
 8002000:	f7ff ff4e 	bl	8001ea0 <OutCmd>
 HAL_Delay(2); // wait 1.6ms
 8002004:	2002      	movs	r0, #2
}
 8002006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 HAL_Delay(2); // wait 1.6ms
 800200a:	f7fe bf81 	b.w	8000f10 <HAL_Delay>

0800200e <LCD_OutString>:
// Input: pointer to a NULL-terminated string to be transferred
// Output: none
void LCD_OutString(char *pt,unsigned char line){

	
	if(line==2){//move second line
 800200e:	2902      	cmp	r1, #2
void LCD_OutString(char *pt,unsigned char line){
 8002010:	b510      	push	{r4, lr}
 8002012:	4604      	mov	r4, r0
	if(line==2){//move second line
 8002014:	d107      	bne.n	8002026 <LCD_OutString+0x18>
     OutCmd(0xc0); 
 8002016:	20c0      	movs	r0, #192	; 0xc0
 8002018:	f7ff ff42 	bl	8001ea0 <OutCmd>
 800201c:	3c01      	subs	r4, #1
	 OutCmd(0x80); 
	}
	else//must be 1 or 2 
	 return;//fail 
	
  while(*pt){
 800201e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002022:	b920      	cbnz	r0, 800202e <LCD_OutString+0x20>
 8002024:	bd10      	pop	{r4, pc}
	else if(line==1){//move first line
 8002026:	2901      	cmp	r1, #1
 8002028:	d1fc      	bne.n	8002024 <LCD_OutString+0x16>
	 OutCmd(0x80); 
 800202a:	2080      	movs	r0, #128	; 0x80
 800202c:	e7f4      	b.n	8002018 <LCD_OutString+0xa>
    LCD_OutChar(*pt);
 800202e:	f7ff ffa5 	bl	8001f7c <LCD_OutChar>
 8002032:	e7f4      	b.n	800201e <LCD_OutString+0x10>

08002034 <reverse>:
/* USER CODE BEGIN PFP */


// Reverses a string 'str' of length 'len'
void reverse(char* str, int len)
{
 8002034:	b510      	push	{r4, lr}
    int i = 0, j = len - 1, temp;
 8002036:	3901      	subs	r1, #1
 8002038:	4401      	add	r1, r0
    while (i < j) {
 800203a:	4603      	mov	r3, r0
 800203c:	1a1a      	subs	r2, r3, r0
 800203e:	1a0c      	subs	r4, r1, r0
 8002040:	42a2      	cmp	r2, r4
 8002042:	db00      	blt.n	8002046 <reverse+0x12>
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
}
 8002044:	bd10      	pop	{r4, pc}
        temp = str[i];
 8002046:	781a      	ldrb	r2, [r3, #0]
        str[i] = str[j];
 8002048:	780c      	ldrb	r4, [r1, #0]
 800204a:	f803 4b01 	strb.w	r4, [r3], #1
        str[j] = temp;
 800204e:	f801 2901 	strb.w	r2, [r1], #-1
 8002052:	e7f3      	b.n	800203c <reverse+0x8>

08002054 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 8002054:	b538      	push	{r3, r4, r5, lr}
 8002056:	460d      	mov	r5, r1
    int i = 0;
    while (x) {
 8002058:	460b      	mov	r3, r1
        str[i++] = (x % 10) + '0';
 800205a:	210a      	movs	r1, #10
 800205c:	1b5c      	subs	r4, r3, r5
    while (x) {
 800205e:	b958      	cbnz	r0, 8002078 <intToStr+0x24>
 8002060:	192b      	adds	r3, r5, r4
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
        str[i++] = '0';
 8002062:	2130      	movs	r1, #48	; 0x30
    while (i < d)
 8002064:	4294      	cmp	r4, r2
 8002066:	db10      	blt.n	800208a <intToStr+0x36>

    reverse(str, i);
 8002068:	4628      	mov	r0, r5
 800206a:	4621      	mov	r1, r4
 800206c:	f7ff ffe2 	bl	8002034 <reverse>
    str[i] = '\0';
 8002070:	2300      	movs	r3, #0
 8002072:	552b      	strb	r3, [r5, r4]
    return i;
}
 8002074:	4620      	mov	r0, r4
 8002076:	bd38      	pop	{r3, r4, r5, pc}
        str[i++] = (x % 10) + '0';
 8002078:	fb90 f4f1 	sdiv	r4, r0, r1
 800207c:	fb01 0014 	mls	r0, r1, r4, r0
 8002080:	3030      	adds	r0, #48	; 0x30
 8002082:	f803 0b01 	strb.w	r0, [r3], #1
        x = x / 10;
 8002086:	4620      	mov	r0, r4
 8002088:	e7e8      	b.n	800205c <intToStr+0x8>
        str[i++] = '0';
 800208a:	3401      	adds	r4, #1
 800208c:	f803 1b01 	strb.w	r1, [r3], #1
 8002090:	e7e8      	b.n	8002064 <intToStr+0x10>
 8002092:	0000      	movs	r0, r0
 8002094:	0000      	movs	r0, r0
	...

08002098 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8002098:	b570      	push	{r4, r5, r6, lr}
 800209a:	ed2d 8b02 	vpush	{d8}
    // Extract integer part
    int ipart = (int)n;
 800209e:	eebd 8ac0 	vcvt.s32.f32	s16, s0
{
 80020a2:	b082      	sub	sp, #8
 80020a4:	4604      	mov	r4, r0
 80020a6:	460e      	mov	r6, r1

    // Extract floating part
    float fpart = n - (float)ipart;

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	4601      	mov	r1, r0
 80020ac:	ee18 0a10 	vmov	r0, s16
{
 80020b0:	eef0 8a40 	vmov.f32	s17, s0
    int i = intToStr(ipart, res, 0);
 80020b4:	f7ff ffce 	bl	8002054 <intToStr>
 80020b8:	4605      	mov	r5, r0

    // check for display option after point
    if (afterpoint != 0) {
 80020ba:	b36e      	cbz	r6, 8002118 <ftoa+0x80>
        res[i] = '.'; // add dot
 80020bc:	232e      	movs	r3, #46	; 0x2e
 80020be:	5423      	strb	r3, [r4, r0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 80020c0:	4630      	mov	r0, r6
 80020c2:	f7fe f9e7 	bl	8000494 <__aeabi_i2d>
 80020c6:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002120 <ftoa+0x88>
 80020ca:	ec41 0b11 	vmov	d1, r0, r1
 80020ce:	f000 faaf 	bl	8002630 <pow>
    float fpart = n - (float)ipart;
 80020d2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
        fpart = fpart * pow(10, afterpoint);
 80020d6:	ec53 2b10 	vmov	r2, r3, d0
 80020da:	ee78 7ac8 	vsub.f32	s15, s17, s16
 80020de:	e9cd 2300 	strd	r2, r3, [sp]
 80020e2:	ee17 0a90 	vmov	r0, s15
 80020e6:	f7fe f9e7 	bl	80004b8 <__aeabi_f2d>
 80020ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80020ee:	f7fe fa37 	bl	8000560 <__aeabi_dmul>
 80020f2:	f7fe fce5 	bl	8000ac0 <__aeabi_d2f>

        intToStr((int)fpart, res + i + 1, afterpoint);
 80020f6:	ee07 0a90 	vmov	s15, r0
 80020fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020fe:	3501      	adds	r5, #1
 8002100:	442c      	add	r4, r5
 8002102:	ee17 0a90 	vmov	r0, s15
 8002106:	4632      	mov	r2, r6
 8002108:	4621      	mov	r1, r4
    }
}
 800210a:	b002      	add	sp, #8
 800210c:	ecbd 8b02 	vpop	{d8}
 8002110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        intToStr((int)fpart, res + i + 1, afterpoint);
 8002114:	f7ff bf9e 	b.w	8002054 <intToStr>
}
 8002118:	b002      	add	sp, #8
 800211a:	ecbd 8b02 	vpop	{d8}
 800211e:	bd70      	pop	{r4, r5, r6, pc}
 8002120:	00000000 	.word	0x00000000
 8002124:	40240000 	.word	0x40240000

08002128 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b538      	push	{r3, r4, r5, lr}


	HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);


	HAL_ADC_Start(&hadc1);
 800212a:	4c13      	ldr	r4, [pc, #76]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x50>)
	HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);
 800212c:	4813      	ldr	r0, [pc, #76]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x54>)
	//HAL_ADC_Start(&hadc2);

	HAL_ADC_PollForConversion(&hadc1,1);
	ADC_DATA1=HAL_ADC_GetValue(&hadc1);
 800212e:	4d14      	ldr	r5, [pc, #80]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x58>)
	HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);
 8002130:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002134:	f7ff fa86 	bl	8001644 <HAL_GPIO_TogglePin>
	HAL_ADC_Start(&hadc1);
 8002138:	4620      	mov	r0, r4
 800213a:	f7fe ffa3 	bl	8001084 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1);
 800213e:	2101      	movs	r1, #1
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff f833 	bl	80011ac <HAL_ADC_PollForConversion>
	ADC_DATA1=HAL_ADC_GetValue(&hadc1);
 8002146:	4620      	mov	r0, r4
 8002148:	f7ff f880 	bl	800124c <HAL_ADC_GetValue>
 800214c:	8028      	strh	r0, [r5, #0]

	/*HAL_ADC_PollForConversion(&hadc2,1);
	ADC_DATA2=HAL_ADC_GetValue(&hadc2);*/


	HAL_ADC_Stop(&hadc1);
 800214e:	4620      	mov	r0, r4
 8002150:	f7ff f80e 	bl	8001170 <HAL_ADC_Stop>
	/*HAL_ADC_Stop(&hadc2);*/


	channel_voltage=(ADC_DATA1*(float)2.92)/4095;
 8002154:	882b      	ldrh	r3, [r5, #0]
 8002156:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002184 <HAL_TIM_PeriodElapsedCallback+0x5c>
 800215a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002188 <HAL_TIM_PeriodElapsedCallback+0x60>
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002170:	ed83 7a00 	vstr	s14, [r3]
 8002174:	bd38      	pop	{r3, r4, r5, pc}
 8002176:	bf00      	nop
 8002178:	200000e4 	.word	0x200000e4
 800217c:	40021800 	.word	0x40021800
 8002180:	20000094 	.word	0x20000094
 8002184:	403ae148 	.word	0x403ae148
 8002188:	457ff000 	.word	0x457ff000
 800218c:	2000016c 	.word	0x2000016c

08002190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002190:	b530      	push	{r4, r5, lr}
 8002192:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002194:	2230      	movs	r2, #48	; 0x30
 8002196:	2100      	movs	r1, #0
 8002198:	a808      	add	r0, sp, #32
 800219a:	f000 fa41 	bl	8002620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800219e:	2100      	movs	r1, #0
 80021a0:	2214      	movs	r2, #20
 80021a2:	a803      	add	r0, sp, #12
 80021a4:	f000 fa3c 	bl	8002620 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a8:	2400      	movs	r4, #0
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <SystemClock_Config+0x90>)
 80021ac:	9401      	str	r4, [sp, #4]
 80021ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c0:	4b18      	ldr	r3, [pc, #96]	; (8002224 <SystemClock_Config+0x94>)
 80021c2:	9402      	str	r4, [sp, #8]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021d2:	9302      	str	r3, [sp, #8]
 80021d4:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021d6:	2301      	movs	r3, #1
 80021d8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021de:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
 80021e4:	22b4      	movs	r2, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021e8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ea:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021ec:	2304      	movs	r3, #4
 80021ee:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80021f0:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021f2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f4:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021f6:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f8:	f7ff fa68 	bl	80016cc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021fc:	f7ff fa2a 	bl	8001654 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002200:	230f      	movs	r3, #15
 8002202:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002204:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002208:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800220a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800220c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002210:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002212:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002214:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002216:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002218:	f7ff fc2c 	bl	8001a74 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800221c:	b015      	add	sp, #84	; 0x54
 800221e:	bd30      	pop	{r4, r5, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000

08002228 <main>:
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b09c      	sub	sp, #112	; 0x70
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800222c:	2400      	movs	r4, #0
 800222e:	4e55      	ldr	r6, [pc, #340]	; (8002384 <main+0x15c>)
  hadc1.Instance = ADC1;
 8002230:	4d55      	ldr	r5, [pc, #340]	; (8002388 <main+0x160>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002232:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80023b0 <main+0x188>
  HAL_Init();
 8002236:	f7fe fe3f 	bl	8000eb8 <HAL_Init>
  SystemClock_Config();
 800223a:	f7ff ffa9 	bl	8002190 <SystemClock_Config>
  	  SystemInit();
 800223e:	f000 f953 	bl	80024e8 <SystemInit>
  	SystemCoreClockUpdate();
 8002242:	f000 f95f 	bl	8002504 <SystemCoreClockUpdate>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002246:	9401      	str	r4, [sp, #4]
 8002248:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800224a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224e:	6333      	str	r3, [r6, #48]	; 0x30
 8002250:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225a:	9402      	str	r4, [sp, #8]
 800225c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6333      	str	r3, [r6, #48]	; 0x30
 8002264:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002266:	f003 0304 	and.w	r3, r3, #4
  ADC_ChannelConfTypeDef sConfig = {0};
 800226a:	2210      	movs	r2, #16
 800226c:	4621      	mov	r1, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800226e:	9302      	str	r3, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002270:	a803      	add	r0, sp, #12
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002272:	9b02      	ldr	r3, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002274:	f000 f9d4 	bl	8002620 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002278:	4b44      	ldr	r3, [pc, #272]	; (800238c <main+0x164>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800227a:	60ac      	str	r4, [r5, #8]
  hadc1.Init.NbrOfConversion = 1;
 800227c:	2701      	movs	r7, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800227e:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002282:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002284:	e885 0208 	stmia.w	r5, {r3, r9}
  hadc1.Init.ScanConvMode = DISABLE;
 8002288:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800228a:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800228c:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002290:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002292:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002294:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002298:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 1;
 800229c:	61ef      	str	r7, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800229e:	616f      	str	r7, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022a0:	f7fe fe4a 	bl	8000f38 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_10;
 80022a4:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022a6:	a903      	add	r1, sp, #12
 80022a8:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_10;
 80022aa:	9303      	str	r3, [sp, #12]
  hadc2.Instance = ADC2;
 80022ac:	4d38      	ldr	r5, [pc, #224]	; (8002390 <main+0x168>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022ae:	9405      	str	r4, [sp, #20]
  sConfig.Rank = 1;
 80022b0:	9704      	str	r7, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022b2:	f7fe ffcf 	bl	8001254 <HAL_ADC_ConfigChannel>
  ADC_ChannelConfTypeDef sConfig = {0};
 80022b6:	2210      	movs	r2, #16
 80022b8:	4621      	mov	r1, r4
 80022ba:	a803      	add	r0, sp, #12
 80022bc:	f000 f9b0 	bl	8002620 <memset>
  hadc2.Instance = ADC2;
 80022c0:	4b34      	ldr	r3, [pc, #208]	; (8002394 <main+0x16c>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80022c2:	60ac      	str	r4, [r5, #8]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80022c4:	4628      	mov	r0, r5
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022c6:	e885 0208 	stmia.w	r5, {r3, r9}
  hadc2.Init.ScanConvMode = DISABLE;
 80022ca:	612c      	str	r4, [r5, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80022cc:	762c      	strb	r4, [r5, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80022ce:	f885 4020 	strb.w	r4, [r5, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022d2:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022d4:	60ec      	str	r4, [r5, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80022d6:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022da:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  hadc2.Init.NbrOfConversion = 1;
 80022de:	61ef      	str	r7, [r5, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022e0:	616f      	str	r7, [r5, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80022e2:	f7fe fe29 	bl	8000f38 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_11;
 80022e6:	230b      	movs	r3, #11
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022e8:	a903      	add	r1, sp, #12
 80022ea:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_11;
 80022ec:	9303      	str	r3, [sp, #12]
  htim6.Instance = TIM6;
 80022ee:	4d2a      	ldr	r5, [pc, #168]	; (8002398 <main+0x170>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022f0:	9405      	str	r4, [sp, #20]
  sConfig.Rank = 1;
 80022f2:	9704      	str	r7, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022f4:	f7fe ffae 	bl	8001254 <HAL_ADC_ConfigChannel>
  htim6.Init.Prescaler = 90000;
 80022f8:	4a28      	ldr	r2, [pc, #160]	; (800239c <main+0x174>)
 80022fa:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <main+0x178>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fc:	9403      	str	r4, [sp, #12]
  htim6.Init.Prescaler = 90000;
 80022fe:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002302:	4628      	mov	r0, r5
  htim6.Init.Period = 4-1;
 8002304:	2303      	movs	r3, #3
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002306:	9404      	str	r4, [sp, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002308:	60ac      	str	r4, [r5, #8]
  htim6.Init.Period = 4-1;
 800230a:	60eb      	str	r3, [r5, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800230e:	f7ff fd69 	bl	8001de4 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002312:	a903      	add	r1, sp, #12
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002314:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002316:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002318:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231a:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800231c:	f7ff fd7c 	bl	8001e18 <HAL_TIMEx_MasterConfigSynchronization>
  SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOGEN);
 8002320:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIOG->MODER|=GPIO_MODER_MODER14_0;
 8002322:	4a20      	ldr	r2, [pc, #128]	; (80023a4 <main+0x17c>)
	  	  ftoa(channel_voltage, res, 4);
 8002324:	4c20      	ldr	r4, [pc, #128]	; (80023a8 <main+0x180>)
  SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOGEN);
 8002326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800232a:	6333      	str	r3, [r6, #48]	; 0x30
  GPIOG->MODER|=GPIO_MODER_MODER14_0;
 800232c:	6813      	ldr	r3, [r2, #0]
 800232e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002332:	6013      	str	r3, [r2, #0]
  	SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOEEN);
 8002334:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002336:	f043 0310 	orr.w	r3, r3, #16
 800233a:	6333      	str	r3, [r6, #48]	; 0x30
  	SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIODEN);
 800233c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800233e:	f043 0308 	orr.w	r3, r3, #8
 8002342:	6333      	str	r3, [r6, #48]	; 0x30
  	GPIOE->MODER =GPIO_MODER_MODER0_0|GPIO_MODER_MODER1_0;
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <main+0x184>)
 8002346:	2205      	movs	r2, #5
 8002348:	601a      	str	r2, [r3, #0]
  	GPIOD->MODER =GPIO_MODER_MODER0_0|GPIO_MODER_MODER1_0|GPIO_MODER_MODER2_0|GPIO_MODER_MODER3_0;
 800234a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800234e:	2255      	movs	r2, #85	; 0x55
 8002350:	601a      	str	r2, [r3, #0]
  	LCD_Init();
 8002352:	f7ff fddb 	bl	8001f0c <LCD_Init>
  	LCD_Clear();
 8002356:	f7ff fe4b 	bl	8001ff0 <LCD_Clear>
  HAL_TIM_Base_Start_IT(&htim6);
 800235a:	4628      	mov	r0, r5
 800235c:	f7ff fc26 	bl	8001bac <HAL_TIM_Base_Start_IT>
	  	  ftoa(channel_voltage, res, 4);
 8002360:	a803      	add	r0, sp, #12
 8002362:	ed94 0a00 	vldr	s0, [r4]
 8002366:	2104      	movs	r1, #4
 8002368:	f7ff fe96 	bl	8002098 <ftoa>
	  	  LCD_Clear();
 800236c:	f7ff fe40 	bl	8001ff0 <LCD_Clear>
	  	  LCD_OutString(res,2);
 8002370:	a803      	add	r0, sp, #12
 8002372:	2102      	movs	r1, #2
 8002374:	f7ff fe4b 	bl	800200e <LCD_OutString>
	  	 HAL_Delay(2000);
 8002378:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800237c:	f7fe fdc8 	bl	8000f10 <HAL_Delay>
 8002380:	e7ee      	b.n	8002360 <main+0x138>
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	200000e4 	.word	0x200000e4
 800238c:	40012000 	.word	0x40012000
 8002390:	20000098 	.word	0x20000098
 8002394:	40012100 	.word	0x40012100
 8002398:	2000012c 	.word	0x2000012c
 800239c:	40001000 	.word	0x40001000
 80023a0:	00015f90 	.word	0x00015f90
 80023a4:	40021800 	.word	0x40021800
 80023a8:	2000016c 	.word	0x2000016c
 80023ac:	40021000 	.word	0x40021000
 80023b0:	0f000001 	.word	0x0f000001

080023b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_MspInit+0x34>)
 80023b8:	2100      	movs	r1, #0
 80023ba:	9100      	str	r1, [sp, #0]
 80023bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44
 80023c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023c6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80023ca:	9200      	str	r2, [sp, #0]
 80023cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	9101      	str	r1, [sp, #4]
 80023d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e2:	b002      	add	sp, #8
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023ec:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ee:	2214      	movs	r2, #20
{
 80023f0:	b08a      	sub	sp, #40	; 0x28
 80023f2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	2100      	movs	r1, #0
 80023f6:	eb0d 0002 	add.w	r0, sp, r2
 80023fa:	f000 f911 	bl	8002620 <memset>
  if(hadc->Instance==ADC1)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_ADC_MspInit+0x90>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d11f      	bne.n	8002446 <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002406:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <HAL_ADC_MspInit+0x94>)
 8002408:	2100      	movs	r1, #0
 800240a:	9101      	str	r1, [sp, #4]
 800240c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800240e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002412:	645a      	str	r2, [r3, #68]	; 0x44
 8002414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002416:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800241a:	9201      	str	r2, [sp, #4]
 800241c:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800241e:	9102      	str	r1, [sp, #8]
 8002420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002422:	f042 0204 	orr.w	r2, r2, #4
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	9b02      	ldr	r3, [sp, #8]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002432:	2301      	movs	r3, #1
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
    /**ADC2 GPIO Configuration    
    PC1     ------> ADC2_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002434:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002436:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002438:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800243a:	4812      	ldr	r0, [pc, #72]	; (8002484 <HAL_ADC_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800243e:	f7ff f815 	bl	800146c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002442:	b00a      	add	sp, #40	; 0x28
 8002444:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 8002446:	4a10      	ldr	r2, [pc, #64]	; (8002488 <HAL_ADC_MspInit+0x9c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d1fa      	bne.n	8002442 <HAL_ADC_MspInit+0x56>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <HAL_ADC_MspInit+0x94>)
 800244e:	2100      	movs	r1, #0
 8002450:	9103      	str	r1, [sp, #12]
 8002452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002458:	645a      	str	r2, [r3, #68]	; 0x44
 800245a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800245c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002460:	9203      	str	r2, [sp, #12]
 8002462:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002464:	9104      	str	r1, [sp, #16]
 8002466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002468:	f042 0204 	orr.w	r2, r2, #4
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	9304      	str	r3, [sp, #16]
 8002476:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002478:	2302      	movs	r3, #2
 800247a:	e7db      	b.n	8002434 <HAL_ADC_MspInit+0x48>
 800247c:	40012000 	.word	0x40012000
 8002480:	40023800 	.word	0x40023800
 8002484:	40020800 	.word	0x40020800
 8002488:	40012100 	.word	0x40012100

0800248c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800248c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM6)
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <HAL_TIM_Base_MspInit+0x38>)
 8002490:	6802      	ldr	r2, [r0, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d113      	bne.n	80024be <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002496:	2200      	movs	r2, #0
 8002498:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 800249c:	9201      	str	r2, [sp, #4]
 800249e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80024a0:	f041 0110 	orr.w	r1, r1, #16
 80024a4:	6419      	str	r1, [r3, #64]	; 0x40
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	9301      	str	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80024ae:	2036      	movs	r0, #54	; 0x36
 80024b0:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024b2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80024b4:	f7fe ff82 	bl	80013bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024b8:	2036      	movs	r0, #54	; 0x36
 80024ba:	f7fe ffb3 	bl	8001424 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80024be:	b003      	add	sp, #12
 80024c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c4:	40001000 	.word	0x40001000

080024c8 <NMI_Handler>:
 80024c8:	4770      	bx	lr

080024ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ca:	e7fe      	b.n	80024ca <HardFault_Handler>

080024cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024cc:	e7fe      	b.n	80024cc <MemManage_Handler>

080024ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ce:	e7fe      	b.n	80024ce <BusFault_Handler>

080024d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d0:	e7fe      	b.n	80024d0 <UsageFault_Handler>

080024d2 <SVC_Handler>:
 80024d2:	4770      	bx	lr

080024d4 <DebugMon_Handler>:
 80024d4:	4770      	bx	lr

080024d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d6:	4770      	bx	lr

080024d8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d8:	f7fe bd08 	b.w	8000eec <HAL_IncTick>

080024dc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024dc:	4801      	ldr	r0, [pc, #4]	; (80024e4 <TIM6_DAC_IRQHandler+0x8>)
 80024de:	f7ff bb79 	b.w	8001bd4 <HAL_TIM_IRQHandler>
 80024e2:	bf00      	nop
 80024e4:	2000012c 	.word	0x2000012c

080024e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SystemInit+0x18>)
 80024ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024ee:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80024f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002504:	4a17      	ldr	r2, [pc, #92]	; (8002564 <SystemCoreClockUpdate+0x60>)
 8002506:	4918      	ldr	r1, [pc, #96]	; (8002568 <SystemCoreClockUpdate+0x64>)
 8002508:	6893      	ldr	r3, [r2, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 800250e:	2b04      	cmp	r3, #4
{
 8002510:	b510      	push	{r4, lr}
  switch (tmp)
 8002512:	d00d      	beq.n	8002530 <SystemCoreClockUpdate+0x2c>
 8002514:	2b08      	cmp	r3, #8
 8002516:	d00d      	beq.n	8002534 <SystemCoreClockUpdate+0x30>
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <SystemCoreClockUpdate+0x68>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 800251a:	600b      	str	r3, [r1, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <SystemCoreClockUpdate+0x60>)
 800251e:	4a14      	ldr	r2, [pc, #80]	; (8002570 <SystemCoreClockUpdate+0x6c>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002526:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002528:	680b      	ldr	r3, [r1, #0]
 800252a:	40d3      	lsrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
 800252e:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <SystemCoreClockUpdate+0x70>)
 8002532:	e7f2      	b.n	800251a <SystemCoreClockUpdate+0x16>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002534:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002536:	6850      	ldr	r0, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002538:	6852      	ldr	r2, [r2, #4]
      if (pllsource != 0)
 800253a:	0263      	lsls	r3, r4, #9
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800253c:	f3c2 1288 	ubfx	r2, r2, #6, #9
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002540:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002544:	bf4c      	ite	mi
 8002546:	4b0b      	ldrmi	r3, [pc, #44]	; (8002574 <SystemCoreClockUpdate+0x70>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002548:	4b08      	ldrpl	r3, [pc, #32]	; (800256c <SystemCoreClockUpdate+0x68>)
 800254a:	fbb3 f3f0 	udiv	r3, r3, r0
 800254e:	4353      	muls	r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <SystemCoreClockUpdate+0x60>)
 8002552:	6852      	ldr	r2, [r2, #4]
 8002554:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8002558:	3201      	adds	r2, #1
 800255a:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 800255c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002560:	e7db      	b.n	800251a <SystemCoreClockUpdate+0x16>
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	20000008 	.word	0x20000008
 800256c:	00f42400 	.word	0x00f42400
 8002570:	08003710 	.word	0x08003710
 8002574:	007a1200 	.word	0x007a1200

08002578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800257c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800257e:	e003      	b.n	8002588 <LoopCopyDataInit>

08002580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002586:	3104      	adds	r1, #4

08002588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002588:	480b      	ldr	r0, [pc, #44]	; (80025b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800258c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800258e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002590:	d3f6      	bcc.n	8002580 <CopyDataInit>
  ldr  r2, =_sbss
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002594:	e002      	b.n	800259c <LoopFillZerobss>

08002596 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002598:	f842 3b04 	str.w	r3, [r2], #4

0800259c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800259e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025a0:	d3f9      	bcc.n	8002596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025a2:	f7ff ffa1 	bl	80024e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a6:	f000 f817 	bl	80025d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025aa:	f7ff fe3d 	bl	8002228 <main>
  bx  lr    
 80025ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025b0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80025b4:	08003778 	.word	0x08003778
  ldr  r0, =_sdata
 80025b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025bc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80025c0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80025c4:	20000170 	.word	0x20000170

080025c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC_IRQHandler>
	...

080025cc <__errno>:
 80025cc:	4b01      	ldr	r3, [pc, #4]	; (80025d4 <__errno+0x8>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	2000000c 	.word	0x2000000c

080025d8 <__libc_init_array>:
 80025d8:	b570      	push	{r4, r5, r6, lr}
 80025da:	4e0d      	ldr	r6, [pc, #52]	; (8002610 <__libc_init_array+0x38>)
 80025dc:	4c0d      	ldr	r4, [pc, #52]	; (8002614 <__libc_init_array+0x3c>)
 80025de:	1ba4      	subs	r4, r4, r6
 80025e0:	10a4      	asrs	r4, r4, #2
 80025e2:	2500      	movs	r5, #0
 80025e4:	42a5      	cmp	r5, r4
 80025e6:	d109      	bne.n	80025fc <__libc_init_array+0x24>
 80025e8:	4e0b      	ldr	r6, [pc, #44]	; (8002618 <__libc_init_array+0x40>)
 80025ea:	4c0c      	ldr	r4, [pc, #48]	; (800261c <__libc_init_array+0x44>)
 80025ec:	f001 f884 	bl	80036f8 <_init>
 80025f0:	1ba4      	subs	r4, r4, r6
 80025f2:	10a4      	asrs	r4, r4, #2
 80025f4:	2500      	movs	r5, #0
 80025f6:	42a5      	cmp	r5, r4
 80025f8:	d105      	bne.n	8002606 <__libc_init_array+0x2e>
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
 80025fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002600:	4798      	blx	r3
 8002602:	3501      	adds	r5, #1
 8002604:	e7ee      	b.n	80025e4 <__libc_init_array+0xc>
 8002606:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800260a:	4798      	blx	r3
 800260c:	3501      	adds	r5, #1
 800260e:	e7f2      	b.n	80025f6 <__libc_init_array+0x1e>
 8002610:	08003770 	.word	0x08003770
 8002614:	08003770 	.word	0x08003770
 8002618:	08003770 	.word	0x08003770
 800261c:	08003774 	.word	0x08003774

08002620 <memset>:
 8002620:	4402      	add	r2, r0
 8002622:	4603      	mov	r3, r0
 8002624:	4293      	cmp	r3, r2
 8002626:	d100      	bne.n	800262a <memset+0xa>
 8002628:	4770      	bx	lr
 800262a:	f803 1b01 	strb.w	r1, [r3], #1
 800262e:	e7f9      	b.n	8002624 <memset+0x4>

08002630 <pow>:
 8002630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002634:	ed2d 8b04 	vpush	{d8-d9}
 8002638:	b08d      	sub	sp, #52	; 0x34
 800263a:	ec57 6b10 	vmov	r6, r7, d0
 800263e:	ec55 4b11 	vmov	r4, r5, d1
 8002642:	f000 f96d 	bl	8002920 <__ieee754_pow>
 8002646:	4bae      	ldr	r3, [pc, #696]	; (8002900 <pow+0x2d0>)
 8002648:	eeb0 8a40 	vmov.f32	s16, s0
 800264c:	eef0 8a60 	vmov.f32	s17, s1
 8002650:	f993 9000 	ldrsb.w	r9, [r3]
 8002654:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002658:	4698      	mov	r8, r3
 800265a:	d05f      	beq.n	800271c <pow+0xec>
 800265c:	4622      	mov	r2, r4
 800265e:	462b      	mov	r3, r5
 8002660:	4620      	mov	r0, r4
 8002662:	4629      	mov	r1, r5
 8002664:	f7fe fa16 	bl	8000a94 <__aeabi_dcmpun>
 8002668:	4683      	mov	fp, r0
 800266a:	2800      	cmp	r0, #0
 800266c:	d156      	bne.n	800271c <pow+0xec>
 800266e:	4632      	mov	r2, r6
 8002670:	463b      	mov	r3, r7
 8002672:	4630      	mov	r0, r6
 8002674:	4639      	mov	r1, r7
 8002676:	f7fe fa0d 	bl	8000a94 <__aeabi_dcmpun>
 800267a:	9001      	str	r0, [sp, #4]
 800267c:	b1e8      	cbz	r0, 80026ba <pow+0x8a>
 800267e:	2200      	movs	r2, #0
 8002680:	2300      	movs	r3, #0
 8002682:	4620      	mov	r0, r4
 8002684:	4629      	mov	r1, r5
 8002686:	f7fe f9d3 	bl	8000a30 <__aeabi_dcmpeq>
 800268a:	2800      	cmp	r0, #0
 800268c:	d046      	beq.n	800271c <pow+0xec>
 800268e:	2301      	movs	r3, #1
 8002690:	9302      	str	r3, [sp, #8]
 8002692:	4b9c      	ldr	r3, [pc, #624]	; (8002904 <pow+0x2d4>)
 8002694:	9303      	str	r3, [sp, #12]
 8002696:	4b9c      	ldr	r3, [pc, #624]	; (8002908 <pow+0x2d8>)
 8002698:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800269c:	2200      	movs	r2, #0
 800269e:	f1b9 0f02 	cmp.w	r9, #2
 80026a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80026a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80026aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80026ae:	d033      	beq.n	8002718 <pow+0xe8>
 80026b0:	a802      	add	r0, sp, #8
 80026b2:	f000 ff06 	bl	80034c2 <matherr>
 80026b6:	bb48      	cbnz	r0, 800270c <pow+0xdc>
 80026b8:	e05e      	b.n	8002778 <pow+0x148>
 80026ba:	f04f 0a00 	mov.w	sl, #0
 80026be:	f04f 0b00 	mov.w	fp, #0
 80026c2:	4652      	mov	r2, sl
 80026c4:	465b      	mov	r3, fp
 80026c6:	4630      	mov	r0, r6
 80026c8:	4639      	mov	r1, r7
 80026ca:	f7fe f9b1 	bl	8000a30 <__aeabi_dcmpeq>
 80026ce:	ec4b ab19 	vmov	d9, sl, fp
 80026d2:	2800      	cmp	r0, #0
 80026d4:	d055      	beq.n	8002782 <pow+0x152>
 80026d6:	4652      	mov	r2, sl
 80026d8:	465b      	mov	r3, fp
 80026da:	4620      	mov	r0, r4
 80026dc:	4629      	mov	r1, r5
 80026de:	f7fe f9a7 	bl	8000a30 <__aeabi_dcmpeq>
 80026e2:	4680      	mov	r8, r0
 80026e4:	b318      	cbz	r0, 800272e <pow+0xfe>
 80026e6:	2301      	movs	r3, #1
 80026e8:	9302      	str	r3, [sp, #8]
 80026ea:	4b86      	ldr	r3, [pc, #536]	; (8002904 <pow+0x2d4>)
 80026ec:	9303      	str	r3, [sp, #12]
 80026ee:	9b01      	ldr	r3, [sp, #4]
 80026f0:	930a      	str	r3, [sp, #40]	; 0x28
 80026f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80026f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80026fa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80026fe:	f1b9 0f00 	cmp.w	r9, #0
 8002702:	d0d5      	beq.n	80026b0 <pow+0x80>
 8002704:	4b80      	ldr	r3, [pc, #512]	; (8002908 <pow+0x2d8>)
 8002706:	2200      	movs	r2, #0
 8002708:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800270c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800270e:	b11b      	cbz	r3, 8002718 <pow+0xe8>
 8002710:	f7ff ff5c 	bl	80025cc <__errno>
 8002714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002716:	6003      	str	r3, [r0, #0]
 8002718:	ed9d 8b08 	vldr	d8, [sp, #32]
 800271c:	eeb0 0a48 	vmov.f32	s0, s16
 8002720:	eef0 0a68 	vmov.f32	s1, s17
 8002724:	b00d      	add	sp, #52	; 0x34
 8002726:	ecbd 8b04 	vpop	{d8-d9}
 800272a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800272e:	ec45 4b10 	vmov	d0, r4, r5
 8002732:	f000 febe 	bl	80034b2 <finite>
 8002736:	2800      	cmp	r0, #0
 8002738:	d0f0      	beq.n	800271c <pow+0xec>
 800273a:	4652      	mov	r2, sl
 800273c:	465b      	mov	r3, fp
 800273e:	4620      	mov	r0, r4
 8002740:	4629      	mov	r1, r5
 8002742:	f7fe f97f 	bl	8000a44 <__aeabi_dcmplt>
 8002746:	2800      	cmp	r0, #0
 8002748:	d0e8      	beq.n	800271c <pow+0xec>
 800274a:	2301      	movs	r3, #1
 800274c:	9302      	str	r3, [sp, #8]
 800274e:	4b6d      	ldr	r3, [pc, #436]	; (8002904 <pow+0x2d4>)
 8002750:	9303      	str	r3, [sp, #12]
 8002752:	4b6b      	ldr	r3, [pc, #428]	; (8002900 <pow+0x2d0>)
 8002754:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8002758:	f993 3000 	ldrsb.w	r3, [r3]
 800275c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002760:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002764:	b913      	cbnz	r3, 800276c <pow+0x13c>
 8002766:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800276a:	e7a1      	b.n	80026b0 <pow+0x80>
 800276c:	4967      	ldr	r1, [pc, #412]	; (800290c <pow+0x2dc>)
 800276e:	2000      	movs	r0, #0
 8002770:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d19b      	bne.n	80026b0 <pow+0x80>
 8002778:	f7ff ff28 	bl	80025cc <__errno>
 800277c:	2321      	movs	r3, #33	; 0x21
 800277e:	6003      	str	r3, [r0, #0]
 8002780:	e7c4      	b.n	800270c <pow+0xdc>
 8002782:	eeb0 0a48 	vmov.f32	s0, s16
 8002786:	eef0 0a68 	vmov.f32	s1, s17
 800278a:	f000 fe92 	bl	80034b2 <finite>
 800278e:	9001      	str	r0, [sp, #4]
 8002790:	2800      	cmp	r0, #0
 8002792:	f040 808a 	bne.w	80028aa <pow+0x27a>
 8002796:	ec47 6b10 	vmov	d0, r6, r7
 800279a:	f000 fe8a 	bl	80034b2 <finite>
 800279e:	2800      	cmp	r0, #0
 80027a0:	f000 8083 	beq.w	80028aa <pow+0x27a>
 80027a4:	ec45 4b10 	vmov	d0, r4, r5
 80027a8:	f000 fe83 	bl	80034b2 <finite>
 80027ac:	2800      	cmp	r0, #0
 80027ae:	d07c      	beq.n	80028aa <pow+0x27a>
 80027b0:	ec53 2b18 	vmov	r2, r3, d8
 80027b4:	ee18 0a10 	vmov	r0, s16
 80027b8:	4619      	mov	r1, r3
 80027ba:	f7fe f96b 	bl	8000a94 <__aeabi_dcmpun>
 80027be:	f998 9000 	ldrsb.w	r9, [r8]
 80027c2:	4b50      	ldr	r3, [pc, #320]	; (8002904 <pow+0x2d4>)
 80027c4:	b1b0      	cbz	r0, 80027f4 <pow+0x1c4>
 80027c6:	2201      	movs	r2, #1
 80027c8:	9303      	str	r3, [sp, #12]
 80027ca:	9b01      	ldr	r3, [sp, #4]
 80027cc:	9202      	str	r2, [sp, #8]
 80027ce:	930a      	str	r3, [sp, #40]	; 0x28
 80027d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80027d4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80027d8:	f1b9 0f00 	cmp.w	r9, #0
 80027dc:	d0c3      	beq.n	8002766 <pow+0x136>
 80027de:	4652      	mov	r2, sl
 80027e0:	465b      	mov	r3, fp
 80027e2:	4650      	mov	r0, sl
 80027e4:	4659      	mov	r1, fp
 80027e6:	f7fd ffe5 	bl	80007b4 <__aeabi_ddiv>
 80027ea:	f1b9 0f02 	cmp.w	r9, #2
 80027ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80027f2:	e7c0      	b.n	8002776 <pow+0x146>
 80027f4:	2203      	movs	r2, #3
 80027f6:	9202      	str	r2, [sp, #8]
 80027f8:	9303      	str	r3, [sp, #12]
 80027fa:	900a      	str	r0, [sp, #40]	; 0x28
 80027fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002800:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002804:	f1b9 0f00 	cmp.w	r9, #0
 8002808:	d12c      	bne.n	8002864 <pow+0x234>
 800280a:	4b41      	ldr	r3, [pc, #260]	; (8002910 <pow+0x2e0>)
 800280c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002810:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002814:	4630      	mov	r0, r6
 8002816:	4652      	mov	r2, sl
 8002818:	465b      	mov	r3, fp
 800281a:	4639      	mov	r1, r7
 800281c:	f7fe f912 	bl	8000a44 <__aeabi_dcmplt>
 8002820:	2800      	cmp	r0, #0
 8002822:	d066      	beq.n	80028f2 <pow+0x2c2>
 8002824:	2200      	movs	r2, #0
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <pow+0x2e4>)
 8002828:	4620      	mov	r0, r4
 800282a:	4629      	mov	r1, r5
 800282c:	f7fd fe98 	bl	8000560 <__aeabi_dmul>
 8002830:	4604      	mov	r4, r0
 8002832:	460d      	mov	r5, r1
 8002834:	ec45 4b10 	vmov	d0, r4, r5
 8002838:	f000 fe4e 	bl	80034d8 <rint>
 800283c:	4620      	mov	r0, r4
 800283e:	ec53 2b10 	vmov	r2, r3, d0
 8002842:	4629      	mov	r1, r5
 8002844:	f7fe f8f4 	bl	8000a30 <__aeabi_dcmpeq>
 8002848:	b920      	cbnz	r0, 8002854 <pow+0x224>
 800284a:	4b33      	ldr	r3, [pc, #204]	; (8002918 <pow+0x2e8>)
 800284c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002850:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002854:	f998 3000 	ldrsb.w	r3, [r8]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d14a      	bne.n	80028f2 <pow+0x2c2>
 800285c:	f7ff feb6 	bl	80025cc <__errno>
 8002860:	2322      	movs	r3, #34	; 0x22
 8002862:	e78c      	b.n	800277e <pow+0x14e>
 8002864:	4b2d      	ldr	r3, [pc, #180]	; (800291c <pow+0x2ec>)
 8002866:	2200      	movs	r2, #0
 8002868:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800286c:	4630      	mov	r0, r6
 800286e:	4652      	mov	r2, sl
 8002870:	465b      	mov	r3, fp
 8002872:	4639      	mov	r1, r7
 8002874:	f7fe f8e6 	bl	8000a44 <__aeabi_dcmplt>
 8002878:	2800      	cmp	r0, #0
 800287a:	d0eb      	beq.n	8002854 <pow+0x224>
 800287c:	2200      	movs	r2, #0
 800287e:	4b25      	ldr	r3, [pc, #148]	; (8002914 <pow+0x2e4>)
 8002880:	4620      	mov	r0, r4
 8002882:	4629      	mov	r1, r5
 8002884:	f7fd fe6c 	bl	8000560 <__aeabi_dmul>
 8002888:	4604      	mov	r4, r0
 800288a:	460d      	mov	r5, r1
 800288c:	ec45 4b10 	vmov	d0, r4, r5
 8002890:	f000 fe22 	bl	80034d8 <rint>
 8002894:	4620      	mov	r0, r4
 8002896:	ec53 2b10 	vmov	r2, r3, d0
 800289a:	4629      	mov	r1, r5
 800289c:	f7fe f8c8 	bl	8000a30 <__aeabi_dcmpeq>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d1d7      	bne.n	8002854 <pow+0x224>
 80028a4:	2200      	movs	r2, #0
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <pow+0x2dc>)
 80028a8:	e7d2      	b.n	8002850 <pow+0x220>
 80028aa:	2200      	movs	r2, #0
 80028ac:	2300      	movs	r3, #0
 80028ae:	ec51 0b18 	vmov	r0, r1, d8
 80028b2:	f7fe f8bd 	bl	8000a30 <__aeabi_dcmpeq>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	f43f af30 	beq.w	800271c <pow+0xec>
 80028bc:	ec47 6b10 	vmov	d0, r6, r7
 80028c0:	f000 fdf7 	bl	80034b2 <finite>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	f43f af29 	beq.w	800271c <pow+0xec>
 80028ca:	ec45 4b10 	vmov	d0, r4, r5
 80028ce:	f000 fdf0 	bl	80034b2 <finite>
 80028d2:	2800      	cmp	r0, #0
 80028d4:	f43f af22 	beq.w	800271c <pow+0xec>
 80028d8:	2304      	movs	r3, #4
 80028da:	9302      	str	r3, [sp, #8]
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <pow+0x2d4>)
 80028de:	9303      	str	r3, [sp, #12]
 80028e0:	2300      	movs	r3, #0
 80028e2:	930a      	str	r3, [sp, #40]	; 0x28
 80028e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80028e8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80028ec:	ed8d 9b08 	vstr	d9, [sp, #32]
 80028f0:	e7b0      	b.n	8002854 <pow+0x224>
 80028f2:	a802      	add	r0, sp, #8
 80028f4:	f000 fde5 	bl	80034c2 <matherr>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	f47f af07 	bne.w	800270c <pow+0xdc>
 80028fe:	e7ad      	b.n	800285c <pow+0x22c>
 8002900:	20000070 	.word	0x20000070
 8002904:	08003720 	.word	0x08003720
 8002908:	3ff00000 	.word	0x3ff00000
 800290c:	fff00000 	.word	0xfff00000
 8002910:	47efffff 	.word	0x47efffff
 8002914:	3fe00000 	.word	0x3fe00000
 8002918:	c7efffff 	.word	0xc7efffff
 800291c:	7ff00000 	.word	0x7ff00000

08002920 <__ieee754_pow>:
 8002920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002924:	b091      	sub	sp, #68	; 0x44
 8002926:	ed8d 1b00 	vstr	d1, [sp]
 800292a:	e89d 0204 	ldmia.w	sp, {r2, r9}
 800292e:	ec57 6b10 	vmov	r6, r7, d0
 8002932:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8002936:	ea58 0302 	orrs.w	r3, r8, r2
 800293a:	ee10 aa10 	vmov	sl, s0
 800293e:	463d      	mov	r5, r7
 8002940:	f000 84bd 	beq.w	80032be <__ieee754_pow+0x99e>
 8002944:	4b78      	ldr	r3, [pc, #480]	; (8002b28 <__ieee754_pow+0x208>)
 8002946:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800294a:	429c      	cmp	r4, r3
 800294c:	dc09      	bgt.n	8002962 <__ieee754_pow+0x42>
 800294e:	d103      	bne.n	8002958 <__ieee754_pow+0x38>
 8002950:	b93e      	cbnz	r6, 8002962 <__ieee754_pow+0x42>
 8002952:	45a0      	cmp	r8, r4
 8002954:	dc0d      	bgt.n	8002972 <__ieee754_pow+0x52>
 8002956:	e001      	b.n	800295c <__ieee754_pow+0x3c>
 8002958:	4598      	cmp	r8, r3
 800295a:	dc02      	bgt.n	8002962 <__ieee754_pow+0x42>
 800295c:	4598      	cmp	r8, r3
 800295e:	d10e      	bne.n	800297e <__ieee754_pow+0x5e>
 8002960:	b16a      	cbz	r2, 800297e <__ieee754_pow+0x5e>
 8002962:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002966:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800296a:	ea54 030a 	orrs.w	r3, r4, sl
 800296e:	f000 84a6 	beq.w	80032be <__ieee754_pow+0x99e>
 8002972:	486e      	ldr	r0, [pc, #440]	; (8002b2c <__ieee754_pow+0x20c>)
 8002974:	b011      	add	sp, #68	; 0x44
 8002976:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297a:	f000 bda5 	b.w	80034c8 <nan>
 800297e:	2d00      	cmp	r5, #0
 8002980:	da53      	bge.n	8002a2a <__ieee754_pow+0x10a>
 8002982:	4b6b      	ldr	r3, [pc, #428]	; (8002b30 <__ieee754_pow+0x210>)
 8002984:	4598      	cmp	r8, r3
 8002986:	dc4d      	bgt.n	8002a24 <__ieee754_pow+0x104>
 8002988:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800298c:	4598      	cmp	r8, r3
 800298e:	dd4c      	ble.n	8002a2a <__ieee754_pow+0x10a>
 8002990:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002994:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002998:	2b14      	cmp	r3, #20
 800299a:	dd26      	ble.n	80029ea <__ieee754_pow+0xca>
 800299c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80029a0:	fa22 f103 	lsr.w	r1, r2, r3
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d13e      	bne.n	8002a2a <__ieee754_pow+0x10a>
 80029ac:	f001 0101 	and.w	r1, r1, #1
 80029b0:	f1c1 0b02 	rsb	fp, r1, #2
 80029b4:	2a00      	cmp	r2, #0
 80029b6:	d15b      	bne.n	8002a70 <__ieee754_pow+0x150>
 80029b8:	4b5b      	ldr	r3, [pc, #364]	; (8002b28 <__ieee754_pow+0x208>)
 80029ba:	4598      	cmp	r8, r3
 80029bc:	d124      	bne.n	8002a08 <__ieee754_pow+0xe8>
 80029be:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80029c2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80029c6:	ea53 030a 	orrs.w	r3, r3, sl
 80029ca:	f000 8478 	beq.w	80032be <__ieee754_pow+0x99e>
 80029ce:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <__ieee754_pow+0x214>)
 80029d0:	429c      	cmp	r4, r3
 80029d2:	dd2d      	ble.n	8002a30 <__ieee754_pow+0x110>
 80029d4:	f1b9 0f00 	cmp.w	r9, #0
 80029d8:	f280 8475 	bge.w	80032c6 <__ieee754_pow+0x9a6>
 80029dc:	2000      	movs	r0, #0
 80029de:	2100      	movs	r1, #0
 80029e0:	ec41 0b10 	vmov	d0, r0, r1
 80029e4:	b011      	add	sp, #68	; 0x44
 80029e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ea:	2a00      	cmp	r2, #0
 80029ec:	d13e      	bne.n	8002a6c <__ieee754_pow+0x14c>
 80029ee:	f1c3 0314 	rsb	r3, r3, #20
 80029f2:	fa48 f103 	asr.w	r1, r8, r3
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	4598      	cmp	r8, r3
 80029fc:	f040 846b 	bne.w	80032d6 <__ieee754_pow+0x9b6>
 8002a00:	f001 0101 	and.w	r1, r1, #1
 8002a04:	f1c1 0b02 	rsb	fp, r1, #2
 8002a08:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <__ieee754_pow+0x218>)
 8002a0a:	4598      	cmp	r8, r3
 8002a0c:	d118      	bne.n	8002a40 <__ieee754_pow+0x120>
 8002a0e:	f1b9 0f00 	cmp.w	r9, #0
 8002a12:	f280 845c 	bge.w	80032ce <__ieee754_pow+0x9ae>
 8002a16:	4948      	ldr	r1, [pc, #288]	; (8002b38 <__ieee754_pow+0x218>)
 8002a18:	4632      	mov	r2, r6
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7fd fec9 	bl	80007b4 <__aeabi_ddiv>
 8002a22:	e7dd      	b.n	80029e0 <__ieee754_pow+0xc0>
 8002a24:	f04f 0b02 	mov.w	fp, #2
 8002a28:	e7c4      	b.n	80029b4 <__ieee754_pow+0x94>
 8002a2a:	f04f 0b00 	mov.w	fp, #0
 8002a2e:	e7c1      	b.n	80029b4 <__ieee754_pow+0x94>
 8002a30:	f1b9 0f00 	cmp.w	r9, #0
 8002a34:	dad2      	bge.n	80029dc <__ieee754_pow+0xbc>
 8002a36:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8002a3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002a3e:	e7cf      	b.n	80029e0 <__ieee754_pow+0xc0>
 8002a40:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8002a44:	d106      	bne.n	8002a54 <__ieee754_pow+0x134>
 8002a46:	4632      	mov	r2, r6
 8002a48:	463b      	mov	r3, r7
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f7fd fd87 	bl	8000560 <__aeabi_dmul>
 8002a52:	e7c5      	b.n	80029e0 <__ieee754_pow+0xc0>
 8002a54:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <__ieee754_pow+0x21c>)
 8002a56:	4599      	cmp	r9, r3
 8002a58:	d10a      	bne.n	8002a70 <__ieee754_pow+0x150>
 8002a5a:	2d00      	cmp	r5, #0
 8002a5c:	db08      	blt.n	8002a70 <__ieee754_pow+0x150>
 8002a5e:	ec47 6b10 	vmov	d0, r6, r7
 8002a62:	b011      	add	sp, #68	; 0x44
 8002a64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a68:	f000 bc6c 	b.w	8003344 <__ieee754_sqrt>
 8002a6c:	f04f 0b00 	mov.w	fp, #0
 8002a70:	ec47 6b10 	vmov	d0, r6, r7
 8002a74:	f000 fd16 	bl	80034a4 <fabs>
 8002a78:	ec51 0b10 	vmov	r0, r1, d0
 8002a7c:	f1ba 0f00 	cmp.w	sl, #0
 8002a80:	d127      	bne.n	8002ad2 <__ieee754_pow+0x1b2>
 8002a82:	b124      	cbz	r4, 8002a8e <__ieee754_pow+0x16e>
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <__ieee754_pow+0x218>)
 8002a86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d121      	bne.n	8002ad2 <__ieee754_pow+0x1b2>
 8002a8e:	f1b9 0f00 	cmp.w	r9, #0
 8002a92:	da05      	bge.n	8002aa0 <__ieee754_pow+0x180>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	2000      	movs	r0, #0
 8002a9a:	4927      	ldr	r1, [pc, #156]	; (8002b38 <__ieee754_pow+0x218>)
 8002a9c:	f7fd fe8a 	bl	80007b4 <__aeabi_ddiv>
 8002aa0:	2d00      	cmp	r5, #0
 8002aa2:	da9d      	bge.n	80029e0 <__ieee754_pow+0xc0>
 8002aa4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002aa8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002aac:	ea54 030b 	orrs.w	r3, r4, fp
 8002ab0:	d108      	bne.n	8002ac4 <__ieee754_pow+0x1a4>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f7fd fb9d 	bl	80001f8 <__aeabi_dsub>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	e7ac      	b.n	8002a1e <__ieee754_pow+0xfe>
 8002ac4:	f1bb 0f01 	cmp.w	fp, #1
 8002ac8:	d18a      	bne.n	80029e0 <__ieee754_pow+0xc0>
 8002aca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002ace:	4619      	mov	r1, r3
 8002ad0:	e786      	b.n	80029e0 <__ieee754_pow+0xc0>
 8002ad2:	0fed      	lsrs	r5, r5, #31
 8002ad4:	1e6b      	subs	r3, r5, #1
 8002ad6:	930d      	str	r3, [sp, #52]	; 0x34
 8002ad8:	ea5b 0303 	orrs.w	r3, fp, r3
 8002adc:	d102      	bne.n	8002ae4 <__ieee754_pow+0x1c4>
 8002ade:	4632      	mov	r2, r6
 8002ae0:	463b      	mov	r3, r7
 8002ae2:	e7e8      	b.n	8002ab6 <__ieee754_pow+0x196>
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <__ieee754_pow+0x220>)
 8002ae6:	4598      	cmp	r8, r3
 8002ae8:	f340 80fe 	ble.w	8002ce8 <__ieee754_pow+0x3c8>
 8002aec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002af0:	4598      	cmp	r8, r3
 8002af2:	dd0a      	ble.n	8002b0a <__ieee754_pow+0x1ea>
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <__ieee754_pow+0x214>)
 8002af6:	429c      	cmp	r4, r3
 8002af8:	dc0d      	bgt.n	8002b16 <__ieee754_pow+0x1f6>
 8002afa:	f1b9 0f00 	cmp.w	r9, #0
 8002afe:	f6bf af6d 	bge.w	80029dc <__ieee754_pow+0xbc>
 8002b02:	a307      	add	r3, pc, #28	; (adr r3, 8002b20 <__ieee754_pow+0x200>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	e79f      	b.n	8002a4a <__ieee754_pow+0x12a>
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <__ieee754_pow+0x224>)
 8002b0c:	429c      	cmp	r4, r3
 8002b0e:	ddf4      	ble.n	8002afa <__ieee754_pow+0x1da>
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <__ieee754_pow+0x218>)
 8002b12:	429c      	cmp	r4, r3
 8002b14:	dd18      	ble.n	8002b48 <__ieee754_pow+0x228>
 8002b16:	f1b9 0f00 	cmp.w	r9, #0
 8002b1a:	dcf2      	bgt.n	8002b02 <__ieee754_pow+0x1e2>
 8002b1c:	e75e      	b.n	80029dc <__ieee754_pow+0xbc>
 8002b1e:	bf00      	nop
 8002b20:	8800759c 	.word	0x8800759c
 8002b24:	7e37e43c 	.word	0x7e37e43c
 8002b28:	7ff00000 	.word	0x7ff00000
 8002b2c:	08003723 	.word	0x08003723
 8002b30:	433fffff 	.word	0x433fffff
 8002b34:	3fefffff 	.word	0x3fefffff
 8002b38:	3ff00000 	.word	0x3ff00000
 8002b3c:	3fe00000 	.word	0x3fe00000
 8002b40:	41e00000 	.word	0x41e00000
 8002b44:	3feffffe 	.word	0x3feffffe
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4b63      	ldr	r3, [pc, #396]	; (8002cd8 <__ieee754_pow+0x3b8>)
 8002b4c:	f7fd fb54 	bl	80001f8 <__aeabi_dsub>
 8002b50:	a355      	add	r3, pc, #340	; (adr r3, 8002ca8 <__ieee754_pow+0x388>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	4604      	mov	r4, r0
 8002b58:	460d      	mov	r5, r1
 8002b5a:	f7fd fd01 	bl	8000560 <__aeabi_dmul>
 8002b5e:	a354      	add	r3, pc, #336	; (adr r3, 8002cb0 <__ieee754_pow+0x390>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	4606      	mov	r6, r0
 8002b66:	460f      	mov	r7, r1
 8002b68:	4620      	mov	r0, r4
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	f7fd fcf8 	bl	8000560 <__aeabi_dmul>
 8002b70:	2200      	movs	r2, #0
 8002b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b76:	4b59      	ldr	r3, [pc, #356]	; (8002cdc <__ieee754_pow+0x3bc>)
 8002b78:	4620      	mov	r0, r4
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	f7fd fcf0 	bl	8000560 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	a14c      	add	r1, pc, #304	; (adr r1, 8002cb8 <__ieee754_pow+0x398>)
 8002b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b8a:	f7fd fb35 	bl	80001f8 <__aeabi_dsub>
 8002b8e:	4622      	mov	r2, r4
 8002b90:	462b      	mov	r3, r5
 8002b92:	f7fd fce5 	bl	8000560 <__aeabi_dmul>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	4950      	ldr	r1, [pc, #320]	; (8002ce0 <__ieee754_pow+0x3c0>)
 8002b9e:	f7fd fb2b 	bl	80001f8 <__aeabi_dsub>
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	4680      	mov	r8, r0
 8002ba8:	4689      	mov	r9, r1
 8002baa:	4620      	mov	r0, r4
 8002bac:	4629      	mov	r1, r5
 8002bae:	f7fd fcd7 	bl	8000560 <__aeabi_dmul>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4640      	mov	r0, r8
 8002bb8:	4649      	mov	r1, r9
 8002bba:	f7fd fcd1 	bl	8000560 <__aeabi_dmul>
 8002bbe:	a340      	add	r3, pc, #256	; (adr r3, 8002cc0 <__ieee754_pow+0x3a0>)
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f7fd fccc 	bl	8000560 <__aeabi_dmul>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002bd0:	f7fd fb12 	bl	80001f8 <__aeabi_dsub>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4604      	mov	r4, r0
 8002bda:	460d      	mov	r5, r1
 8002bdc:	4630      	mov	r0, r6
 8002bde:	4639      	mov	r1, r7
 8002be0:	f7fd fb0c 	bl	80001fc <__adddf3>
 8002be4:	2000      	movs	r0, #0
 8002be6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002bea:	4632      	mov	r2, r6
 8002bec:	463b      	mov	r3, r7
 8002bee:	f7fd fb03 	bl	80001f8 <__aeabi_dsub>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	f7fd fafd 	bl	80001f8 <__aeabi_dsub>
 8002bfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002c00:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002c04:	4313      	orrs	r3, r2
 8002c06:	4606      	mov	r6, r0
 8002c08:	460f      	mov	r7, r1
 8002c0a:	f040 81eb 	bne.w	8002fe4 <__ieee754_pow+0x6c4>
 8002c0e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8002cc8 <__ieee754_pow+0x3a8>
 8002c12:	e9dd 4500 	ldrd	r4, r5, [sp]
 8002c16:	2400      	movs	r4, #0
 8002c18:	4622      	mov	r2, r4
 8002c1a:	462b      	mov	r3, r5
 8002c1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002c20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002c24:	f7fd fae8 	bl	80001f8 <__aeabi_dsub>
 8002c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c2c:	f7fd fc98 	bl	8000560 <__aeabi_dmul>
 8002c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c34:	4680      	mov	r8, r0
 8002c36:	4689      	mov	r9, r1
 8002c38:	4630      	mov	r0, r6
 8002c3a:	4639      	mov	r1, r7
 8002c3c:	f7fd fc90 	bl	8000560 <__aeabi_dmul>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4640      	mov	r0, r8
 8002c46:	4649      	mov	r1, r9
 8002c48:	f7fd fad8 	bl	80001fc <__adddf3>
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	462b      	mov	r3, r5
 8002c50:	4680      	mov	r8, r0
 8002c52:	4689      	mov	r9, r1
 8002c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002c58:	f7fd fc82 	bl	8000560 <__aeabi_dmul>
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4604      	mov	r4, r0
 8002c60:	460d      	mov	r5, r1
 8002c62:	4602      	mov	r2, r0
 8002c64:	4649      	mov	r1, r9
 8002c66:	4640      	mov	r0, r8
 8002c68:	e9cd 4500 	strd	r4, r5, [sp]
 8002c6c:	f7fd fac6 	bl	80001fc <__adddf3>
 8002c70:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <__ieee754_pow+0x3c4>)
 8002c72:	4299      	cmp	r1, r3
 8002c74:	4606      	mov	r6, r0
 8002c76:	460f      	mov	r7, r1
 8002c78:	468b      	mov	fp, r1
 8002c7a:	f340 82f7 	ble.w	800326c <__ieee754_pow+0x94c>
 8002c7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002c82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002c86:	4303      	orrs	r3, r0
 8002c88:	f000 81ea 	beq.w	8003060 <__ieee754_pow+0x740>
 8002c8c:	a310      	add	r3, pc, #64	; (adr r3, 8002cd0 <__ieee754_pow+0x3b0>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c96:	f7fd fc63 	bl	8000560 <__aeabi_dmul>
 8002c9a:	a30d      	add	r3, pc, #52	; (adr r3, 8002cd0 <__ieee754_pow+0x3b0>)
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	e6d5      	b.n	8002a4e <__ieee754_pow+0x12e>
 8002ca2:	bf00      	nop
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	60000000 	.word	0x60000000
 8002cac:	3ff71547 	.word	0x3ff71547
 8002cb0:	f85ddf44 	.word	0xf85ddf44
 8002cb4:	3e54ae0b 	.word	0x3e54ae0b
 8002cb8:	55555555 	.word	0x55555555
 8002cbc:	3fd55555 	.word	0x3fd55555
 8002cc0:	652b82fe 	.word	0x652b82fe
 8002cc4:	3ff71547 	.word	0x3ff71547
 8002cc8:	00000000 	.word	0x00000000
 8002ccc:	bff00000 	.word	0xbff00000
 8002cd0:	8800759c 	.word	0x8800759c
 8002cd4:	7e37e43c 	.word	0x7e37e43c
 8002cd8:	3ff00000 	.word	0x3ff00000
 8002cdc:	3fd00000 	.word	0x3fd00000
 8002ce0:	3fe00000 	.word	0x3fe00000
 8002ce4:	408fffff 	.word	0x408fffff
 8002ce8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	da05      	bge.n	8002cfe <__ieee754_pow+0x3de>
 8002cf2:	4bd3      	ldr	r3, [pc, #844]	; (8003040 <__ieee754_pow+0x720>)
 8002cf4:	f7fd fc34 	bl	8000560 <__aeabi_dmul>
 8002cf8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	1523      	asrs	r3, r4, #20
 8002d00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002d04:	4413      	add	r3, r2
 8002d06:	9307      	str	r3, [sp, #28]
 8002d08:	4bce      	ldr	r3, [pc, #824]	; (8003044 <__ieee754_pow+0x724>)
 8002d0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002d0e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002d12:	429c      	cmp	r4, r3
 8002d14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002d18:	dd08      	ble.n	8002d2c <__ieee754_pow+0x40c>
 8002d1a:	4bcb      	ldr	r3, [pc, #812]	; (8003048 <__ieee754_pow+0x728>)
 8002d1c:	429c      	cmp	r4, r3
 8002d1e:	f340 815e 	ble.w	8002fde <__ieee754_pow+0x6be>
 8002d22:	9b07      	ldr	r3, [sp, #28]
 8002d24:	3301      	adds	r3, #1
 8002d26:	9307      	str	r3, [sp, #28]
 8002d28:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002d2c:	f04f 0a00 	mov.w	sl, #0
 8002d30:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8002d34:	930c      	str	r3, [sp, #48]	; 0x30
 8002d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d38:	4bc4      	ldr	r3, [pc, #784]	; (800304c <__ieee754_pow+0x72c>)
 8002d3a:	4413      	add	r3, r2
 8002d3c:	ed93 7b00 	vldr	d7, [r3]
 8002d40:	4629      	mov	r1, r5
 8002d42:	ec53 2b17 	vmov	r2, r3, d7
 8002d46:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002d4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002d4e:	f7fd fa53 	bl	80001f8 <__aeabi_dsub>
 8002d52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002d56:	4606      	mov	r6, r0
 8002d58:	460f      	mov	r7, r1
 8002d5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002d5e:	f7fd fa4d 	bl	80001fc <__adddf3>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	2000      	movs	r0, #0
 8002d68:	49b9      	ldr	r1, [pc, #740]	; (8003050 <__ieee754_pow+0x730>)
 8002d6a:	f7fd fd23 	bl	80007b4 <__aeabi_ddiv>
 8002d6e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4630      	mov	r0, r6
 8002d78:	4639      	mov	r1, r7
 8002d7a:	f7fd fbf1 	bl	8000560 <__aeabi_dmul>
 8002d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002d82:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002d86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	9302      	str	r3, [sp, #8]
 8002d8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002d92:	106d      	asrs	r5, r5, #1
 8002d94:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002d98:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8002da2:	4640      	mov	r0, r8
 8002da4:	4649      	mov	r1, r9
 8002da6:	4614      	mov	r4, r2
 8002da8:	461d      	mov	r5, r3
 8002daa:	f7fd fbd9 	bl	8000560 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4630      	mov	r0, r6
 8002db4:	4639      	mov	r1, r7
 8002db6:	f7fd fa1f 	bl	80001f8 <__aeabi_dsub>
 8002dba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002dbe:	4606      	mov	r6, r0
 8002dc0:	460f      	mov	r7, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd fa17 	bl	80001f8 <__aeabi_dsub>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002dd2:	f7fd fa11 	bl	80001f8 <__aeabi_dsub>
 8002dd6:	4642      	mov	r2, r8
 8002dd8:	464b      	mov	r3, r9
 8002dda:	f7fd fbc1 	bl	8000560 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4630      	mov	r0, r6
 8002de4:	4639      	mov	r1, r7
 8002de6:	f7fd fa07 	bl	80001f8 <__aeabi_dsub>
 8002dea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002dee:	f7fd fbb7 	bl	8000560 <__aeabi_dmul>
 8002df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002df6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f7fd fbaf 	bl	8000560 <__aeabi_dmul>
 8002e02:	a37b      	add	r3, pc, #492	; (adr r3, 8002ff0 <__ieee754_pow+0x6d0>)
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	4604      	mov	r4, r0
 8002e0a:	460d      	mov	r5, r1
 8002e0c:	f7fd fba8 	bl	8000560 <__aeabi_dmul>
 8002e10:	a379      	add	r3, pc, #484	; (adr r3, 8002ff8 <__ieee754_pow+0x6d8>)
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	f7fd f9f1 	bl	80001fc <__adddf3>
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	462b      	mov	r3, r5
 8002e1e:	f7fd fb9f 	bl	8000560 <__aeabi_dmul>
 8002e22:	a377      	add	r3, pc, #476	; (adr r3, 8003000 <__ieee754_pow+0x6e0>)
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f7fd f9e8 	bl	80001fc <__adddf3>
 8002e2c:	4622      	mov	r2, r4
 8002e2e:	462b      	mov	r3, r5
 8002e30:	f7fd fb96 	bl	8000560 <__aeabi_dmul>
 8002e34:	a374      	add	r3, pc, #464	; (adr r3, 8003008 <__ieee754_pow+0x6e8>)
 8002e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3a:	f7fd f9df 	bl	80001fc <__adddf3>
 8002e3e:	4622      	mov	r2, r4
 8002e40:	462b      	mov	r3, r5
 8002e42:	f7fd fb8d 	bl	8000560 <__aeabi_dmul>
 8002e46:	a372      	add	r3, pc, #456	; (adr r3, 8003010 <__ieee754_pow+0x6f0>)
 8002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4c:	f7fd f9d6 	bl	80001fc <__adddf3>
 8002e50:	4622      	mov	r2, r4
 8002e52:	462b      	mov	r3, r5
 8002e54:	f7fd fb84 	bl	8000560 <__aeabi_dmul>
 8002e58:	a36f      	add	r3, pc, #444	; (adr r3, 8003018 <__ieee754_pow+0x6f8>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f7fd f9cd 	bl	80001fc <__adddf3>
 8002e62:	4622      	mov	r2, r4
 8002e64:	4606      	mov	r6, r0
 8002e66:	460f      	mov	r7, r1
 8002e68:	462b      	mov	r3, r5
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f7fd fb77 	bl	8000560 <__aeabi_dmul>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4630      	mov	r0, r6
 8002e78:	4639      	mov	r1, r7
 8002e7a:	f7fd fb71 	bl	8000560 <__aeabi_dmul>
 8002e7e:	4642      	mov	r2, r8
 8002e80:	4604      	mov	r4, r0
 8002e82:	460d      	mov	r5, r1
 8002e84:	464b      	mov	r3, r9
 8002e86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e8a:	f7fd f9b7 	bl	80001fc <__adddf3>
 8002e8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002e92:	f7fd fb65 	bl	8000560 <__aeabi_dmul>
 8002e96:	4622      	mov	r2, r4
 8002e98:	462b      	mov	r3, r5
 8002e9a:	f7fd f9af 	bl	80001fc <__adddf3>
 8002e9e:	4642      	mov	r2, r8
 8002ea0:	4606      	mov	r6, r0
 8002ea2:	460f      	mov	r7, r1
 8002ea4:	464b      	mov	r3, r9
 8002ea6:	4640      	mov	r0, r8
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	f7fd fb59 	bl	8000560 <__aeabi_dmul>
 8002eae:	2200      	movs	r2, #0
 8002eb0:	4b68      	ldr	r3, [pc, #416]	; (8003054 <__ieee754_pow+0x734>)
 8002eb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002eb6:	f7fd f9a1 	bl	80001fc <__adddf3>
 8002eba:	4632      	mov	r2, r6
 8002ebc:	463b      	mov	r3, r7
 8002ebe:	f7fd f99d 	bl	80001fc <__adddf3>
 8002ec2:	9802      	ldr	r0, [sp, #8]
 8002ec4:	460d      	mov	r5, r1
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4640      	mov	r0, r8
 8002ece:	4649      	mov	r1, r9
 8002ed0:	f7fd fb46 	bl	8000560 <__aeabi_dmul>
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4680      	mov	r8, r0
 8002ed8:	4689      	mov	r9, r1
 8002eda:	4b5e      	ldr	r3, [pc, #376]	; (8003054 <__ieee754_pow+0x734>)
 8002edc:	4620      	mov	r0, r4
 8002ede:	4629      	mov	r1, r5
 8002ee0:	f7fd f98a 	bl	80001f8 <__aeabi_dsub>
 8002ee4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002ee8:	f7fd f986 	bl	80001f8 <__aeabi_dsub>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	4639      	mov	r1, r7
 8002ef4:	f7fd f980 	bl	80001f8 <__aeabi_dsub>
 8002ef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002efc:	f7fd fb30 	bl	8000560 <__aeabi_dmul>
 8002f00:	4622      	mov	r2, r4
 8002f02:	4606      	mov	r6, r0
 8002f04:	460f      	mov	r7, r1
 8002f06:	462b      	mov	r3, r5
 8002f08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002f0c:	f7fd fb28 	bl	8000560 <__aeabi_dmul>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4630      	mov	r0, r6
 8002f16:	4639      	mov	r1, r7
 8002f18:	f7fd f970 	bl	80001fc <__adddf3>
 8002f1c:	4606      	mov	r6, r0
 8002f1e:	460f      	mov	r7, r1
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4640      	mov	r0, r8
 8002f26:	4649      	mov	r1, r9
 8002f28:	f7fd f968 	bl	80001fc <__adddf3>
 8002f2c:	9802      	ldr	r0, [sp, #8]
 8002f2e:	a33c      	add	r3, pc, #240	; (adr r3, 8003020 <__ieee754_pow+0x700>)
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	4604      	mov	r4, r0
 8002f36:	460d      	mov	r5, r1
 8002f38:	f7fd fb12 	bl	8000560 <__aeabi_dmul>
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002f42:	464b      	mov	r3, r9
 8002f44:	4620      	mov	r0, r4
 8002f46:	4629      	mov	r1, r5
 8002f48:	f7fd f956 	bl	80001f8 <__aeabi_dsub>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4630      	mov	r0, r6
 8002f52:	4639      	mov	r1, r7
 8002f54:	f7fd f950 	bl	80001f8 <__aeabi_dsub>
 8002f58:	a333      	add	r3, pc, #204	; (adr r3, 8003028 <__ieee754_pow+0x708>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f7fd faff 	bl	8000560 <__aeabi_dmul>
 8002f62:	a333      	add	r3, pc, #204	; (adr r3, 8003030 <__ieee754_pow+0x710>)
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	4606      	mov	r6, r0
 8002f6a:	460f      	mov	r7, r1
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	4629      	mov	r1, r5
 8002f70:	f7fd faf6 	bl	8000560 <__aeabi_dmul>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4630      	mov	r0, r6
 8002f7a:	4639      	mov	r1, r7
 8002f7c:	f7fd f93e 	bl	80001fc <__adddf3>
 8002f80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <__ieee754_pow+0x738>)
 8002f84:	4413      	add	r3, r2
 8002f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8a:	f7fd f937 	bl	80001fc <__adddf3>
 8002f8e:	4604      	mov	r4, r0
 8002f90:	9807      	ldr	r0, [sp, #28]
 8002f92:	460d      	mov	r5, r1
 8002f94:	f7fd fa7e 	bl	8000494 <__aeabi_i2d>
 8002f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f9a:	4b30      	ldr	r3, [pc, #192]	; (800305c <__ieee754_pow+0x73c>)
 8002f9c:	4413      	add	r3, r2
 8002f9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002fa2:	4606      	mov	r6, r0
 8002fa4:	460f      	mov	r7, r1
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	462b      	mov	r3, r5
 8002faa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002fae:	f7fd f925 	bl	80001fc <__adddf3>
 8002fb2:	4642      	mov	r2, r8
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	f7fd f921 	bl	80001fc <__adddf3>
 8002fba:	4632      	mov	r2, r6
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	f7fd f91d 	bl	80001fc <__adddf3>
 8002fc2:	9802      	ldr	r0, [sp, #8]
 8002fc4:	4632      	mov	r2, r6
 8002fc6:	463b      	mov	r3, r7
 8002fc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002fcc:	f7fd f914 	bl	80001f8 <__aeabi_dsub>
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	f7fd f910 	bl	80001f8 <__aeabi_dsub>
 8002fd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002fdc:	e607      	b.n	8002bee <__ieee754_pow+0x2ce>
 8002fde:	f04f 0a01 	mov.w	sl, #1
 8002fe2:	e6a5      	b.n	8002d30 <__ieee754_pow+0x410>
 8002fe4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8003038 <__ieee754_pow+0x718>
 8002fe8:	e613      	b.n	8002c12 <__ieee754_pow+0x2f2>
 8002fea:	bf00      	nop
 8002fec:	f3af 8000 	nop.w
 8002ff0:	4a454eef 	.word	0x4a454eef
 8002ff4:	3fca7e28 	.word	0x3fca7e28
 8002ff8:	93c9db65 	.word	0x93c9db65
 8002ffc:	3fcd864a 	.word	0x3fcd864a
 8003000:	a91d4101 	.word	0xa91d4101
 8003004:	3fd17460 	.word	0x3fd17460
 8003008:	518f264d 	.word	0x518f264d
 800300c:	3fd55555 	.word	0x3fd55555
 8003010:	db6fabff 	.word	0xdb6fabff
 8003014:	3fdb6db6 	.word	0x3fdb6db6
 8003018:	33333303 	.word	0x33333303
 800301c:	3fe33333 	.word	0x3fe33333
 8003020:	e0000000 	.word	0xe0000000
 8003024:	3feec709 	.word	0x3feec709
 8003028:	dc3a03fd 	.word	0xdc3a03fd
 800302c:	3feec709 	.word	0x3feec709
 8003030:	145b01f5 	.word	0x145b01f5
 8003034:	be3e2fe0 	.word	0xbe3e2fe0
 8003038:	00000000 	.word	0x00000000
 800303c:	3ff00000 	.word	0x3ff00000
 8003040:	43400000 	.word	0x43400000
 8003044:	0003988e 	.word	0x0003988e
 8003048:	000bb679 	.word	0x000bb679
 800304c:	08003728 	.word	0x08003728
 8003050:	3ff00000 	.word	0x3ff00000
 8003054:	40080000 	.word	0x40080000
 8003058:	08003748 	.word	0x08003748
 800305c:	08003738 	.word	0x08003738
 8003060:	a3b6      	add	r3, pc, #728	; (adr r3, 800333c <__ieee754_pow+0xa1c>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	4640      	mov	r0, r8
 8003068:	4649      	mov	r1, r9
 800306a:	f7fd f8c7 	bl	80001fc <__adddf3>
 800306e:	4622      	mov	r2, r4
 8003070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003074:	462b      	mov	r3, r5
 8003076:	4630      	mov	r0, r6
 8003078:	4639      	mov	r1, r7
 800307a:	f7fd f8bd 	bl	80001f8 <__aeabi_dsub>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003086:	f7fd fcfb 	bl	8000a80 <__aeabi_dcmpgt>
 800308a:	2800      	cmp	r0, #0
 800308c:	f47f adfe 	bne.w	8002c8c <__ieee754_pow+0x36c>
 8003090:	4aa5      	ldr	r2, [pc, #660]	; (8003328 <__ieee754_pow+0xa08>)
 8003092:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003096:	4293      	cmp	r3, r2
 8003098:	f340 810c 	ble.w	80032b4 <__ieee754_pow+0x994>
 800309c:	151b      	asrs	r3, r3, #20
 800309e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80030a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80030a6:	fa4a f303 	asr.w	r3, sl, r3
 80030aa:	445b      	add	r3, fp
 80030ac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80030b0:	4e9e      	ldr	r6, [pc, #632]	; (800332c <__ieee754_pow+0xa0c>)
 80030b2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80030b6:	4116      	asrs	r6, r2
 80030b8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80030bc:	2000      	movs	r0, #0
 80030be:	ea23 0106 	bic.w	r1, r3, r6
 80030c2:	f1c2 0214 	rsb	r2, r2, #20
 80030c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80030ca:	fa4a fa02 	asr.w	sl, sl, r2
 80030ce:	f1bb 0f00 	cmp.w	fp, #0
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4620      	mov	r0, r4
 80030d8:	4629      	mov	r1, r5
 80030da:	bfb8      	it	lt
 80030dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80030e0:	f7fd f88a 	bl	80001f8 <__aeabi_dsub>
 80030e4:	e9cd 0100 	strd	r0, r1, [sp]
 80030e8:	4642      	mov	r2, r8
 80030ea:	464b      	mov	r3, r9
 80030ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80030f0:	f7fd f884 	bl	80001fc <__adddf3>
 80030f4:	2000      	movs	r0, #0
 80030f6:	a37a      	add	r3, pc, #488	; (adr r3, 80032e0 <__ieee754_pow+0x9c0>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	4604      	mov	r4, r0
 80030fe:	460d      	mov	r5, r1
 8003100:	f7fd fa2e 	bl	8000560 <__aeabi_dmul>
 8003104:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003108:	4606      	mov	r6, r0
 800310a:	460f      	mov	r7, r1
 800310c:	4620      	mov	r0, r4
 800310e:	4629      	mov	r1, r5
 8003110:	f7fd f872 	bl	80001f8 <__aeabi_dsub>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4640      	mov	r0, r8
 800311a:	4649      	mov	r1, r9
 800311c:	f7fd f86c 	bl	80001f8 <__aeabi_dsub>
 8003120:	a371      	add	r3, pc, #452	; (adr r3, 80032e8 <__ieee754_pow+0x9c8>)
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	f7fd fa1b 	bl	8000560 <__aeabi_dmul>
 800312a:	a371      	add	r3, pc, #452	; (adr r3, 80032f0 <__ieee754_pow+0x9d0>)
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	4680      	mov	r8, r0
 8003132:	4689      	mov	r9, r1
 8003134:	4620      	mov	r0, r4
 8003136:	4629      	mov	r1, r5
 8003138:	f7fd fa12 	bl	8000560 <__aeabi_dmul>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4640      	mov	r0, r8
 8003142:	4649      	mov	r1, r9
 8003144:	f7fd f85a 	bl	80001fc <__adddf3>
 8003148:	4604      	mov	r4, r0
 800314a:	460d      	mov	r5, r1
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4630      	mov	r0, r6
 8003152:	4639      	mov	r1, r7
 8003154:	f7fd f852 	bl	80001fc <__adddf3>
 8003158:	4632      	mov	r2, r6
 800315a:	463b      	mov	r3, r7
 800315c:	4680      	mov	r8, r0
 800315e:	4689      	mov	r9, r1
 8003160:	f7fd f84a 	bl	80001f8 <__aeabi_dsub>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4620      	mov	r0, r4
 800316a:	4629      	mov	r1, r5
 800316c:	f7fd f844 	bl	80001f8 <__aeabi_dsub>
 8003170:	4642      	mov	r2, r8
 8003172:	4606      	mov	r6, r0
 8003174:	460f      	mov	r7, r1
 8003176:	464b      	mov	r3, r9
 8003178:	4640      	mov	r0, r8
 800317a:	4649      	mov	r1, r9
 800317c:	f7fd f9f0 	bl	8000560 <__aeabi_dmul>
 8003180:	a35d      	add	r3, pc, #372	; (adr r3, 80032f8 <__ieee754_pow+0x9d8>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	4604      	mov	r4, r0
 8003188:	460d      	mov	r5, r1
 800318a:	f7fd f9e9 	bl	8000560 <__aeabi_dmul>
 800318e:	a35c      	add	r3, pc, #368	; (adr r3, 8003300 <__ieee754_pow+0x9e0>)
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	f7fd f830 	bl	80001f8 <__aeabi_dsub>
 8003198:	4622      	mov	r2, r4
 800319a:	462b      	mov	r3, r5
 800319c:	f7fd f9e0 	bl	8000560 <__aeabi_dmul>
 80031a0:	a359      	add	r3, pc, #356	; (adr r3, 8003308 <__ieee754_pow+0x9e8>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f7fd f829 	bl	80001fc <__adddf3>
 80031aa:	4622      	mov	r2, r4
 80031ac:	462b      	mov	r3, r5
 80031ae:	f7fd f9d7 	bl	8000560 <__aeabi_dmul>
 80031b2:	a357      	add	r3, pc, #348	; (adr r3, 8003310 <__ieee754_pow+0x9f0>)
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	f7fd f81e 	bl	80001f8 <__aeabi_dsub>
 80031bc:	4622      	mov	r2, r4
 80031be:	462b      	mov	r3, r5
 80031c0:	f7fd f9ce 	bl	8000560 <__aeabi_dmul>
 80031c4:	a354      	add	r3, pc, #336	; (adr r3, 8003318 <__ieee754_pow+0x9f8>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f7fd f817 	bl	80001fc <__adddf3>
 80031ce:	4622      	mov	r2, r4
 80031d0:	462b      	mov	r3, r5
 80031d2:	f7fd f9c5 	bl	8000560 <__aeabi_dmul>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4640      	mov	r0, r8
 80031dc:	4649      	mov	r1, r9
 80031de:	f7fd f80b 	bl	80001f8 <__aeabi_dsub>
 80031e2:	4604      	mov	r4, r0
 80031e4:	460d      	mov	r5, r1
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4640      	mov	r0, r8
 80031ec:	4649      	mov	r1, r9
 80031ee:	f7fd f9b7 	bl	8000560 <__aeabi_dmul>
 80031f2:	2200      	movs	r2, #0
 80031f4:	e9cd 0100 	strd	r0, r1, [sp]
 80031f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031fc:	4620      	mov	r0, r4
 80031fe:	4629      	mov	r1, r5
 8003200:	f7fc fffa 	bl	80001f8 <__aeabi_dsub>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	e9dd 0100 	ldrd	r0, r1, [sp]
 800320c:	f7fd fad2 	bl	80007b4 <__aeabi_ddiv>
 8003210:	4632      	mov	r2, r6
 8003212:	4604      	mov	r4, r0
 8003214:	460d      	mov	r5, r1
 8003216:	463b      	mov	r3, r7
 8003218:	4640      	mov	r0, r8
 800321a:	4649      	mov	r1, r9
 800321c:	f7fd f9a0 	bl	8000560 <__aeabi_dmul>
 8003220:	4632      	mov	r2, r6
 8003222:	463b      	mov	r3, r7
 8003224:	f7fc ffea 	bl	80001fc <__adddf3>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4620      	mov	r0, r4
 800322e:	4629      	mov	r1, r5
 8003230:	f7fc ffe2 	bl	80001f8 <__aeabi_dsub>
 8003234:	4642      	mov	r2, r8
 8003236:	464b      	mov	r3, r9
 8003238:	f7fc ffde 	bl	80001f8 <__aeabi_dsub>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	2000      	movs	r0, #0
 8003242:	493b      	ldr	r1, [pc, #236]	; (8003330 <__ieee754_pow+0xa10>)
 8003244:	f7fc ffd8 	bl	80001f8 <__aeabi_dsub>
 8003248:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800324c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	da31      	bge.n	80032ba <__ieee754_pow+0x99a>
 8003256:	4650      	mov	r0, sl
 8003258:	ec43 2b10 	vmov	d0, r2, r3
 800325c:	f000 f9c4 	bl	80035e8 <scalbn>
 8003260:	ec51 0b10 	vmov	r0, r1, d0
 8003264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003268:	f7ff bbf1 	b.w	8002a4e <__ieee754_pow+0x12e>
 800326c:	4b31      	ldr	r3, [pc, #196]	; (8003334 <__ieee754_pow+0xa14>)
 800326e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003272:	429e      	cmp	r6, r3
 8003274:	f77f af0c 	ble.w	8003090 <__ieee754_pow+0x770>
 8003278:	4b2f      	ldr	r3, [pc, #188]	; (8003338 <__ieee754_pow+0xa18>)
 800327a:	440b      	add	r3, r1
 800327c:	4303      	orrs	r3, r0
 800327e:	d00b      	beq.n	8003298 <__ieee754_pow+0x978>
 8003280:	a327      	add	r3, pc, #156	; (adr r3, 8003320 <__ieee754_pow+0xa00>)
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800328a:	f7fd f969 	bl	8000560 <__aeabi_dmul>
 800328e:	a324      	add	r3, pc, #144	; (adr r3, 8003320 <__ieee754_pow+0xa00>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f7ff bbdb 	b.w	8002a4e <__ieee754_pow+0x12e>
 8003298:	4622      	mov	r2, r4
 800329a:	462b      	mov	r3, r5
 800329c:	f7fc ffac 	bl	80001f8 <__aeabi_dsub>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4640      	mov	r0, r8
 80032a6:	4649      	mov	r1, r9
 80032a8:	f7fd fbd6 	bl	8000a58 <__aeabi_dcmple>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	f43f aeef 	beq.w	8003090 <__ieee754_pow+0x770>
 80032b2:	e7e5      	b.n	8003280 <__ieee754_pow+0x960>
 80032b4:	f04f 0a00 	mov.w	sl, #0
 80032b8:	e716      	b.n	80030e8 <__ieee754_pow+0x7c8>
 80032ba:	4621      	mov	r1, r4
 80032bc:	e7d2      	b.n	8003264 <__ieee754_pow+0x944>
 80032be:	2000      	movs	r0, #0
 80032c0:	491b      	ldr	r1, [pc, #108]	; (8003330 <__ieee754_pow+0xa10>)
 80032c2:	f7ff bb8d 	b.w	80029e0 <__ieee754_pow+0xc0>
 80032c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80032ca:	f7ff bb89 	b.w	80029e0 <__ieee754_pow+0xc0>
 80032ce:	4630      	mov	r0, r6
 80032d0:	4639      	mov	r1, r7
 80032d2:	f7ff bb85 	b.w	80029e0 <__ieee754_pow+0xc0>
 80032d6:	4693      	mov	fp, r2
 80032d8:	f7ff bb96 	b.w	8002a08 <__ieee754_pow+0xe8>
 80032dc:	f3af 8000 	nop.w
 80032e0:	00000000 	.word	0x00000000
 80032e4:	3fe62e43 	.word	0x3fe62e43
 80032e8:	fefa39ef 	.word	0xfefa39ef
 80032ec:	3fe62e42 	.word	0x3fe62e42
 80032f0:	0ca86c39 	.word	0x0ca86c39
 80032f4:	be205c61 	.word	0xbe205c61
 80032f8:	72bea4d0 	.word	0x72bea4d0
 80032fc:	3e663769 	.word	0x3e663769
 8003300:	c5d26bf1 	.word	0xc5d26bf1
 8003304:	3ebbbd41 	.word	0x3ebbbd41
 8003308:	af25de2c 	.word	0xaf25de2c
 800330c:	3f11566a 	.word	0x3f11566a
 8003310:	16bebd93 	.word	0x16bebd93
 8003314:	3f66c16c 	.word	0x3f66c16c
 8003318:	5555553e 	.word	0x5555553e
 800331c:	3fc55555 	.word	0x3fc55555
 8003320:	c2f8f359 	.word	0xc2f8f359
 8003324:	01a56e1f 	.word	0x01a56e1f
 8003328:	3fe00000 	.word	0x3fe00000
 800332c:	000fffff 	.word	0x000fffff
 8003330:	3ff00000 	.word	0x3ff00000
 8003334:	4090cbff 	.word	0x4090cbff
 8003338:	3f6f3400 	.word	0x3f6f3400
 800333c:	652b82fe 	.word	0x652b82fe
 8003340:	3c971547 	.word	0x3c971547

08003344 <__ieee754_sqrt>:
 8003344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003348:	ec55 4b10 	vmov	r4, r5, d0
 800334c:	4e54      	ldr	r6, [pc, #336]	; (80034a0 <__ieee754_sqrt+0x15c>)
 800334e:	43ae      	bics	r6, r5
 8003350:	ee10 0a10 	vmov	r0, s0
 8003354:	462b      	mov	r3, r5
 8003356:	462a      	mov	r2, r5
 8003358:	4621      	mov	r1, r4
 800335a:	d113      	bne.n	8003384 <__ieee754_sqrt+0x40>
 800335c:	ee10 2a10 	vmov	r2, s0
 8003360:	462b      	mov	r3, r5
 8003362:	ee10 0a10 	vmov	r0, s0
 8003366:	4629      	mov	r1, r5
 8003368:	f7fd f8fa 	bl	8000560 <__aeabi_dmul>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4620      	mov	r0, r4
 8003372:	4629      	mov	r1, r5
 8003374:	f7fc ff42 	bl	80001fc <__adddf3>
 8003378:	4604      	mov	r4, r0
 800337a:	460d      	mov	r5, r1
 800337c:	ec45 4b10 	vmov	d0, r4, r5
 8003380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003384:	2d00      	cmp	r5, #0
 8003386:	dc10      	bgt.n	80033aa <__ieee754_sqrt+0x66>
 8003388:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800338c:	4330      	orrs	r0, r6
 800338e:	d0f5      	beq.n	800337c <__ieee754_sqrt+0x38>
 8003390:	b15d      	cbz	r5, 80033aa <__ieee754_sqrt+0x66>
 8003392:	ee10 2a10 	vmov	r2, s0
 8003396:	462b      	mov	r3, r5
 8003398:	4620      	mov	r0, r4
 800339a:	4629      	mov	r1, r5
 800339c:	f7fc ff2c 	bl	80001f8 <__aeabi_dsub>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	f7fd fa06 	bl	80007b4 <__aeabi_ddiv>
 80033a8:	e7e6      	b.n	8003378 <__ieee754_sqrt+0x34>
 80033aa:	151b      	asrs	r3, r3, #20
 80033ac:	d10c      	bne.n	80033c8 <__ieee754_sqrt+0x84>
 80033ae:	2a00      	cmp	r2, #0
 80033b0:	d06d      	beq.n	800348e <__ieee754_sqrt+0x14a>
 80033b2:	2000      	movs	r0, #0
 80033b4:	02d6      	lsls	r6, r2, #11
 80033b6:	d56e      	bpl.n	8003496 <__ieee754_sqrt+0x152>
 80033b8:	1e44      	subs	r4, r0, #1
 80033ba:	1b1b      	subs	r3, r3, r4
 80033bc:	f1c0 0420 	rsb	r4, r0, #32
 80033c0:	fa21 f404 	lsr.w	r4, r1, r4
 80033c4:	4322      	orrs	r2, r4
 80033c6:	4081      	lsls	r1, r0
 80033c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80033cc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80033d0:	07dd      	lsls	r5, r3, #31
 80033d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033d6:	bf42      	ittt	mi
 80033d8:	0052      	lslmi	r2, r2, #1
 80033da:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80033de:	0049      	lslmi	r1, r1, #1
 80033e0:	1058      	asrs	r0, r3, #1
 80033e2:	2500      	movs	r5, #0
 80033e4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80033e8:	441a      	add	r2, r3
 80033ea:	0049      	lsls	r1, r1, #1
 80033ec:	2316      	movs	r3, #22
 80033ee:	462c      	mov	r4, r5
 80033f0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80033f4:	19a7      	adds	r7, r4, r6
 80033f6:	4297      	cmp	r7, r2
 80033f8:	bfde      	ittt	le
 80033fa:	1bd2      	suble	r2, r2, r7
 80033fc:	19bc      	addle	r4, r7, r6
 80033fe:	19ad      	addle	r5, r5, r6
 8003400:	0052      	lsls	r2, r2, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8003408:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800340c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003410:	d1f0      	bne.n	80033f4 <__ieee754_sqrt+0xb0>
 8003412:	f04f 0e20 	mov.w	lr, #32
 8003416:	469c      	mov	ip, r3
 8003418:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800341c:	42a2      	cmp	r2, r4
 800341e:	eb06 070c 	add.w	r7, r6, ip
 8003422:	dc02      	bgt.n	800342a <__ieee754_sqrt+0xe6>
 8003424:	d112      	bne.n	800344c <__ieee754_sqrt+0x108>
 8003426:	428f      	cmp	r7, r1
 8003428:	d810      	bhi.n	800344c <__ieee754_sqrt+0x108>
 800342a:	2f00      	cmp	r7, #0
 800342c:	eb07 0c06 	add.w	ip, r7, r6
 8003430:	da34      	bge.n	800349c <__ieee754_sqrt+0x158>
 8003432:	f1bc 0f00 	cmp.w	ip, #0
 8003436:	db31      	blt.n	800349c <__ieee754_sqrt+0x158>
 8003438:	f104 0801 	add.w	r8, r4, #1
 800343c:	1b12      	subs	r2, r2, r4
 800343e:	428f      	cmp	r7, r1
 8003440:	bf88      	it	hi
 8003442:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003446:	1bc9      	subs	r1, r1, r7
 8003448:	4433      	add	r3, r6
 800344a:	4644      	mov	r4, r8
 800344c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8003450:	f1be 0e01 	subs.w	lr, lr, #1
 8003454:	443a      	add	r2, r7
 8003456:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800345a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800345e:	d1dd      	bne.n	800341c <__ieee754_sqrt+0xd8>
 8003460:	430a      	orrs	r2, r1
 8003462:	d006      	beq.n	8003472 <__ieee754_sqrt+0x12e>
 8003464:	1c5c      	adds	r4, r3, #1
 8003466:	bf13      	iteet	ne
 8003468:	3301      	addne	r3, #1
 800346a:	3501      	addeq	r5, #1
 800346c:	4673      	moveq	r3, lr
 800346e:	f023 0301 	bicne.w	r3, r3, #1
 8003472:	106a      	asrs	r2, r5, #1
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	07e9      	lsls	r1, r5, #31
 8003478:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800347c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003480:	bf48      	it	mi
 8003482:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003486:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800348a:	461c      	mov	r4, r3
 800348c:	e776      	b.n	800337c <__ieee754_sqrt+0x38>
 800348e:	0aca      	lsrs	r2, r1, #11
 8003490:	3b15      	subs	r3, #21
 8003492:	0549      	lsls	r1, r1, #21
 8003494:	e78b      	b.n	80033ae <__ieee754_sqrt+0x6a>
 8003496:	0052      	lsls	r2, r2, #1
 8003498:	3001      	adds	r0, #1
 800349a:	e78b      	b.n	80033b4 <__ieee754_sqrt+0x70>
 800349c:	46a0      	mov	r8, r4
 800349e:	e7cd      	b.n	800343c <__ieee754_sqrt+0xf8>
 80034a0:	7ff00000 	.word	0x7ff00000

080034a4 <fabs>:
 80034a4:	ec53 2b10 	vmov	r2, r3, d0
 80034a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034ac:	ec43 2b10 	vmov	d0, r2, r3
 80034b0:	4770      	bx	lr

080034b2 <finite>:
 80034b2:	ee10 3a90 	vmov	r3, s1
 80034b6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80034ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80034be:	0fc0      	lsrs	r0, r0, #31
 80034c0:	4770      	bx	lr

080034c2 <matherr>:
 80034c2:	2000      	movs	r0, #0
 80034c4:	4770      	bx	lr
	...

080034c8 <nan>:
 80034c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80034d0 <nan+0x8>
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	00000000 	.word	0x00000000
 80034d4:	7ff80000 	.word	0x7ff80000

080034d8 <rint>:
 80034d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034da:	ec51 0b10 	vmov	r0, r1, d0
 80034de:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80034e2:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 80034e6:	2e13      	cmp	r6, #19
 80034e8:	ee10 7a10 	vmov	r7, s0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4602      	mov	r2, r0
 80034f0:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80034f4:	dc58      	bgt.n	80035a8 <rint+0xd0>
 80034f6:	2e00      	cmp	r6, #0
 80034f8:	da2b      	bge.n	8003552 <rint+0x7a>
 80034fa:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80034fe:	4302      	orrs	r2, r0
 8003500:	d023      	beq.n	800354a <rint+0x72>
 8003502:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8003506:	4302      	orrs	r2, r0
 8003508:	4251      	negs	r1, r2
 800350a:	4311      	orrs	r1, r2
 800350c:	0b09      	lsrs	r1, r1, #12
 800350e:	0c5b      	lsrs	r3, r3, #17
 8003510:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8003514:	045b      	lsls	r3, r3, #17
 8003516:	ea41 0703 	orr.w	r7, r1, r3
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <rint+0x108>)
 800351c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003520:	4639      	mov	r1, r7
 8003522:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003526:	ee10 0a10 	vmov	r0, s0
 800352a:	4632      	mov	r2, r6
 800352c:	463b      	mov	r3, r7
 800352e:	f7fc fe65 	bl	80001fc <__adddf3>
 8003532:	e9cd 0100 	strd	r0, r1, [sp]
 8003536:	463b      	mov	r3, r7
 8003538:	4632      	mov	r2, r6
 800353a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800353e:	f7fc fe5b 	bl	80001f8 <__aeabi_dsub>
 8003542:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003546:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800354a:	ec41 0b10 	vmov	d0, r0, r1
 800354e:	b003      	add	sp, #12
 8003550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003552:	4c24      	ldr	r4, [pc, #144]	; (80035e4 <rint+0x10c>)
 8003554:	4134      	asrs	r4, r6
 8003556:	ea01 0704 	and.w	r7, r1, r4
 800355a:	4307      	orrs	r7, r0
 800355c:	d0f5      	beq.n	800354a <rint+0x72>
 800355e:	0861      	lsrs	r1, r4, #1
 8003560:	ea03 0001 	and.w	r0, r3, r1
 8003564:	4302      	orrs	r2, r0
 8003566:	d00b      	beq.n	8003580 <rint+0xa8>
 8003568:	ea23 0101 	bic.w	r1, r3, r1
 800356c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003570:	2e13      	cmp	r6, #19
 8003572:	fa43 f306 	asr.w	r3, r3, r6
 8003576:	bf0c      	ite	eq
 8003578:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800357c:	2200      	movne	r2, #0
 800357e:	430b      	orrs	r3, r1
 8003580:	4619      	mov	r1, r3
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <rint+0x108>)
 8003584:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003588:	e9d5 4500 	ldrd	r4, r5, [r5]
 800358c:	4610      	mov	r0, r2
 800358e:	462b      	mov	r3, r5
 8003590:	4622      	mov	r2, r4
 8003592:	f7fc fe33 	bl	80001fc <__adddf3>
 8003596:	e9cd 0100 	strd	r0, r1, [sp]
 800359a:	4622      	mov	r2, r4
 800359c:	462b      	mov	r3, r5
 800359e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035a2:	f7fc fe29 	bl	80001f8 <__aeabi_dsub>
 80035a6:	e7d0      	b.n	800354a <rint+0x72>
 80035a8:	2e33      	cmp	r6, #51	; 0x33
 80035aa:	dd08      	ble.n	80035be <rint+0xe6>
 80035ac:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80035b0:	d1cb      	bne.n	800354a <rint+0x72>
 80035b2:	ee10 2a10 	vmov	r2, s0
 80035b6:	460b      	mov	r3, r1
 80035b8:	f7fc fe20 	bl	80001fc <__adddf3>
 80035bc:	e7c5      	b.n	800354a <rint+0x72>
 80035be:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80035c2:	f04f 34ff 	mov.w	r4, #4294967295
 80035c6:	40f4      	lsrs	r4, r6
 80035c8:	4220      	tst	r0, r4
 80035ca:	d0be      	beq.n	800354a <rint+0x72>
 80035cc:	0861      	lsrs	r1, r4, #1
 80035ce:	420f      	tst	r7, r1
 80035d0:	bf1f      	itttt	ne
 80035d2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80035d6:	ea27 0101 	bicne.w	r1, r7, r1
 80035da:	4132      	asrne	r2, r6
 80035dc:	430a      	orrne	r2, r1
 80035de:	e7cf      	b.n	8003580 <rint+0xa8>
 80035e0:	08003758 	.word	0x08003758
 80035e4:	000fffff 	.word	0x000fffff

080035e8 <scalbn>:
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	ec55 4b10 	vmov	r4, r5, d0
 80035ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80035f2:	4606      	mov	r6, r0
 80035f4:	462b      	mov	r3, r5
 80035f6:	b9b2      	cbnz	r2, 8003626 <scalbn+0x3e>
 80035f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80035fc:	4323      	orrs	r3, r4
 80035fe:	d03c      	beq.n	800367a <scalbn+0x92>
 8003600:	2200      	movs	r2, #0
 8003602:	4b33      	ldr	r3, [pc, #204]	; (80036d0 <scalbn+0xe8>)
 8003604:	4629      	mov	r1, r5
 8003606:	ee10 0a10 	vmov	r0, s0
 800360a:	f7fc ffa9 	bl	8000560 <__aeabi_dmul>
 800360e:	4a31      	ldr	r2, [pc, #196]	; (80036d4 <scalbn+0xec>)
 8003610:	4296      	cmp	r6, r2
 8003612:	4604      	mov	r4, r0
 8003614:	460d      	mov	r5, r1
 8003616:	460b      	mov	r3, r1
 8003618:	da13      	bge.n	8003642 <scalbn+0x5a>
 800361a:	a329      	add	r3, pc, #164	; (adr r3, 80036c0 <scalbn+0xd8>)
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f7fc ff9e 	bl	8000560 <__aeabi_dmul>
 8003624:	e00a      	b.n	800363c <scalbn+0x54>
 8003626:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800362a:	428a      	cmp	r2, r1
 800362c:	d10c      	bne.n	8003648 <scalbn+0x60>
 800362e:	ee10 2a10 	vmov	r2, s0
 8003632:	462b      	mov	r3, r5
 8003634:	4620      	mov	r0, r4
 8003636:	4629      	mov	r1, r5
 8003638:	f7fc fde0 	bl	80001fc <__adddf3>
 800363c:	4604      	mov	r4, r0
 800363e:	460d      	mov	r5, r1
 8003640:	e01b      	b.n	800367a <scalbn+0x92>
 8003642:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003646:	3a36      	subs	r2, #54	; 0x36
 8003648:	4432      	add	r2, r6
 800364a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800364e:	428a      	cmp	r2, r1
 8003650:	dd0b      	ble.n	800366a <scalbn+0x82>
 8003652:	ec45 4b11 	vmov	d1, r4, r5
 8003656:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80036c8 <scalbn+0xe0>
 800365a:	f000 f83f 	bl	80036dc <copysign>
 800365e:	a31a      	add	r3, pc, #104	; (adr r3, 80036c8 <scalbn+0xe0>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	ec51 0b10 	vmov	r0, r1, d0
 8003668:	e7da      	b.n	8003620 <scalbn+0x38>
 800366a:	2a00      	cmp	r2, #0
 800366c:	dd08      	ble.n	8003680 <scalbn+0x98>
 800366e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003672:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003676:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800367a:	ec45 4b10 	vmov	d0, r4, r5
 800367e:	bd70      	pop	{r4, r5, r6, pc}
 8003680:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003684:	da0d      	bge.n	80036a2 <scalbn+0xba>
 8003686:	f24c 3350 	movw	r3, #50000	; 0xc350
 800368a:	429e      	cmp	r6, r3
 800368c:	ec45 4b11 	vmov	d1, r4, r5
 8003690:	dce1      	bgt.n	8003656 <scalbn+0x6e>
 8003692:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80036c0 <scalbn+0xd8>
 8003696:	f000 f821 	bl	80036dc <copysign>
 800369a:	a309      	add	r3, pc, #36	; (adr r3, 80036c0 <scalbn+0xd8>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	e7e0      	b.n	8003664 <scalbn+0x7c>
 80036a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80036a6:	3236      	adds	r2, #54	; 0x36
 80036a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80036ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80036b0:	4620      	mov	r0, r4
 80036b2:	4629      	mov	r1, r5
 80036b4:	2200      	movs	r2, #0
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <scalbn+0xf0>)
 80036b8:	e7b2      	b.n	8003620 <scalbn+0x38>
 80036ba:	bf00      	nop
 80036bc:	f3af 8000 	nop.w
 80036c0:	c2f8f359 	.word	0xc2f8f359
 80036c4:	01a56e1f 	.word	0x01a56e1f
 80036c8:	8800759c 	.word	0x8800759c
 80036cc:	7e37e43c 	.word	0x7e37e43c
 80036d0:	43500000 	.word	0x43500000
 80036d4:	ffff3cb0 	.word	0xffff3cb0
 80036d8:	3c900000 	.word	0x3c900000

080036dc <copysign>:
 80036dc:	ec53 2b10 	vmov	r2, r3, d0
 80036e0:	ee11 0a90 	vmov	r0, s3
 80036e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80036e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80036ec:	ea41 0300 	orr.w	r3, r1, r0
 80036f0:	ec43 2b10 	vmov	d0, r2, r3
 80036f4:	4770      	bx	lr
	...

080036f8 <_init>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	bf00      	nop
 80036fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fe:	bc08      	pop	{r3}
 8003700:	469e      	mov	lr, r3
 8003702:	4770      	bx	lr

08003704 <_fini>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	bf00      	nop
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr
